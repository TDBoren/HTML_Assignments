/*!
 * angular-translate - v2.6.1 - 2015-03-01
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2015 ; Licensed MIT
 */
angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(a){var b=a.storageKey(),c=a.storage(),d=function(){var d=a.preferredLanguage();angular.isString(d)?a.use(d):c.put(b,a.use())};c?c.get(b)?a.use(c.get(b))["catch"](d):d():angular.isString(a.preferredLanguage())&&a.use(a.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY","$windowProvider",function(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r={},s=[],t=a,u=[],v=!1,w="translate-cloak",x=!1,y=".",z=0,A="2.6.1",B=function(){var a,c,d=b.$get().navigator,e=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(d.languages))for(a=0;a<d.languages.length;a++)if(c=d.languages[a],c&&c.length)return c;for(a=0;a<e.length;a++)if(c=d[e[a]],c&&c.length)return c;return null};B.displayName="angular-translate/service: getFirstBrowserLanguage";var C=function(){return(B()||"").split("-").join("_")};C.displayName="angular-translate/service: getLocale";var D=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},E=function(){return this.replace(/^\s+|\s+$/g,"")},F=function(a){for(var b=[],c=angular.lowercase(a),e=0,f=s.length;f>e;e++)b.push(angular.lowercase(s[e]));if(D(b,c)>-1)return a;if(d){var g;for(var h in d){var i=!1,j=Object.prototype.hasOwnProperty.call(d,h)&&angular.lowercase(h)===angular.lowercase(a);if("*"===h.slice(-1)&&(i=h.slice(0,-1)===a.slice(0,h.length-1)),(j||i)&&(g=d[h],D(b,angular.lowercase(g))>-1))return g}}var k=a.split("_");return k.length>1&&D(b,angular.lowercase(k[0]))>-1?k[0]:a},G=function(a,b){if(!a&&!b)return r;if(a&&!b){if(angular.isString(a))return r[a]}else angular.isObject(r[a])||(r[a]={}),angular.extend(r[a],H(b));return this};this.translations=G,this.cloakClassName=function(a){return a?(w=a,this):w};var H=function(a,b,c,d){var e,f,g,h;b||(b=[]),c||(c={});for(e in a)Object.prototype.hasOwnProperty.call(a,e)&&(h=a[e],angular.isObject(h)?H(h,b.concat(e),c,e):(f=b.length?""+b.join(y)+y+e:e,b.length&&e===d&&(g=""+b.join(y),c[g]="@:"+f),c[f]=h));return c};this.addInterpolation=function(a){return u.push(a),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(a){return l=a,this},this.useSanitizeValueStrategy=function(a){return v=a,this},this.preferredLanguage=function(a){return I(a),this};var I=function(a){return a&&(c=a),c};this.translationNotFoundIndicator=function(a){return this.translationNotFoundIndicatorLeft(a),this.translationNotFoundIndicatorRight(a),this},this.translationNotFoundIndicatorLeft=function(a){return a?(o=a,this):o},this.translationNotFoundIndicatorRight=function(a){return a?(p=a,this):p},this.fallbackLanguage=function(a){return J(a),this};var J=function(a){return a?(angular.isString(a)?(f=!0,e=[a]):angular.isArray(a)&&(f=!1,e=a),angular.isString(c)&&D(e,c)<0&&e.push(c),this):f?e[0]:e};this.use=function(a){if(a){if(!r[a]&&!m)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+a+"'");return g=a,this}return g};var K=function(a){return a?void(t=a):j?j+t:t};this.storageKey=K,this.useUrlLoader=function(a,b){return this.useLoader("$translateUrlLoader",angular.extend({url:a},b))},this.useStaticFilesLoader=function(a){return this.useLoader("$translateStaticFilesLoader",a)},this.useLoader=function(a,b){return m=a,n=b||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(a){return i=a,this},this.storagePrefix=function(a){return a?(j=a,this):a},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(a){return k=a,this},this.usePostCompiling=function(a){return x=!!a,this},this.determinePreferredLanguage=function(a){var b=a&&angular.isFunction(a)?a():C();return c=s.length?F(b):b,this},this.registerAvailableLanguageKeys=function(a,b){return a?(s=a,b&&(d=b),this):s},this.useLoaderCache=function(a){return a===!1?q=void 0:a===!0?q=!0:"undefined"==typeof a?q="$translationCache":a&&(q=a),this},this.directivePriority=function(a){return void 0===a?z:(z=a,this)},this.$get=["$log","$injector","$rootScope","$q",function(a,b,d,j){var s,y,B,C=b.get(l||"$translateDefaultInterpolation"),L=!1,M={},N={},O=function(a,b,d,f){if(angular.isArray(a)){var h=function(a){for(var c={},e=[],g=function(a){var e=j.defer(),g=function(b){c[a]=b,e.resolve([a,b])};return O(a,b,d,f).then(g,g),e.promise},h=0,i=a.length;i>h;h++)e.push(g(a[h]));return j.all(e).then(function(){return c})};return h(a)}var k=j.defer();a&&(a=E.apply(a));var l=function(){var a=c?N[c]:N[g];if(y=0,i&&!a){var b=s.get(t);if(a=N[b],e&&e.length){var d=D(e,b);y=0===d?1:0,D(e,c)<0&&e.push(c)}}return a}();return l?l.then(function(){$(a,b,d,f).then(k.resolve,k.reject)},k.reject):$(a,b,d,f).then(k.resolve,k.reject),k.promise},P=function(a){return o&&(a=[o,a].join(" ")),p&&(a=[a,p].join(" ")),a},Q=function(a){g=a,d.$emit("$translateChangeSuccess",{language:a}),i&&s.put(O.storageKey(),g),C.setLocale(g),angular.forEach(M,function(a,b){M[b].setLocale(g)}),d.$emit("$translateChangeEnd",{language:a})},R=function(a){if(!a)throw"No language key specified for loading.";var c=j.defer();d.$emit("$translateLoadingStart",{language:a}),L=!0;var e=q;"string"==typeof e&&(e=b.get(e));var f=angular.extend({},n,{key:a,$http:angular.extend({},{cache:e},n.$http)});return b.get(m)(f).then(function(b){var e={};d.$emit("$translateLoadingSuccess",{language:a}),angular.isArray(b)?angular.forEach(b,function(a){angular.extend(e,H(a))}):angular.extend(e,H(b)),L=!1,c.resolve({key:a,table:e}),d.$emit("$translateLoadingEnd",{language:a})},function(a){d.$emit("$translateLoadingError",{language:a}),c.reject(a),d.$emit("$translateLoadingEnd",{language:a})}),c.promise};if(i&&(s=b.get(i),!s.get||!s.put))throw new Error("Couldn't use storage '"+i+"', missing get() or put() method!");angular.isFunction(C.useSanitizeValueStrategy)&&C.useSanitizeValueStrategy(v),u.length&&angular.forEach(u,function(a){var d=b.get(a);d.setLocale(c||g),angular.isFunction(d.useSanitizeValueStrategy)&&d.useSanitizeValueStrategy(v),M[d.getInterpolationIdentifier()]=d});var S=function(a){var b=j.defer();return Object.prototype.hasOwnProperty.call(r,a)?b.resolve(r[a]):N[a]?N[a].then(function(a){G(a.key,a.table),b.resolve(a.table)},b.reject):b.reject(),b.promise},T=function(a,b,c,d){var e=j.defer();return S(a).then(function(f){if(Object.prototype.hasOwnProperty.call(f,b)){d.setLocale(a);var h=f[b];"@:"===h.substr(0,2)?T(a,h.substr(2),c,d).then(e.resolve,e.reject):e.resolve(d.interpolate(f[b],c)),d.setLocale(g)}else e.reject()},e.reject),e.promise},U=function(a,b,c,d){var e,f=r[a];if(f&&Object.prototype.hasOwnProperty.call(f,b)){if(d.setLocale(a),e=d.interpolate(f[b],c),"@:"===e.substr(0,2))return U(a,e.substr(2),c,d);d.setLocale(g)}return e},V=function(a){if(k){var c=b.get(k)(a,g);return void 0!==c?c:a}return a},W=function(a,b,c,d,f){var g=j.defer();if(a<e.length){var h=e[a];T(h,b,c,d).then(g.resolve,function(){W(a+1,b,c,d,f).then(g.resolve)})}else g.resolve(f?f:V(b));return g.promise},X=function(a,b,c,d){var f;if(a<e.length){var g=e[a];f=U(g,b,c,d),f||(f=X(a+1,b,c,d))}return f},Y=function(a,b,c,d){return W(B>0?B:y,a,b,c,d)},Z=function(a,b,c){return X(B>0?B:y,a,b,c)},$=function(a,b,c,d){var f=j.defer(),h=g?r[g]:r,i=c?M[c]:C;if(h&&Object.prototype.hasOwnProperty.call(h,a)){var l=h[a];"@:"===l.substr(0,2)?O(l.substr(2),b,c,d).then(f.resolve,f.reject):f.resolve(i.interpolate(l,b))}else{var m;k&&!L&&(m=V(a)),g&&e&&e.length?Y(a,b,i,d).then(function(a){f.resolve(a)},function(a){f.reject(P(a))}):k&&!L&&m?f.resolve(d?d:m):d?f.resolve(d):f.reject(P(a))}return f.promise},_=function(a,b,c){var d,f=g?r[g]:r,h=C;if(M&&Object.prototype.hasOwnProperty.call(M,c)&&(h=M[c]),f&&Object.prototype.hasOwnProperty.call(f,a)){var i=f[a];d="@:"===i.substr(0,2)?_(i.substr(2),b,c):h.interpolate(i,b)}else{var j;k&&!L&&(j=V(a)),g&&e&&e.length?(y=0,d=Z(a,b,h)):d=k&&!L&&j?j:P(a)}return d};if(O.preferredLanguage=function(a){return a&&I(a),c},O.cloakClassName=function(){return w},O.fallbackLanguage=function(a){if(void 0!==a&&null!==a){if(J(a),m&&e&&e.length)for(var b=0,c=e.length;c>b;b++)N[e[b]]||(N[e[b]]=R(e[b]));O.use(O.use())}return f?e[0]:e},O.useFallbackLanguage=function(a){if(void 0!==a&&null!==a)if(a){var b=D(e,a);b>-1&&(B=b)}else B=0},O.proposedLanguage=function(){return h},O.storage=function(){return s},O.use=function(a){if(!a)return g;var b=j.defer();d.$emit("$translateChangeStart",{language:a});var c=F(a);return c&&(a=c),r[a]||!m||N[a]?(b.resolve(a),Q(a)):(h=a,N[a]=R(a).then(function(c){return G(c.key,c.table),b.resolve(c.key),Q(c.key),h===a&&(h=void 0),c},function(a){h===a&&(h=void 0),d.$emit("$translateChangeError",{language:a}),b.reject(a),d.$emit("$translateChangeEnd",{language:a})})),b.promise},O.storageKey=function(){return K()},O.isPostCompilingEnabled=function(){return x},O.refresh=function(a){function b(){f.resolve(),d.$emit("$translateRefreshEnd",{language:a})}function c(){f.reject(),d.$emit("$translateRefreshEnd",{language:a})}if(!m)throw new Error("Couldn't refresh translation table, no loader registered!");var f=j.defer();if(d.$emit("$translateRefreshStart",{language:a}),a)r[a]?R(a).then(function(c){G(c.key,c.table),a===g&&Q(g),b()},c):c();else{var h=[],i={};if(e&&e.length)for(var k=0,l=e.length;l>k;k++)h.push(R(e[k])),i[e[k]]=!0;g&&!i[g]&&h.push(R(g)),j.all(h).then(function(a){angular.forEach(a,function(a){r[a.key]&&delete r[a.key],G(a.key,a.table)}),g&&Q(g),b()})}return f.promise},O.instant=function(a,b,d){if(null===a||angular.isUndefined(a))return a;if(angular.isArray(a)){for(var f={},h=0,i=a.length;i>h;h++)f[a[h]]=O.instant(a[h],b,d);return f}if(angular.isString(a)&&a.length<1)return a;a&&(a=E.apply(a));var j,l=[];c&&l.push(c),g&&l.push(g),e&&e.length&&(l=l.concat(e));for(var m=0,n=l.length;n>m;m++){var q=l[m];if(r[q]&&("undefined"!=typeof r[q][a]?j=_(a,b,d):(o||p)&&(j=P(a))),"undefined"!=typeof j)break}return j||""===j||(j=C.interpolate(a,b),k&&!L&&(j=V(a))),j},O.versionInfo=function(){return A},O.loaderCache=function(){return q},O.directivePriority=function(){return z},m&&(angular.equals(r,{})&&O.use(O.use()),e&&e.length))for(var ab=function(a){return G(a.key,a.table),d.$emit("$translateChangeEnd",{language:a.key}),a},bb=0,cb=e.length;cb>bb;bb++)N[e[bb]]=R(e[bb]).then(ab);return O}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(a){var b,c={},d="default",e=null,f={escaped:function(a){var b={};for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(b[c]=angular.isNumber(a[c])?a[c]:angular.element("<div></div>").text(a[c]).html());return b}},g=function(a){var b;return b=angular.isFunction(f[e])?f[e](a):a};return c.setLocale=function(a){b=a},c.getInterpolationIdentifier=function(){return d},c.useSanitizeValueStrategy=function(a){return e=a,this},c.interpolate=function(b,c){return e&&(c=g(c)),a(b)(c||{})},c}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(a,b,c,d,e,f){var g=function(){return this.replace(/^\s+|\s+$/g,"")};return{restrict:"AE",scope:!0,priority:a.directivePriority(),compile:function(b,h){var i=h.translateValues?h.translateValues:void 0,j=h.translateInterpolation?h.translateInterpolation:void 0,k=b[0].outerHTML.match(/translate-value-+/i),l="^(.*)("+c.startSymbol()+".*"+c.endSymbol()+")(.*)",m="^(.*)"+c.startSymbol()+"(.*)"+c.endSymbol()+"(.*)";return function(b,n,o){b.interpolateParams={},b.preText="",b.postText="";var p={},q=function(a){if(angular.isFunction(q._unwatchOld)&&(q._unwatchOld(),q._unwatchOld=void 0),angular.equals(a,"")||!angular.isDefined(a)){var d=g.apply(n.text()).match(l);if(angular.isArray(d)){b.preText=d[1],b.postText=d[3],p.translate=c(d[2])(b.$parent);var e=n.text().match(m);angular.isArray(e)&&e[2]&&e[2].length&&(q._unwatchOld=b.$watch(e[2],function(a){p.translate=a,w()}))}else p.translate=n.text().replace(/^\s+|\s+$/g,"")}else p.translate=a;w()},r=function(a){o.$observe(a,function(b){p[a]=b,w()})},s=!0;o.$observe("translate",function(a){"undefined"==typeof a?q(""):""===a&&s||(p.translate=a,w()),s=!1});for(var t in o)o.hasOwnProperty(t)&&"translateAttr"===t.substr(0,13)&&r(t);if(o.$observe("translateDefault",function(a){b.defaultText=a}),i&&o.$observe("translateValues",function(a){a&&b.$parent.$watch(function(){angular.extend(b.interpolateParams,e(a)(b.$parent))})}),k){var u=function(a){o.$observe(a,function(c){var d=angular.lowercase(a.substr(14,1))+a.substr(15);b.interpolateParams[d]=c})};for(var v in o)Object.prototype.hasOwnProperty.call(o,v)&&"translateValue"===v.substr(0,14)&&"translateValues"!==v&&u(v)}var w=function(){for(var a in p)p.hasOwnProperty(a)&&x(a,p[a],b,b.interpolateParams,b.defaultText)},x=function(b,c,d,e,f){c?a(c,e,j,f).then(function(a){y(a,d,!0,b)},function(a){y(a,d,!1,b)}):y(c,d,!1,b)},y=function(b,c,e,f){if("translate"===f){e||"undefined"==typeof c.defaultText||(b=c.defaultText),n.html(c.preText+b+c.postText);var g=a.isPostCompilingEnabled(),i="undefined"!=typeof h.translateCompile,j=i&&"false"!==h.translateCompile;(g&&!i||j)&&d(n.contents())(c)}else{e||"undefined"==typeof c.defaultText||(b=c.defaultText);var k=o.$attr[f].substr(15);n.attr(k,b)}};b.$watch("interpolateParams",w,!0);var z=f.$on("$translateChangeSuccess",w);n.text().length&&q(""),w(),b.$on("$destroy",z)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(a,b){return{compile:function(c){var d=function(){c.addClass(b.cloakClassName())},e=function(){c.removeClass(b.cloakClassName())},f=a.$on("$translateChangeEnd",function(){e(),f(),f=null});return d(),function(a,c,f){f.translateCloak&&f.translateCloak.length&&f.$observe("translateCloak",function(a){b(a).then(e,d)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(a,b){var c=function(c,d,e){return angular.isObject(d)||(d=a(d)(this)),b.instant(c,d,e)};return c.$stateful=!0,c}]);
/*!
 * angular-translate - v2.6.1 - 2015-03-01
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2015 ; Licensed MIT
 */
angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(a,b){return function(c){if(!(c&&(angular.isArray(c.files)||angular.isString(c.prefix)&&angular.isString(c.suffix))))throw new Error("Couldn't load static files, no files and prefix or suffix specified!");c.files||(c.files=[{prefix:c.prefix,suffix:c.suffix}]);for(var d=function(d){if(!d||!angular.isString(d.prefix)||!angular.isString(d.suffix))throw new Error("Couldn't load static file, no prefix or suffix specified!");var e=a.defer();return b(angular.extend({url:[d.prefix,c.key,d.suffix].join(""),method:"GET",params:""},c.$http)).success(function(a){e.resolve(a)}).error(function(){e.reject(c.key)}),e.promise},e=a.defer(),f=[],g=c.files.length,h=0;g>h;h++)f.push(d({prefix:c.files[h].prefix,key:c.key,suffix:c.files[h].suffix}));return a.all(f).then(function(a){for(var b=a.length,c={},d=0;b>d;d++)for(var f in a[d])c[f]=a[d][f];e.resolve(c)},function(a){e.reject(a)}),e.promise}}]);
/**
 * Angular-Validation Directive and Service (ghiscoding)
 * http://github.com/ghiscoding/angular-validation
 * @author: Ghislain B.
 * @version: 1.5.13
 * @license: MIT
 * @build: Thu Dec 29 2016 13:23:30 GMT-0500 (Eastern Standard Time)
 */
angular.module("ghiscoding.validation",["pascalprecht.translate"]).directive("validation",["$q","$timeout","ValidationCommon",function(a,e,i){return{restrict:"A",require:"ngModel",link:function(n,t,r,l){function o(i,r){var o=a.defer(),d=!1,m="undefined"!=typeof r?r:h.typingLimit,s=h.getFormElementByName(l.$name);if(Array.isArray(i)){if($=[],O="",m=0,i.length>0)return"function"==typeof s.ctrl.$setTouched&&s.ctrl.$setTouched(),u(i,typeof i);m=0}return i&&i.badInput?c():(h.validate(i,!1),h.isFieldRequired()||A||""!==i&&null!==i&&"undefined"!=typeof i?(s&&(s.isValidationCancelled=!1),(i||h.isFieldRequired()||A)&&l.$setValidity("validation",!1),"SELECT"===t.prop("tagName").toUpperCase()?(d=h.validate(i,!0),l.$setValidity("validation",d),o.resolve({isFieldValid:d,formElmObj:s,value:i}),o.promise):("undefined"!=typeof i&&(0===r?(d=h.validate(i,!0),n.$evalAsync(l.$setValidity("validation",d)),o.resolve({isFieldValid:d,formElmObj:s,value:i}),e.cancel(b)):(h.updateErrorMsg(""),e.cancel(b),b=e(function(){d=h.validate(i,!0),n.$evalAsync(l.$setValidity("validation",d)),o.resolve({isFieldValid:d,formElmObj:s,value:i})},m))),o.promise)):(f(),o.resolve({isFieldValid:!0,formElmObj:s,value:i}),o.promise))}function d(a,e,i){var n=o(a,0);n&&"function"==typeof n.then&&($.push(n),parseInt(e)===i-1&&$.forEach(function(a){a.then(function(a){switch(F){case"all":a.isFieldValid===!1&&a.formElmObj.translatePromise.then(function(e){O.length>0&&g.displayOnlyLastErrorMsg?O="["+a.value+"] :: "+(a.formElmObj.validator&&a.formElmObj.validator.params?String.format(e,a.formElmObj.validator.params):e):O+=" ["+a.value+"] :: "+(a.formElmObj.validator&&a.formElmObj.validator.params?String.format(e,a.formElmObj.validator.params):e),h.updateErrorMsg(O,{isValid:!1}),h.addToValidationSummary(a.formElmObj,O)});break;case"one":default:a.isFieldValid===!0&&(l.$setValidity("validation",!0),f())}})}))}function m(a){var e=h.getFormElementByName(l.$name),i="undefined"!=typeof l.$modelValue?l.$modelValue:a.target.value;if(e&&e.hasOwnProperty("isValidationCancelled")){var n=o(i,0);w&&h.runValidationCallbackOnPromise(n,w)}else l.$setValidity("validation",!0)}function u(a,e){var i=a.length;if("string"===e)for(var n in a)d(a[n],n,i);else if("object"===e)for(var n in a)if(a.hasOwnProperty(n)){var t=a[n];for(var r in t)if(t.hasOwnProperty(r)){if(C&&r!==C)continue;d(t[r],n,i)}}}function s(){f(),h.removeFromValidationSummary(j);var a=h.arrayFindObject(E,"elmName",l.$name);if(a&&"function"==typeof a.watcherHandler){a.watcherHandler();E.shift()}}function f(){var a=h.getFormElementByName(l.$name);a&&(a.isValidationCancelled=!0),e.cancel(b),h.updateErrorMsg(""),l.$setValidity("validation",!0),V()}function v(){return n.$watch(function(){var a=l.$modelValue;if(y())return{badInput:!0};if(C&&Array.isArray(a)&&0===a.length&&Object.keys(a).length>0){var e=[],i={};return i[C]=a[C],e.push(i),e}return a},function(a,e){if(a&&a.badInput)return V(),c();var i=o(a);w&&h.runValidationCallbackOnPromise(i,w)},!0)}function c(){e.cancel(b);var a=h.getFormElementByName(l.$name);h.updateErrorMsg("INVALID_KEY_CHAR",{isValid:!1,translate:!0}),h.addToValidationSummary(a,"INVALID_KEY_CHAR",!0)}function y(){return!!t.prop("validity")&&t.prop("validity").badInput===!0}function p(){var a=l.$modelValue||"";Array.isArray(a)||l.$setValidity("validation",h.validate(a,!1));var e=h.getFormElementByName(l.$name);e&&(e.isValidationCancelled=!1),V(),t.bind("blur",m)}function V(){"function"==typeof m&&t.unbind("blur",m)}var b,h=new i(n,t,r,l),O="",$=[],E=[],g=h.getGlobalOptions(),j=r.name,w=r.hasOwnProperty("validationCallback")?r.validationCallback:null,A=r.hasOwnProperty("validateOnEmpty")?h.parseBool(r.validateOnEmpty):!!g.validateOnEmpty,F=r.hasOwnProperty("validArrayRequireHowMany")?r.validArrayRequireHowMany:"one",C=r.hasOwnProperty("validationArrayObjprop")?r.validationArrayObjprop:null;E.push({elmName:j,watcherHandler:v()}),r.$observe("disabled",function(a){a?(f(),h.removeFromValidationSummary(j)):p()}),t.on("$destroy",function(){s()}),n.$watch(function(){return t.attr("validation")},function(a){if("undefined"==typeof a||""===a)s();else{h.defineValidation(),p();var e=h.arrayFindObject(E,"elmName",l.$name);e||E.push({elmName:j,watcherHandler:v()})}}),t.bind("blur",m),n.$on("angularValidation.revalidate",function(a,e){if(e==l.$name){l.revalidateCalled=!0;var i=l.$modelValue;if(t&&t.hasOwnProperty("isValidationCancelled")){var n=o(i);w&&h.runValidationCallbackOnPromise(n,w)}else l.$setValidity("validation",!0)}})}}}]);
angular.module("ghiscoding.validation").factory("ValidationCommon",["$rootScope","$timeout","$translate","ValidationRules",function(e,t,a,r){function n(e,t,r){if("undefined"!=typeof e&&null!=e){var n=e.ctrl&&e.ctrl.$name?e.ctrl.$name:e.attrs&&e.attrs.name?e.attrs.name:e.elm.attr("name"),i=R(n,e),o=V(Q,"field",n);if(o>=0&&""===t)Q.splice(o,1);else if(""!==t){r&&(t=a.instant(t));var s=e.attrs&&e.friendlyName?a.instant(e.friendlyName):"",l={field:n,friendlyName:s,message:t,formName:i?i.$name:null};o>=0?Q[o]=l:Q.push(l)}if(e.scope.$validationSummary=Q,i&&(i.$validationSummary=A(Q,"formName",i.$name)),K&&K.controllerAs&&(K.controllerAs.$validationSummary=Q,i&&i.$name)){var u=i.$name.indexOf(".")>=0?i.$name.split(".")[1]:i.$name,p=K.controllerAs[u]?K.controllerAs[u]:e.elm.controller()[u];p&&(p.$validationSummary=A(Q,"formName",i.$name))}return Q}}function i(){var e=this,t={};e.validators=[],e=S(e);var a=e.validatorAttrs.rules||e.validatorAttrs.validation;if(a.indexOf("pattern=/")>=0){var n=a.match(/pattern=(\/(?:(?!:alt).)*\/[igm]*)(:alt=(.*))?/);if(!n||n.length<3)throw'Regex validator within the validation needs to be define with an opening "/" and a closing "/", please review your validator.';var i=n[1],o=n[2]?n[2].replace(/\|(.*)/,""):"",s=i.match(new RegExp("^/(.*?)/([gimy]*)$")),l=new RegExp(s[1],s[2]);t={altMsg:o,message:o.replace(/:alt=/,""),pattern:l},a=a.replace("pattern="+i,"pattern")}else if(a.indexOf("regex:")>=0){var n=a.match("regex:(.*?):regex");if(n.length<2)throw'Regex validator within the validation needs to be define with an opening "regex:" and a closing ":regex", please review your validator.';var u=n[1].split(":=");t={message:u[0],pattern:u[1]},a=a.replace(n[0],"regex:")}var p=a.split("|");if(p){e.bFieldRequired=a.indexOf("required")>=0;for(var d=0,m=p.length;d<m;d++){var c=p[d].indexOf("alt="),f=c>=0,g=[];f?(g=p[d].substring(0,c-1).split(":"),g.push(p[d].substring(c))):g=p[d].split(":"),e.validators[d]=r.getElementValidators({altText:f===!0?2===g.length?g[1]:g[2]:"",customRegEx:t,rule:g[0],ruleParams:f&&2===g.length?null:g[1]})}}return e}function o(e){return w(z,"fieldName",e)}function s(e){return e?A(z,"formName",e):z}function l(){return K}function u(e,t,a,r){this.scope=e,this.elm=t,this.ctrl=r,this.validatorAttrs=a,$(t,a,r,e),this.defineValidation()}function p(){var e=this;return e.bFieldRequired}function d(e,t){var a={};for(var r in e)a[r]=e[r];for(var r in t)a[r]=t[r];return a}function m(e){var t=V(z,"fieldName",e);t>=0&&z.splice(t,1)}function c(e,t){var a=this,r=R(e,a),n=t||Q,i=V(n,"field",e);if(i>=0&&n.splice(i,1),i=V(Q,"field",e),i>=0&&Q.splice(i,1),a.scope.$validationSummary=Q,r&&(r.$validationSummary=A(Q,"formName",r.$name)),K&&K.controllerAs&&(K.controllerAs.$validationSummary=Q,r)){var o=r.$name.indexOf(".")>=0?r.$name.split(".")[1]:r.$name;K.controllerAs[o]&&(K.controllerAs[o].$validationSummary=A(Q,"formName",r.$name))}return Q}function f(e,t){var a;if(/\({1}.*\){1}/gi.test(t))a=e.scope.$eval(t);else{var r=N(e.scope,t,".");"function"==typeof r&&(a=r())}return a}function g(e,t){var a=this;"function"==typeof e.then&&e.then(function(){f(a,t)})}function v(e){K.displayOnlyLastErrorMsg=e}function y(e){var t=this;return K=d(K,e),t}function h(e,t){var r=this;t&&t.obj&&(r=t.obj,r.validatorAttrs=t.obj.attrs);var n=t&&t.elm?t.elm:r.elm,i=n&&n.attr("name")?n.attr("name"):null;if("undefined"==typeof i||null===i){var o=n?n.attr("ng-model"):"unknown";throw'Angular-Validation Service requires you to have a (name="") attribute on the element to validate... Your element is: ng-model="'+o+'"'}var s=t&&t.translate?a.instant(e):e;s=s.trim();var l=i.replace(/[|&;$%@"<>()+,\[\]\{\}]/g,"").replace(/\./g,"-"),u=null;if(r.validatorAttrs&&r.validatorAttrs.hasOwnProperty("validationErrorTo")){var p=r.validatorAttrs.validationErrorTo.charAt(0),d="."===p||"#"===p?r.validatorAttrs.validationErrorTo:"#"+r.validatorAttrs.validationErrorTo;u=angular.element(document.querySelector(d))}u&&0!==u.length||(u=angular.element(document.querySelector(".validation-"+l)));var m=!(!t||!t.isSubmitted)&&t.isSubmitted;!K.hideErrorUnderInputs&&t&&!t.isValid&&(m||r.ctrl.$dirty||r.ctrl.$touched||r.ctrl.revalidateCalled)?u.length>0?u.html(s):n.after('<div class="validation validation-'+l+' text-danger">'+s+"</div>"):u.html("")}function b(e,t){var r,i=this,s=!0,l=!0,u=0,p={message:""};"undefined"==typeof e&&(e="");for(var d=i.ctrl&&i.ctrl.$name?i.ctrl.$name:i.attrs&&i.attrs.name?i.attrs.name:i.elm.attr("name"),m=o(d),c=i.validatorAttrs.rules||i.validatorAttrs.validation,f=0,g=i.validators.length;f<g;f++){r=i.validators[f],"autoDetect"===r.type&&(r=_(r,e));var v=i.attrs?i.attrs.ngDisabled:i.validatorAttrs.ngDisabled;switch(r.type){case"conditionalDate":s=j(e,r,c);break;case"conditionalNumber":s=G(e,r);break;case"javascript":s=D(e,r,i,m,t,p);break;case"matching":s=H(e,r,i,p);break;case"remote":s=I(e,r,i,m,t,p);break;default:s=B(e,r,c,i)}if((!i.bFieldRequired&&!e&&!W||i.elm.prop("disabled")||i.scope.$eval(v))&&(s=!0),s||(l=!1,function(e,r,n){var o=n.message,s=K.errorMessageSeparator||" ";n.altText&&n.altText.length>0&&(o=n.altText.replace("alt=",""));var u=a(o);e.translatePromise=u,e.validator=n,u.then(function(a){p.message.length>0&&K.displayOnlyLastErrorMsg?p.message=s+(n&&n.params?String.format(a,n.params):a):p.message+=s+(n&&n.params?String.format(a,n.params):a),O(i,e,p.message,l,t)})["catch"](function(a){if(!(n.altText&&n.altText.length>0))throw String.format("Could not translate: '{0}'. Please check your Angular-Translate $translateProvider configuration.",a);p.message.length>0&&K.displayOnlyLastErrorMsg?p.message=s+o:p.message+=s+o,O(i,e,p.message,l,t)})}(m,s,r)),s&&u++,i.validRequireHowMany==u&&s){l=!0;break}}return s&&(n(i,""),i.updateErrorMsg("",{isValid:s})),m&&(m.isValid=l,l&&(m.message="")),l}function $(e,t,r,n){var i=t.name?t.name:e.attr("name"),o=R(i,{scope:n}),s=t&&t.friendlyName?a.instant(t.friendlyName):"",l={fieldName:i,friendlyName:s,elm:e,attrs:t,ctrl:r,scope:n,isValid:!1,message:"",formName:o?o.$name:null},u=V(z,"fieldName",e.attr("name"));return u>=0?z[u]=l:z.push(l),z}function O(e,t,a,r,i){a=a.trim(),t&&t.isValidationCancelled===!0&&(a=""),(K.preValidateValidationSummary||"undefined"==typeof K.preValidateValidationSummary||i)&&n(t,a),(e.validatorAttrs.preValidateFormElements||K.preValidateFormElements)&&(t&&"function"==typeof e.ctrl.$setTouched&&t.ctrl.$setTouched(),e.ctrl.$dirty===!1&&h(a,{isSubmitted:!0,isValid:r,obj:t})),i&&t&&!t.isValid?e.updateErrorMsg(a,{isValid:r,obj:t}):t&&t.isValid&&n(t,"")}function S(e){return e.typingLimit=J,e.validatorAttrs.hasOwnProperty("debounce")?e.typingLimit=parseInt(e.validatorAttrs.debounce,10):e.validatorAttrs.hasOwnProperty("typingLimit")?e.typingLimit=parseInt(e.validatorAttrs.typingLimit,10):K&&K.hasOwnProperty("debounce")&&(e.typingLimit=parseInt(K.debounce,10)),e.validRequireHowMany=e.validatorAttrs.hasOwnProperty("validRequireHowMany")?e.validatorAttrs.validRequireHowMany:K.validRequireHowMany,W=e.validatorAttrs.hasOwnProperty("validateOnEmpty")?T(e.validatorAttrs.validateOnEmpty):K.validateOnEmpty,e}function w(e,t,a){if(e)for(var r=0;r<e.length;r++)if(e[r][t]===a)return e[r];return null}function A(e,t,a){var r=[];if(e)for(var n=0;n<e.length;n++)e[n][t]===a&&r.push(e[n]);return r}function V(e,t,a){if(e)for(var r=0;r<e.length;r++)if(e[r][t]===a)return r;return-1}function E(e,t){var a=e?e.getAttribute("name"):null;return e&&a&&(parentForm=K&&K.controllerAs&&a.indexOf(".")>=0?N(t.scope,a,"."):t.scope[a],parentForm)?("undefined"==typeof parentForm.$name&&(parentForm.$name=a),parentForm):null}function R(e,t){if(K&&K.formName){var a=document.querySelector('[name="'+K.formName+'"]');if(a)return a.$name=K.formName,a}for(var r=document.getElementsByName(e),a=null,n=0;n<r.length;n++){var i=r[n].form,o=E(i,t);if(o)return o}if(!i){var s=document.querySelector('[name="'+e+'"]');if(s){var i=s.closest("form"),o=E(i,t);if(o)return o}}if(i){var l=i?i.getAttribute("name"):null;if(l){var u={$name:l,specialNote:"Created by Angular-Validation for Isolated Scope usage"};if(K&&K.controllerAs&&l.indexOf(".")>=0){var p=l.split(".");return t.scope[p[0]][p[1]]=u}return t.scope[l]=u}}return null}function x(e){return!isNaN(parseFloat(e))&&isFinite(e)}function N(e,t,a){for(var r=a?t.split(a):t,n=0,i=r.length;n<i;n++)e[r[n]]&&(e=e[r[n]]);return e}function T(e){return"boolean"==typeof e||"number"==typeof e?e===!0||1===e:"string"==typeof e&&(e=e.replace(/^\s+|\s+$/g,"").toLowerCase(),"true"===e||"1"===e||"false"===e||"0"===e)?"true"===e||"1"===e:void 0}function F(e,t){var a="",r="-",n=[],i=[],o="",s="",l="";switch(t.toUpperCase()){case"EURO_LONG":case"EURO-LONG":a=e.substring(0,10),r=e.substring(2,3),n=k(a,r),l=n[0],s=n[1],o=n[2],i=e.length>8?e.substring(9).split(":"):null;break;case"UK":case"EURO":case"EURO_SHORT":case"EURO-SHORT":case"EUROPE":a=e.substring(0,8),r=e.substring(2,3),n=k(a,r),l=n[0],s=n[1],o=parseInt(n[2])<50?"20"+n[2]:"19"+n[2],i=e.length>8?e.substring(9).split(":"):null;break;case"US_LONG":case"US-LONG":a=e.substring(0,10),r=e.substring(2,3),n=k(a,r),s=n[0],l=n[1],o=n[2],i=e.length>8?e.substring(9).split(":"):null;break;case"US":case"US_SHORT":case"US-SHORT":a=e.substring(0,8),r=e.substring(2,3),n=k(a,r),s=n[0],l=n[1],o=parseInt(n[2])<50?"20"+n[2]:"19"+n[2],i=e.length>8?e.substring(9).split(":"):null;break;case"ISO":default:a=e.substring(0,10),r=e.substring(4,5),n=k(a,r),o=n[0],s=n[1],l=n[2],i=e.length>10?e.substring(11).split(":"):null}var u=i&&3===i.length?i[0]:0,p=i&&3===i.length?i[1]:0,d=i&&3===i.length?i[2]:0;return new Date(o,s-1,l,u,p,d)}function q(e){e&&(K={displayOnlyLastErrorMsg:!1,errorMessageSeparator:" ",hideErrorUnderInputs:!1,preValidateFormElements:!1,preValidateValidationSummary:!0,isolatedScope:null,scope:null,validateOnEmpty:!1,validRequireHowMany:"all",resetGlobalOptionsOnRouteChange:!0},z=[],Q=[])}function k(e,t){var a=[];switch(t){case"/":a=e.split("/");break;case".":a=e.split(".");break;case"-":default:a=e.split("-")}return a}function C(e,t,a){var r=!1;switch(e){case"<":r=t<a;break;case"<=":r=t<=a;break;case">":r=t>a;break;case">=":r=t>=a;break;case"!=":case"<>":r=t!=a;break;case"!==":r=t!==a;break;case"=":case"==":r=t==a;break;case"===":r=t===a;break;default:r=!1}return r}function L(){Element.prototype.closest=function(e){var t,a=(this.document||this.ownerDocument).querySelectorAll(e),r=this;do for(t=a.length;--t>=0&&a.item(t)!==r;);while(t<0&&(r=r.parentElement));return r}}function M(){return this.replace(/^\s+|\s+$/g,"")}function U(){var e=Array.isArray(arguments[0])?arguments[0]:arguments;return this.replace(/{(\d+)}/g,function(t,a){return"undefined"!=typeof e[a]?e[a]:t})}function P(e){var t=Array.isArray(arguments[1])?arguments[1]:Array.prototype.slice.call(arguments,1);return e.replace(/{(\d+)}/g,function(e,a){return"undefined"!=typeof t[a]?t[a]:e})}function j(e,t,a){var r=!0,n=r=!1;if(e instanceof Date)n=!0;else{var i=new RegExp(t.pattern,t.patternFlag);n=!((!t.pattern||"/\\S+/"===t.pattern.toString()||a&&"required"===t.pattern)&&null===e)&&i.test(e)}if(n){var o=t.dateType,s=e instanceof Date?e:F(e,o).getTime();if(2==t.params.length){var l=F(t.params[0],o).getTime(),u=F(t.params[1],o).getTime(),p=C(t.condition[0],s,l),d=C(t.condition[1],s,u);r=p&&d}else{var m=F(t.params[0],o).getTime();r=C(t.condition,s,m)}}return r}function G(e,t){var a=!0;if(2==t.params.length){var r=C(t.condition[0],parseFloat(e),parseFloat(t.params[0])),n=C(t.condition[1],parseFloat(e),parseFloat(t.params[1]));a=r&&n}else a=C(t.condition,parseFloat(e),parseFloat(t.params[0]));return a}function D(e,a,r,n,i,o){var s=!0,l="Custom Javascript Validation requires an error message defined as 'alt=' in your validator or defined in your custom javascript function as { isValid: bool, message: 'your error' }",u="Custom Javascript Validation requires a declared function (in your Controller), please review your code.";if(e||W){var p=a.params[0],d=f(r,p);if("boolean"==typeof d)s=!!d;else{if("object"!=typeof d)throw u;s=!!d.isValid}if(s===!1?(n.isValid=!1,t(function(){var e=o.message+" ";if(d.message&&(e+=d.message||a.altText)," "===e&&a.altText&&(e+=a.altText)," "===e)throw l;O(r,n,e,!1,i)})):s===!0&&(n.isValid=!0,O(r,n,"",!0,i)),"undefined"==typeof d)throw u}return s}function H(e,t,r,n){var i=!0,s=t.params[0],l=r.scope.$eval(s),u=angular.element(document.querySelector('[name="'+s+'"]')),p=t,d=r.ctrl,m=o(r.ctrl.$name);return i=C(t.condition,e,l)&&!!e,u&&u.attr("friendly-name")?t.params[1]=u.attr("friendly-name"):t.params.length>1&&(t.params[1]=t.params[1]),r.scope.$watch(s,function(e,t){var i=C(p.condition,d.$viewValue,e);if(e!==t){if(i)O(r,m,"",!0,!0);else{m.isValid=!1;var o=p.message;p.altText&&p.altText.length>0&&(o=p.altText.replace("alt=","")),a(o).then(function(e){var t=K.errorMessageSeparator||" ";n.message=t+(p&&p.params?String.format(e,p.params):e),O(r,m,n.message,i,!0)})}d.$setValidity("validation",i)}},!0),i}function I(e,t,a,r,n,i){var o=!0,s="Remote Javascript Validation requires an error message defined as 'alt=' in your validator or defined in your custom remote function as { isValid: bool, message: 'your error' }",l="Remote Validation requires a declared function (in your Controller) which also needs to return a Promise, please review your code.";if(e&&n||W){a.ctrl.$processing=!0;var u=t.params[0],p=f(a,u);if(Y.length>1)for(;Y.length>0;){var d=Y.pop();"function"==typeof d.abort&&d.abort()}if(Y.push(p),!p||"function"!=typeof p.then)throw l;a.ctrl.$setValidity("remote",!1),function(e){p.then(function(t){t=t.data||t,Y.pop(),a.ctrl.$processing=!1;var u=i.message+" ";if("boolean"==typeof t)o=!!t;else{if("object"!=typeof t)throw l;o=!!t.isValid}if(o===!1){if(r.isValid=!1,u+=t.message||e," "===u)throw s;O(a,r,u,!1,n)}else o===!0&&(r.isValid=!0,a.ctrl.$setValidity("remote",!0),O(a,r,"",!0,n))})}(t.altText)}return o}function B(e,t,a,r){var n=!0,i=r.attrs?r.attrs.ngDisabled:r.validatorAttrs.ngDisabled;if(r.elm.prop("disabled")||r.scope.$eval(i))n=!0;else if("string"==typeof e&&""===e&&r.elm.prop("type")&&"NUMBER"===r.elm.prop("type").toUpperCase())n=!1;else{var o=new RegExp(t.pattern,t.patternFlag);n=!((!t.pattern||"/\\S+/"===t.pattern.toString()||a&&"required"===t.pattern)&&null===e)&&o.test(e)}return n}function _(e,t){return x(t)?{condition:e.conditionNum,message:e.messageNum,params:e.params,type:"conditionalNumber"}:{pattern:e.patternLength,message:e.messageLength,params:e.params,type:"regex"}}var J=1e3,z=[],K={resetGlobalOptionsOnRouteChange:!0},Y=[],Q=[],W=!1;e.$on("$routeChangeStart",function(e,t,a){q(K.resetGlobalOptionsOnRouteChange)}),e.$on("$stateChangeStart",function(e,t,a){q(K.resetGlobalOptionsOnRouteChange)});var X=function(e,t,a,r){this.bFieldRequired=!1,this.validators=[],this.typingLimit=J,this.scope=e,this.elm=t,this.ctrl=r,this.validatorAttrs=a,this.validateOnEmpty=!1,this.validRequireHowMany="all",e&&e.$validationOptions&&(K=e.$validationOptions),e&&(K.isolatedScope||K.scope)&&(this.scope=K.isolatedScope||K.scope,K=d(e.$validationOptions,K)),"undefined"==typeof K.resetGlobalOptionsOnRouteChange&&(K.resetGlobalOptionsOnRouteChange=!0),this.elm&&this.validatorAttrs&&this.ctrl&&this.scope&&($(this.elm,this.validatorAttrs,this.ctrl,this.scope),this.defineValidation())};return X.prototype.addToValidationSummary=n,X.prototype.arrayFindObject=w,X.prototype.defineValidation=i,X.prototype.getFormElementByName=o,X.prototype.getFormElements=s,X.prototype.getGlobalOptions=l,X.prototype.isFieldRequired=p,X.prototype.initialize=u,X.prototype.mergeObjects=d,X.prototype.parseBool=T,X.prototype.removeFromValidationSummary=c,X.prototype.removeFromFormElementObjectList=m,X.prototype.runValidationCallbackOnPromise=g,X.prototype.setDisplayOnlyLastErrorMsg=v,X.prototype.setGlobalOptions=y,X.prototype.updateErrorMsg=h,X.prototype.validate=b,window.Element&&!Element.prototype.closest&&(Element.prototype.closest=L),String.prototype.trim=M,String.prototype.format=U,String.format=P,X}]);
angular.module("ghiscoding.validation").factory("ValidationRules",[function(){function e(e){var a="undefined"!=typeof e.altText?e.altText.replace("alt=",""):null,t=e.hasOwnProperty("customRegEx")?e.customRegEx:null,s=e.hasOwnProperty("rule")?e.rule:null,n=e.hasOwnProperty("ruleParams")?e.ruleParams:null,d={};switch(s){case"accepted":d={pattern:/^(yes|on|1|true)$/i,message:"INVALID_ACCEPTED",type:"regex"};break;case"alpha":d={pattern:/^([a-zа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ])+$/i,message:"INVALID_ALPHA",type:"regex"};break;case"alphaSpaces":case"alpha_spaces":d={pattern:/^([a-zа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ\s])+$/i,message:"INVALID_ALPHA_SPACE",type:"regex"};break;case"alphaNum":case"alpha_num":d={pattern:/^([a-zа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9])+$/i,message:"INVALID_ALPHA_NUM",type:"regex"};break;case"alphaNumSpaces":case"alpha_num_spaces":d={pattern:/^([a-zа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9\s])+$/i,message:"INVALID_ALPHA_NUM_SPACE",type:"regex"};break;case"alphaDash":case"alpha_dash":d={pattern:/^([a-zа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9_-])+$/i,message:"INVALID_ALPHA_DASH",type:"regex"};break;case"alphaDashSpaces":case"alpha_dash_spaces":d={pattern:/^([a-zа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9\s_-])+$/i,message:"INVALID_ALPHA_DASH_SPACE",type:"regex"};break;case"between":case"range":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between:1,5";d={patternLength:"^(.|[\\r\\n]){"+r[0]+","+r[1]+"}$",messageLength:"INVALID_BETWEEN_CHAR",conditionNum:[">=","<="],messageNum:"INVALID_BETWEEN_NUM",params:[r[0],r[1]],type:"autoDetect"};break;case"betweenLen":case"between_len":case"stringLen":case"string_len":case"stringLength":case"string_length":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_len:1,5";d={pattern:"^(.|[\\r\\n]){"+r[0]+","+r[1]+"}$",message:"INVALID_BETWEEN_CHAR",params:[r[0],r[1]],type:"regex"};break;case"betweenNum":case"between_num":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_num:1,5";d={condition:[">=","<="],message:"INVALID_BETWEEN_NUM",params:[r[0],r[1]],type:"conditionalNumber"};break;case"boolean":d={pattern:/^(true|false|0|1)$/i,message:"INVALID_BOOLEAN",type:"regex"};break;case"checked":d={pattern:/^true$/i,message:"INVALID_CHECKBOX_SELECTED",type:"regex"};break;case"creditCard":case"credit_card":d={pattern:/^3(?:[47]\d([ -]?)\d{4}(?:\1\d{4}){2}|0[0-5]\d{11}|[68]\d{12})$|^4(?:\d\d\d)?([ -]?)\d{4}(?:\2\d{4}){2}$|^6011([ -]?)\d{4}(?:\3\d{4}){2}$|^5[1-5]\d\d([ -]?)\d{4}(?:\4\d{4}){2}$|^2014\d{11}$|^2149\d{11}$|^2131\d{11}$|^1800\d{11}$|^3\d{15}$/,message:"INVALID_CREDIT_CARD",type:"regex"};break;case"custom":case"javascript":d={message:"",params:[n],type:"javascript"};break;case"dateEuro":case"date_euro":d={pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_EURO",type:"regex"};break;case"dateEuroBetween":case"date_euro_between":case"betweenDateEuro":case"between_date_euro":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_date_euro:01-01-1990,31-12-2015";d={condition:[">=","<="],dateType:"EURO_LONG",params:[r[0],r[1]],pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_EURO_BETWEEN",type:"conditionalDate"};break;case"dateEuroMax":case"date_euro_max":case"maxDateEuro":case"max_date_euro":d={condition:"<=",dateType:"EURO_LONG",params:[n],pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_EURO_MAX",type:"conditionalDate"};break;case"dateEuroMin":case"date_euro_min":case"minDateEuro":case"min_date_euro":d={condition:">=",dateType:"EURO_LONG",params:[n],pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_EURO_MIN",type:"conditionalDate"};break;case"dateEuroLong":case"date_euro_long":d={pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{4})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_EURO_LONG",type:"regex"};break;case"dateEuroLongBetween":case"date_euro_long_between":case"betweenDateEuroLong":case"between_date_euro_long":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_date_euro_long:01-01-1990,31-12-2015";d={condition:[">=","<="],dateType:"EURO_LONG",params:[r[0],r[1]],pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{4})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_EURO_LONG_BETWEEN",type:"conditionalDate"};break;case"dateEuroLongMax":case"date_euro_long_max":case"maxDateEuroLong":case"max_date_euro_long":d={condition:"<=",dateType:"EURO_LONG",params:[n],pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{4})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_EURO_LONG_MAX",type:"conditionalDate"};break;case"dateEuroLongMin":case"date_euro_long_min":case"minDateEuroLong":case"min_date_euro_long":d={condition:">=",dateType:"EURO_LONG",params:[n],pattern:/^(?:(?:31(\/|-|\.)(?:0[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{4})$|^(?:29(\/|-|\.)02\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_EURO_LONG_MIN",type:"conditionalDate"};break;case"dateEuroShort":case"date_euro_short":d={pattern:/^(0[1-9]|[12][0-9]|3[01])[-\/\.](0[1-9]|1[012])[-\/\.]\d\d$/,message:"INVALID_DATE_EURO_SHORT",type:"regex"};break;case"dateEuroShortBetween":case"date_euro_short_between":case"betweenDateEuroShort":case"between_date_euro_short":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_date_euro_short:01-01-90,31-12-15";d={condition:[">=","<="],dateType:"EURO_SHORT",params:[r[0],r[1]],pattern:/^(0[1-9]|[12][0-9]|3[01])[-\/\.](0[1-9]|1[012])[-\/\.]\d\d$/,message:"INVALID_DATE_EURO_SHORT_BETWEEN",type:"conditionalDate"};break;case"dateEuroShortMax":case"date_euro_short_max":case"maxDateEuroShort":case"max_date_euro_short":d={condition:"<=",dateType:"EURO_SHORT",params:[n],pattern:/^(0[1-9]|[12][0-9]|3[01])[-\/\.](0[1-9]|1[012])[-\/\.]\d\d$/,message:"INVALID_DATE_EURO_SHORT_MAX",type:"conditionalDate"};break;case"dateEuroShortMin":case"date_euro_short_min":case"minDateEuroShort":case"min_date_euro_short":d={condition:">=",dateType:"EURO_SHORT",params:[n],pattern:/^(0[1-9]|[12][0-9]|3[01])[-\/\.](0[1-9]|1[012])[-\/\.]\d\d$/,message:"INVALID_DATE_EURO_SHORT_MIN",type:"conditionalDate"};break;case"dateIso":case"date_iso":d={pattern:/^(?=\d)(?:(?!(?:1582(?:\-)10(?:\-)(?:0?[5-9]|1[0-4]))|(?:1752(?:\-)0?9(?:\-)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\-)(?:29|30))))(\d{4})(\-)(0{1}\d|1[012])\2((?!00)[012]{1}\d|3[01])(?:$|(?=\d)))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2})|(?:[01]\d|2[0-3])(?::[0-5]\d){2})?$/,message:"INVALID_DATE_ISO",type:"regex"};break;case"dateIsoBetween":case"date_iso_between":case"betweenDateIso":case"between_date_iso":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_date_iso:1990-01-01,2000-12-31";d={condition:[">=","<="],dateType:"ISO",params:[r[0],r[1]],pattern:/^(?=\d)(?:(?!(?:1582(?:\-)10(?:\-)(?:0?[5-9]|1[0-4]))|(?:1752(?:\-)0?9(?:\-)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\-)(?:29|30))))(\d{4})(\-)(0{1}\d|1[012])\2((?!00)[012]{1}\d|3[01])(?:$|(?=\d)))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2})|(?:[01]\d|2[0-3])(?::[0-5]\d){2})?$/,message:"INVALID_DATE_ISO_BETWEEN",type:"conditionalDate"};break;case"dateIsoMax":case"date_iso_max":case"maxDateIso":case"max_date_iso":d={condition:"<=",dateType:"ISO",params:[n],pattern:/^(?=\d)(?:(?!(?:1582(?:\-)10(?:\-)(?:0?[5-9]|1[0-4]))|(?:1752(?:\-)0?9(?:\-)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\-)(?:29|30))))(\d{4})(\-)(0{1}\d|1[012])\2((?!00)[012]{1}\d|3[01])(?:$|(?=\d)))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2})|(?:[01]\d|2[0-3])(?::[0-5]\d){2})?$/,message:"INVALID_DATE_ISO_MAX",type:"conditionalDate"};break;case"dateIsoMin":case"date_iso_min":case"minDateIso":case"min_date_iso":d={condition:">=",dateType:"ISO",params:[n],pattern:/^(?=\d)(?:(?!(?:1582(?:\-)10(?:\-)(?:0?[5-9]|1[0-4]))|(?:1752(?:\-)0?9(?:\-)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\-)(?:29|30))))(\d{4})(\-)(0{1}\d|1[012])\2((?!00)[012]{1}\d|3[01])(?:$|(?=\d)))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2})|(?:[01]\d|2[0-3])(?::[0-5]\d){2})?$/,message:"INVALID_DATE_ISO_MIN",type:"conditionalDate"};break;case"dateUs":case"date_us":d={pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_US",type:"regex"};break;case"dateUsBetween":case"date_us_between":case"betweenDateUs":case"between_date_us":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_date_us:01/01/1990,12/31/2015";d={condition:[">=","<="],dateType:"US_LONG",params:[r[0],r[1]],pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_US_BETWEEN",type:"conditionalDate"};break;case"dateUsMax":case"date_us_max":case"maxDateUs":case"max_date_us":d={condition:"<=",dateType:"US_LONG",params:[n],pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_US_MAX",type:"conditionalDate"};break;case"dateUsMin":case"date_us_min":case"minDateUs":case"min_date_us":d={condition:">=",dateType:"US_LONG",params:[n],pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])?00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,message:"INVALID_DATE_US_MIN",type:"conditionalDate"};break;case"dateUsLong":case"date_us_long":d={pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_US_LONG",type:"regex"};break;case"dateUsLongBetween":case"date_us_long_between":case"betweenDateUsLong":case"between_date_us_long":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_date_us_long:01/01/1990,12/31/2015";d={condition:[">=","<="],dateType:"US_LONG",params:[r[0],r[1]],pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_US_LONG_BETWEEN",type:"conditionalDate"};break;case"dateUsLongMax":case"date_us_long_max":case"maxDateUsLong":case"max_date_us_long":d={condition:"<=",dateType:"US_LONG",params:[n],pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_US_LONG_MAX",type:"conditionalDate"};break;case"dateUsLongMin":case"date_us_long_min":case"minDateUsLong":case"min_date_us_long":d={condition:">=",dateType:"US_LONG",params:[n],pattern:/^(?:(?:(?:0[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:02(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0[1-9])|(?:1[0-2]))(\/|-|\.)(?:0[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{4})$/,message:"INVALID_DATE_US_LONG_MIN",type:"conditionalDate"};break;case"dateUsShort":case"date_us_short":d={pattern:/^(0[1-9]|1[012])[-\/\.](0[1-9]|[12][0-9]|3[01])[-\/\.]\d\d$/,message:"INVALID_DATE_US_SHORT",type:"regex"};break;case"dateUsShortBetween":case"date_us_short_between":case"betweenDateUsShort":case"between_date_us_short":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: between_date_us_short:01/01/90,12/31/15";d={condition:[">=","<="],dateType:"US_SHORT",params:[r[0],r[1]],pattern:/^(0[1-9]|1[012])[-\/\.](0[1-9]|[12][0-9]|3[01])[-\/\.]\d\d$/,message:"INVALID_DATE_US_SHORT_BETWEEN",type:"conditionalDate"};break;case"dateUsShortMax":case"date_us_short_max":case"maxDateUsShort":case"max_date_us_short":d={condition:"<=",dateType:"US_SHORT",params:[n],pattern:/^(0[1-9]|1[012])[-\/\.](0[1-9]|[12][0-9]|3[01])[-\/\.]\d\d$/,message:"INVALID_DATE_US_SHORT_MAX",type:"conditionalDate"};break;case"dateUsShortMin":case"date_us_short_min":case"minDateUsShort":case"min_date_us_short":d={condition:">=",dateType:"US_SHORT",params:[n],pattern:/^(0[1-9]|1[012])[-\/\.](0[1-9]|[12][0-9]|3[01])[-\/\.]\d\d$/,message:"INVALID_DATE_US_SHORT_MIN",type:"conditionalDate"};break;case"different":case"differentInput":case"different_input":var e=n.split(",");d={condition:"!=",message:"INVALID_INPUT_DIFFERENT",params:e,type:"matching"};break;case"digits":d={pattern:"^\\d{"+n+"}$",message:"INVALID_DIGITS",params:[n],type:"regex"};break;case"digitsBetween":case"digits_between":var r=n.split(",");if(2!==r.length)throw"This validation must include exactly 2 params separated by a comma (,) ex.: digits_between:1,5";d={pattern:"^\\d{"+r[0]+","+r[1]+"}$",message:"INVALID_DIGITS_BETWEEN",params:[r[0],r[1]],type:"regex"};break;case"email":case"emailAddress":case"email_address":d={pattern:/^[-\wа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9#~!$%^&*_=+\/`\|}{\'?]+(\.[-\wа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9#~!$%^&*_=+\/`\|}{\'?]+)*@([\wа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9_][-\wа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9_]*(\.[-\wа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ0-9_]+)*([\wа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ]+)|(\.[\wа-яàáâãäåąæçćèéêëęœìíïîłńðòóôõöøśùúûñüýÿżźßÞďđ]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i,message:"INVALID_EMAIL",type:"regex"};break;case"exactLen":case"exact_len":d={pattern:"^(.|[\\r\\n]){"+n+"}$",message:"INVALID_EXACT_LEN",params:[n],type:"regex"};break;case"float":d={pattern:/^\d*\.{1}\d+$/,message:"INVALID_FLOAT",type:"regex"};break;case"floatSigned":case"float_signed":d={pattern:/^[-+]?\d*\.{1}\d+$/,message:"INVALID_FLOAT_SIGNED",type:"regex"};break;case"iban":d={pattern:/^[a-zA-Z]{2}\d{2}\s?([0-9a-zA-Z]{4}\s?){4}[0-9a-zA-Z]{2}$/i,message:"INVALID_IBAN",type:"regex"};break;case"enum":case"in":case"inList":case"in_list":var _=RegExp().escape(n).replace(/,/g,"|");d={pattern:"^("+_+")$",patternFlag:"i",message:"INVALID_IN_LIST",params:[n],type:"regex"};break;case"int":case"integer":d={pattern:/^\d+$/,message:"INVALID_INTEGER",type:"regex"};break;case"intSigned":case"integerSigned":case"int_signed":case"integer_signed":d={pattern:/^[+-]?\d+$/,message:"INVALID_INTEGER_SIGNED",type:"regex"};break;case"ip":case"ipv4":d={pattern:/^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$/,message:"INVALID_IPV4",type:"regex"};break;case"ipv6":d={pattern:/^(::|(([a-fA-F0-9]{1,4}):){7}(([a-fA-F0-9]{1,4}))|(:(:([a-fA-F0-9]{1,4})){1,6})|((([a-fA-F0-9]{1,4}):){1,6}:)|((([a-fA-F0-9]{1,4}):)(:([a-fA-F0-9]{1,4})){1,6})|((([a-fA-F0-9]{1,4}):){2}(:([a-fA-F0-9]{1,4})){1,5})|((([a-fA-F0-9]{1,4}):){3}(:([a-fA-F0-9]{1,4})){1,4})|((([a-fA-F0-9]{1,4}):){4}(:([a-fA-F0-9]{1,4})){1,3})|((([a-fA-F0-9]{1,4}):){5}(:([a-fA-F0-9]{1,4})){1,2}))$/i,message:"INVALID_IPV6",type:"regex"};break;case"compare":case"match":case"matchInput":case"match_input":case"same":var e=n.split(",");d={condition:"===",message:"INVALID_INPUT_MATCH",params:e,type:"matching"};break;case"max":d={patternLength:"^(.|[\\r\\n]){0,"+n+"}$",messageLength:"INVALID_MAX_CHAR",conditionNum:"<=",messageNum:"INVALID_MAX_NUM",params:[n],type:"autoDetect"};break;case"maxLen":case"max_len":case"maxLength":case"max_length":d={pattern:"^(.|[\\r\\n]){0,"+n+"}$",message:"INVALID_MAX_CHAR",params:[n],type:"regex"};break;case"maxNum":case"max_num":d={condition:"<=",message:"INVALID_MAX_NUM",params:[n],type:"conditionalNumber"};break;case"min":d={patternLength:"^(.|[\\r\\n]){"+n+",}$",messageLength:"INVALID_MIN_CHAR",conditionNum:">=",messageNum:"INVALID_MIN_NUM",params:[n],type:"autoDetect"};break;case"minLen":case"min_len":case"minLength":case"min_length":d={pattern:"^(.|[\\r\\n]){"+n+",}$",message:"INVALID_MIN_CHAR",params:[n],type:"regex"};break;case"minNum":case"min_num":d={condition:">=",message:"INVALID_MIN_NUM",params:[n],type:"conditionalNumber"};break;case"notIn":case"not_in":case"notInList":case"not_in_list":var _=RegExp().escape(n).replace(/,/g,"|");d={pattern:"^((?!("+_+")).)+$",patternFlag:"i",message:"INVALID_NOT_IN_LIST",params:[n],type:"regex"};break;case"numeric":d={pattern:/^\d*\.?\d+$/,message:"INVALID_NUMERIC",type:"regex"};break;case"numericSigned":case"numeric_signed":d={pattern:/^[-+]?\d*\.?\d+$/,message:"INVALID_NUMERIC_SIGNED",type:"regex"};break;case"phone":d={pattern:/^([0-9]( |[-.])?)?((\(\d{3}\) ?)|(\d{3}[-.]))?\d{3}[-.]\d{4}$/,message:"INVALID_PHONE_US",type:"regex"};break;case"phoneInternational":case"phone_international":d={pattern:/^\+(?:[0-9]\x20?){6,14}[0-9]$/,message:"INVALID_PHONE_INTERNATIONAL",type:"regex"};break;case"pattern":case"regex":d={pattern:t.pattern,message:"INVALID_PATTERN",params:[t.message],type:"regex"};break;case"remote":d={message:"",params:[n],type:"remote"};break;case"required":d={pattern:/\S+/,message:"INVALID_REQUIRED",type:"regex"};break;case"size":d={patternLength:"^(.|[\\r\\n]){"+n+"}$",messageLength:"INVALID_EXACT_LEN",conditionNum:"==",messageNum:"INVALID_EXACT_NUM",params:[n],type:"autoDetect"};break;case"url":d={pattern:/^(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?/i,message:"INVALID_URL",type:"regex"};break;case"time":d={pattern:/^([01]?[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/,message:"INVALID_TIME",type:"regex"}}return d.altText=a,d}var a={getElementValidators:e};return a}]),RegExp.prototype.escape=function(e){if(!arguments.callee.sRE){var a=["/",".","*","+","?","|","(",")","[","]","{","}","\\"];arguments.callee.sRE=new RegExp("(\\"+a.join("|\\")+")","g")}return e.replace(arguments.callee.sRE,"\\$1")};
angular.module("ghiscoding.validation").service("ValidationService",["$interpolate","$q","$timeout","ValidationCommon",function(e,o,t,a){function n(o,t,a){var n=this,i={};if("string"==typeof o&&"string"==typeof t?(i.elmName=o,i.rules=t,i.friendlyName="string"==typeof a?a:""):i=o,"object"!=typeof i||!i.hasOwnProperty("elmName")||!i.hasOwnProperty("rules")||!i.hasOwnProperty("scope")&&"undefined"==typeof n.validationAttrs.scope)throw"Angular-Validation-Service requires at least the following 3 attributes: {elmName, rules, scope}";var l=i.scope?i.scope:n.validationAttrs.scope;if(i.elm=angular.element(document.querySelector('[name="'+i.elmName+'"]')),"object"!=typeof i.elm||0===i.elm.length)return n;if(new RegExp("{{(.*?)}}").test(i.elmName)&&(i.elmName=e(i.elmName)(l)),i.name=i.elmName,n.validationAttrs.isolatedScope){var m=l.$validationOptions||null;l=n.validationAttrs.isolatedScope,m&&(l.$validationOptions=m)}return $=n.validationAttrs.hasOwnProperty("validationCallback")?n.validationAttrs.validationCallback:null,g=n.validationAttrs.hasOwnProperty("validateOnEmpty")?commonObj.parseBool(n.validationAttrs.validateOnEmpty):!!V.validateOnEmpty,i.elm.bind("blur",j=function(e){var o=n.commonObj.getFormElementByName(i.elmName);if(o&&!o.isValidationCancelled){n.commonObj.initialize(l,i.elm,i,i.ctrl);var t=s(n,e.target.value,0);$&&n.commonObj.runValidationCallbackOnPromise(t,$)}}),i=n.commonObj.mergeObjects(n.validationAttrs,i),O(n,l,i),i.elm.on("$destroy",function(){var e=n.commonObj.getFormElementByName(n.commonObj.ctrl.$name);e&&(u(n,e),n.commonObj.removeFromValidationSummary(i.name))}),h.push({elmName:i.elmName,watcherHandler:f(l,i,n)}),n}function i(e){var o=this,t="",a=!0;if("undefined"==typeof e||"undefined"==typeof e.$validationSummary)throw"checkFormValidity() requires a valid Angular Form or $scope/vm object passed as argument to work properly, for example:: fn($scope) OR fn($scope.form1) OR fn(vm) OR fn(vm.form1)";for(var n=0,i=e.$validationSummary.length;n<i;n++)if(a=!1,t=e.$validationSummary[n].field){var l=o.commonObj.getFormElementByName(t);l&&l.elm&&l.elm.length>0&&("function"==typeof l.ctrl.$setTouched&&l.ctrl.$setTouched(),o.commonObj.updateErrorMsg(e.$validationSummary[n].message,{isSubmitted:!0,isValid:l.isValid,obj:l}))}return a}function l(e){var o=this;if("undefined"==typeof e||"undefined"==typeof e.$validationSummary)throw"clearInvalidValidatorsInSummary() requires a valid Angular Form or $scope/vm object passed as argument to work properly, for example:: fn($scope) OR fn($scope.form1) OR fn(vm) OR fn(vm.form1)";for(var t=[],a=0,n=e.$validationSummary.length;a<n;a++)t.push(e.$validationSummary[a].field);for(a=0,n=t.length;a<n;a++)t[a]&&(o.commonObj.removeFromFormElementObjectList(t[a]),o.commonObj.removeFromValidationSummary(t[a],e.$validationSummary))}function m(e,o){var t,a=this;if("undefined"==typeof e||"undefined"==typeof e.$validationSummary)throw"removeValidator() only works with Validation that were defined by the Service (not by the Directive) and requires a valid Angular Form or $scope/vm object passed as argument to work properly, for example:: fn($scope) OR fn($scope.form1) OR fn(vm) OR fn(vm.form1)";if(o instanceof Array)for(var n=0,i=o.length;n<i;n++)t=a.commonObj.getFormElementByName(o[n]),t.elm.removeAttr("validation"),b(a,t,e.$validationSummary);else o instanceof Object&&o.formElmObj?(t=o.formElmObj,t.elm.removeAttr("validation"),b(o.self,t,e.$validationSummary)):(t=a.commonObj.getFormElementByName(o),t.elm.removeAttr("validation"),b(a,t,e.$validationSummary));return a}function r(e,o){var t,a=this,o=o||{},n="undefined"!=typeof o.removeAllValidators&&o.removeAllValidators,i="undefined"!=typeof o.emptyAllInputValues&&o.emptyAllInputValues;if("undefined"==typeof e||"undefined"==typeof e.$name)throw"resetForm() requires a valid Angular Form object passed as argument to work properly (ex.: $scope.form1).";var l=a.commonObj.getFormElements(e.$name);if(l instanceof Array)for(var r=0,d=l.length;r<d;r++)t=l[r],i&&t.elm.val(null),n?m(e,{self:a,formElmObj:t}):("function"==typeof t.ctrl.$setUntouched&&t.ctrl.$setUntouched(),t.ctrl.$setPristine(),a.commonObj.updateErrorMsg("",{isValid:!1,obj:t}))}function d(e){var o=this,t="boolean"!=typeof e||e;o.commonObj.setDisplayOnlyLastErrorMsg(t)}function c(e){var o=this;return o.validationAttrs=e,o.commonObj.setGlobalOptions(e),o}function s(e,a,n){var i=o.defer(),l=!1,m="undefined"!=typeof n?n:e.commonObj.typingLimit,r=e.commonObj.getFormElementByName(e.commonObj.ctrl.$name);return a&&a.badInput?v(e,attrs.name):(e.commonObj.validate(a,!1),e.commonObj.isFieldRequired()||g||""!==a&&null!==a&&"undefined"!=typeof a?(r.isValidationCancelled=!1,(a||e.commonObj.isFieldRequired()||g)&&e.commonObj.ctrl.$setValidity("validation",!1),""!==a&&"undefined"!=typeof a||"NUMBER"!==e.commonObj.elm.prop("type").toUpperCase()?"SELECT"===e.commonObj.elm.prop("tagName").toUpperCase()?(l=e.commonObj.validate(a,!0),e.commonObj.ctrl.$setValidity("validation",l),i.resolve({isFieldValid:l,formElmObj:r,value:a}),i.promise):("undefined"!=typeof a&&(0===n?(l=e.commonObj.validate(a,!0),e.commonObj.scope.$evalAsync(e.commonObj.ctrl.$setValidity("validation",l)),i.resolve({isFieldValid:l,formElmObj:r,value:a}),t.cancel(e.timer)):(e.commonObj.updateErrorMsg(""),t.cancel(e.timer),e.timer=t(function(){l=e.commonObj.validate(a,!0),e.commonObj.scope.$evalAsync(e.commonObj.ctrl.$setValidity("validation",l)),i.resolve({isFieldValid:l,formElmObj:r,value:a})},m))),i.promise):(t.cancel(e.timer),l=e.commonObj.validate(a,!0),i.resolve({isFieldValid:l,formElmObj:r,value:a}),i.promise)):(u(e,r),i.resolve({isFieldValid:!0,formElmObj:r,value:a}),i.promise))}function u(e,o){var a=o&&o.ctrl?o.ctrl:e.commonObj.ctrl;o&&(o.isValidationCancelled=!0),t.cancel(self.timer),a.$setValidity("validation",!0),e.commonObj.updateErrorMsg("",{isValid:!0,obj:o}),y(e,o)}function f(e,o,a){return e.$watch(function(){return o.ctrl=angular.element(o.elm).controller("ngModel"),p(a,o.elmName)?{badInput:!0}:o.ctrl.$modelValue},function(n,i){if(n&&n.badInput){var l=a.commonObj.getFormElementByName(o.elmName);return y(a,l),v(a,o.name)}if(void 0===n&&void 0!==i&&!isNaN(i))return t.cancel(a.timer),void a.commonObj.ctrl.$setValidity("validation",a.commonObj.validate("",!0));o.ctrl=angular.element(o.elm).controller("ngModel"),o.value=n,a.commonObj.initialize(e,o.elm,o,o.ctrl);var m="undefined"==typeof n||"number"==typeof n&&isNaN(n)?0:void 0,r=s(a,n,m);$&&a.commonObj.runValidationCallbackOnPromise(r,$)},!0)}function v(e,o){t.cancel(e.timer);var a=e.commonObj.getFormElementByName(o);e.commonObj.updateErrorMsg("INVALID_KEY_CHAR",{isValid:!1,translate:!0,obj:a}),e.commonObj.addToValidationSummary(a,"INVALID_KEY_CHAR",!0)}function p(e,o){var t=e.commonObj.getFormElementByName(o);return!!t&&!!t.elm.prop("validity")&&t.elm.prop("validity").badInput===!0}function b(e,o,t){var a=e.commonObj.scope?e.commonObj.scope:o.scope?o.scope:null;if("undefined"==typeof a)throw"removeValidator() requires a valid $scope object passed but unfortunately could not find it.";var n=e.commonObj.arrayFindObject(h,"elmName",o.fieldName);n&&(n.watcherHandler(),h.shift()),o.isValidationCancelled=!0,o.isValid=!0,o.attrs.validation="",u(e,o),"function"==typeof o.ctrl.$setUntouched&&o.ctrl.$setUntouched(),e.commonObj.scope=a,o.ctrl.$setPristine(),e.commonObj.removeFromValidationSummary(o.fieldName,t)}function y(e,o){if(o.isValidationCancelled=!0,"function"==typeof j){var t=o&&o.elm?o.elm:e.commonObj.elm;t.unbind("blur",j)}}function O(e,o,a){o.$watch(function(){return"undefined"==typeof a.elm.attr("ng-disabled")?null:o.$eval(a.elm.attr("ng-disabled"))},function(n){if("undefined"==typeof n||null===n)return null;a.ctrl=angular.element(a.elm).controller("ngModel"),e.commonObj.initialize(o,a.elm,a,a.ctrl);var i=e.commonObj.getFormElementByName(a.name);t(function(){if(n)a.ctrl.$setValidity("validation",!0),e.commonObj.updateErrorMsg("",{isValid:!0,obj:i}),e.commonObj.removeFromValidationSummary(a.name);else{var t=a.ctrl.$viewValue||"";e.commonObj.initialize(o,a.elm,a,a.ctrl),a.ctrl.$setValidity("validation",e.commonObj.validate(t,!1)),i&&(i.isValidationCancelled=!1),a.elm.bind("blur",j=function(o){if(i&&!i.isValidationCancelled){var t=s(e,o.target.value,10);$&&e.commonObj.runValidationCallbackOnPromise(t,$)}})}},0,!1),n&&("function"==typeof a.ctrl.$setUntouched&&a.ctrl.$setUntouched(),a.ctrl.$setValidity("validation",!0),e.commonObj.removeFromValidationSummary(a.name))})}var j,g,$,V,h=[],E=function(e){this.isValidationCancelled=!1,this.timer=null,this.validationAttrs={},this.commonObj=new a,e&&this.setGlobalOptions(e),V=this.commonObj.getGlobalOptions()};return E.prototype.addValidator=n,E.prototype.checkFormValidity=i,E.prototype.removeValidator=m,E.prototype.resetForm=r,E.prototype.setDisplayOnlyLastErrorMsg=d,E.prototype.setGlobalOptions=c,E.prototype.clearInvalidValidatorsInSummary=l,E}]);
function bootstrapServiceBindings(app) {

    app.run([
        '$rootScope', function($rootScope) {
            

        }
    ]);


    var requires = app.requires;
    var appName = app.name;

    //console.debug(requires);

    switch (app.name) {
       
        case "PWPApp":
        case "MWPApp":
        case "CAPApp":
            bindDataService(app);
            bindValidation(app);
            bindErrorHandler(app);
            bindApi(app);
            break;

        case "MAPApp":
            bindDataService(app);
            //bindValidation(app);
            bindErrorHandler(app);
            bindApi(app);
            break;

            default:
    }
}

function bindDataService(app) {
    // Bind DataService to app
    app.service("DataService", ['$window', '$log', function ($window, $log) {
        this.get = function (key) {
            if (key in $window._data) {
                return $window._data[key];
            }

            $log.error("Key '" + key + "' not found in DataService. Valid keys: " + Object.keys($window._data).join(', '));
        };

        this.rules = function() {
            if ('_rules' in $window) {
                return $window._rules;
            }

            $log.error("Rules object undefined");
        }

        var vm = this;
        _.each($window._data,
            function (obj, key) {
                if (key === 'get') {

                }

                vm[key] = obj;
            });

    }]);
}

function bindValidation(app) {
    // Validation - Language Files
    app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.useStaticFilesLoader({
            prefix: '/Scripts/angular-validation/locales/',
            suffix: '.json'
        });

        // define translation maps you want to use on startup
        $translateProvider.preferredLanguage('en');
    }]);
}

function bindErrorHandler(app) {
    app.factory('ErrorHandler',
        function() {
            var messages = [];

            var callbacks = [];

            var alertBanner = false;
            // Default        
            callbacks.push(function(error) {

            });

            return {
                alertBanner: function() {
                    return alertBanner;
                },
                isError: function(index) {
                    if (index in messages) {
                        return true;
                    }
                    return false;
                },
                getAsString: function(index) {
                    if (index in messages) {
                        return messages[index].join(", ");
                    }
                    return null;
                },
                getAsArray: function() {
                    var result = [];
                    
                    _.each(messages, function(obj) {
                        result.push(obj[0]);
                    });

                    return result;
                },
                clear: function() {
                    messages = [];
                    alertBanner = false;
                },
                set: function(errors) {
                    alertBanner = false;

                    if (_.isObject(errors.errors) && 'errors' in errors) {
                        alertBanner = "Please correct all errors and try again.";
                        messages = errors.errors;
                    } else {
                        alertBanner = errors.errors;
                        messages = errors;
                    }
                },
                add: function(message) {
                    this.callbacks.forEach(function(callback) {
                        callback(message);
                    });
                },
                registerCallback: function(callback) {
                    callbacks.push(callback);
                },
                all: function() {
                    return messages;
                }
            }
        });

}

function bindApi(app) {
    app.factory('API',
    [
        '$http', '$q', 'ErrorHandler', function($http, $q, ErrorHandler) {

            var pathArray = location.href.split('/');
            var protocol = pathArray[0];
            var host = pathArray[2];
            var url = protocol + '//' + host;

            var basePath = url;

            function makeRequest(verb, uri, data) {
                var defer = $q.defer();
                verb = verb.toLowerCase();

                //start with the uri
                var httpArgs = [basePath + uri];
                if (verb.match(/post|put/)) {
                    httpArgs.push(data);
                }

                ErrorHandler.clear();

                $http[verb].apply(null, httpArgs)
                    .success(function(data, status) {
                        // Start f5 work around hacks
                        if (data.statusCode >= 400) { // error
                            ErrorHandler.set(data);

                            if (typeof data.errors === "string") {
                                //$scope.ExceptionDialogControl.showDialog(data.errors);
                            }

                            if (data.statusCode == 401) {
                                bootbox.alert(data.errors);
                            }
                            defer.reject(data);
                        } else {
                            defer.resolve(data);
                        }

                        // end f5 work around hacks

                        //uncomment to reverse the f5 hack
                        //defer.resolve(data);
                    }).error(function(data, status) {
                        if (status === 500) {
                            console.log("server error");
                            // broadcast server error status, make evasive maneuvers
                            return;
                        }
                        ErrorHandler.set(data);

                        if (typeof data.errors === "string") {
                            //$scope.ExceptionDialogControl.showDialog(data.errors);
                        }

                        defer.reject(data);
                    });

                return defer.promise;
            }

            return {
                get: function(uri) {
                    return makeRequest('get', uri);
                },
                post: function(uri, data) {
                    return makeRequest('post', uri, data);
                },
                put: function(uri, data) {
                    return makeRequest('put', uri, data);
                },
                delete: function(uri) {
                    return makeRequest('delete', uri);
                }
            };

        }
    ]);
}
var app = angular.module('MWPApp', ['ngCookies', 'ui.bootstrap', 'ngFileUpload', 'ngSanitize', 'ghiscoding.validation', 'pascalprecht.translate']);

bootstrapServiceBindings(app);

//Turn off debug mode to speed up production
app.config(['$compileProvider', function ($compileProvider) {
    $compileProvider.debugInfoEnabled(false);
}]);

app.run(function ($rootScope, $location) {
    $("#mainContainer").show();
    $("#allContainer").show();
});


/* Add a broadcast service to exchange messages between ng controllers. 
    See ProviderSearchCtrl.js and AddMemberCtrl.js for usage
*/
app.factory('wbxProviderSearch', function ($rootScope) {

    var sharedService = {};

    sharedService.message = null;
    sharedService.prepForBroadcast = function (msg) {
        this.message = msg;
        this.broadcastItem();
    };

    sharedService.broadcastItem = function () {
        $rootScope.$broadcast('handleBroadcast');
    };

    return sharedService;
});

//This is only used in PWP. But because MWP is using the same Entity Management and this service is needed there, 
// we have to inject it here too.
app.service('WBXVerificationCountService', function () {
    var verificationCount = 0;
    return {
        setVerificationCount: function (newCount) {
            verificationCount = newCount;
        },
        getVerificationCount: function () {
            return verificationCount;
        },
        increaseVerificationCount: function () {
            verificationCount++;
            return verificationCount;
        },
        decreaseVerificationCount: function () {
            verificationCount--;
            return verificationCount;
        }
    }
});

if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, '');
    }
}



app.controller('AddMemberCtrl', AddMemberCtrl);

function AddMemberCtrl($scope, $http, wbxProviderSearch,$window,$location) {
    $scope.values = {};

    // toggle for displays
    $scope.values.QualifyingEvent = null;
    $scope.values.BenefitPlan = null;
    $scope.values.PremiumDivision = null;
    $scope.values.PremiumUnit = null;
    $scope.values.PremiumDepartment = null;
    $scope.values.UseEmployeeAddress = true;
    $scope.values.PCPProviderId = null;
    $scope.values.PCPLocationId = null;

    $scope.showAddress = false;
    $scope.HasCOB = false;
    $scope.showReview = false;
    $scope.showReviewBtns = true;
    $scope.showPCP = false;
    $scope.showMain = true;
    $scope.showHireDate = true;
    $scope.PCPRequired = false;

    $scope.PremiumUnits = [];
    $scope.PremiumDepartments = [];

    $scope.CanAddDependent = true;


    /* receive broadcast message of PCP selection from ProviderSearchCtrl.js */
    $scope.$on('handleBroadcast', function () {
        //bootbox.alert(wbxProviderSearch.message.Message);

        //var msg = {
        //    Message: "PCP Selected by User",
        //    ChangeType: "PCPSelected",
        //    ProviderID: providerID,
        //    LocationID: locationID,
        //    LastName: lastname,
        //    FirstName: firstname
        //}

        if (wbxProviderSearch.message.MessageType == "PCPSelection") {
            $scope.values.PCPProviderId = wbxProviderSearch.message.ProviderID;
            $scope.values.LocationId = wbxProviderSearch.message.LocationID;

            $scope.dependent.PrimaryCareProviderId = wbxProviderSearch.message.ProviderID;
            $scope.dependent.PrimaryCareLocationId = wbxProviderSearch.message.LocationID;

            $scope.dependent.PCP = wbxProviderSearch.message.LastName + ', ' + wbxProviderSearch.message.FirstName;
            $scope.dependent.PrimaryCareProvider = wbxProviderSearch.message.LastName + ', ' + wbxProviderSearch.message.FirstName;
            $scope.showPCP = !$scope.showPCP;
            $scope.showMain = !$scope.showMain;
        }
    })



    $scope.review = function () {

        var Today = new Date();
        var DOB = new Date($scope.dependent.DOB);
        var EventDate = new Date($scope.dependent.EventDate);


        if (DOB > Today) {
            bootbox.alert("Please enter a valid date of birth.");
            return;
        }


        if (EventDate > Today) {
            bootbox.alert("Please enter a valid event date.");
            return;
        }

        if ($scope.values.QualifyingEvent == "Birth" && $scope.dependent.EventDate != $scope.dependent.DOB) {
            bootbox.alert("When event is birth, date of birth must match event date.");
            return;
        }

        if ($scope.dependent.UseEmployeeAddress != "TRUE" && $scope.dependent.State == null) {
            bootbox.alert("Address is incomplete. Please select a state.");
            return;
        }
    

        //if ($scope.values.QualifyingEvent == "") {
        //    bootbox.alert("Please select a qualifying event.");
        //    return;
        //}


        //if ($scope.dependent.UseEmployeeAddress == null) {
        //    bootbox.alert("Please select whether to use employee address.");
        //    return;
        //}


        var valid = $('#registration-body').validationEngine('validate');


        if (!valid) {
            //bootbox.alert('Please enter required fields.');
            return;
        }


        $scope.showReview = true;
    }

    $scope.selectPCP = function () {

        $scope.showPCP = !$scope.showPCP;
        $scope.showMain = !$scope.showMain;

    }

    $scope.CancelPCPEdit = function () {
        $scope.showPCP = false;
        $scope.showMain = true;
    }



    $scope.cancelReview = function () {
        $scope.showReview = false;
    }

    $scope.cancelForm = function () {
        bootbox.confirm("Are you sure?", function (data) {
            if (data) {
                window.location = "/";
            }
        });
    }

    $scope.resetForm = function () {
        bootbox.confirm("Are you sure?", function (data) {
            if (data) {
                window.location.reload();
            }
        });
    }


    $scope.AddDependent = function () {

        // avoid multiple adds
        if ($scope.CanAddDependent) {
            $scope.CanAddDependent = false;

            var payload = $scope.dependent;

            $http({
                method: 'POST',
                url: '/MWP/AddMember',
                data: payload
            })
                .success(function (data) {
                    if (data.error == false) {
                        $scope.showReviewBtns = false;
                        $window.location.href = "/MWP/EnrollmentSummary?EnrolleeId=" + data.EnrolleeId + "&GroupId=" + data.GroupId + "&PlanId=" + data.PlanId;
                    }
                    else {
                        // error is true
                        $scope.CanAddDependent = true;
                        bootbox.alert(data);
                    }

                    // if added a new subscriber, redirect to enrollment summary, otherwise display message.
                    //if (data.EnrolleeId > 0)
                    //    $window.location.href = "/MWP/EnrollmentSummary?EnrolleeId=" + data.EnrolleeId + "&GroupId=" + data.GroupId + "&PlanId=" + data.PlanId;
                    //else
                    //    bootbox.alert(data.message);

                })
            .error(function (data) {
                bootbox.alert(data);
                console.log(data);
                $scope.CanAddDependent = true;
            });
        }
        else {
            //alert("Add request already received.");
            console.log("duplicate add disabled.");
        }
    }


    $scope.updatePremiumUnit = function () {
        $http({
            method: 'POST',
            url: '/MWP/AddMember/GetPremiumUnitList',
            params: { PremiumDivisionId: $scope.dependent.BenefitPlanId }
        })
            .success(function (data) {
                if (data.error == false)
                    $scope.showReviewBtns = false;

                bootbox.alert(data.message);
            })
        .error(function (data) {
            bootbox.alert(data);
        });
    }

    $scope.$watch('dependent.QualifyingEvent', function (value, $event) {
        $scope.values.QualifyingEvent = $('#QualifyingEvent option:selected').text();

        if ($scope.values.QualifyingEvent == "New Hire")
            $scope.dependent.HireDate = $scope.dependent.EventDate;

        $scope.showHireDate = $scope.values.QualifyingEvent != "New Hire";
    });

    $scope.$watch('dependent.BenefitPlanId', function (value, $event) {
        $scope.values.BenefitPlan = $('#BenefitPlanId option:selected').text();
        var payload = $scope.dependent;

        if (!$scope.dependent.BenefitPlanId > 0)
            return;

        // post to get whether pcp is required, if not then hide.
        $http({
            method: 'GET',
            url: '/MWP/AddMember/GetProductPCPRequirements',
            params: { BenefitPlanId: $scope.dependent.BenefitPlanId }
        })
            .success(function (data) {
                if (data.error == false) {
                    $scope.PCPRequired = data.PCP_FLAG;
                }

            })
        .error(function (data) {
            //bootbox.alert(data);

        });

    });


    $scope.$watch('dependent.Gender', function (value) {
        $scope.values.Gender = $('#Gender option:selected').text();
    });

    $scope.$watch('dependent.MaritalStatus', function (value) {
        $scope.values.MaritalStatus = $('#MaritalStatus option:selected').text();
    });

    $scope.$watch('dependent.Relationship', function (value) {
        $scope.values.Relationship = $('#Relationship option:selected').text();
    });

    $scope.$watch('dependent.PremiumDivision', function (value, $event) {
        $scope.values.PremiumDivision = $('#PremiumDivision option:selected').text();

        $scope.PremiumUnits = null;
        $scope.PremiumDepartments = null;
        $scope.dependent.PremiumUnit = "";
        $scope.dependent.PremiumDepartment = "";

        /* Populate Premium Units based on division selection */
        $http({
            method: 'GET',
            url: '/MWP/AddMember/GetPremiumUnits',
            params: { premiumDivisionId: $scope.dependent.PremiumDivision }
        }).success(function (result) {
            $scope.PremiumUnits = result;
        });

    });

    $scope.$watch('dependent.PremiumUnit', function (value, $event) {
        $scope.values.PremiumUnit = $('#PremiumUnit option:selected').text();

        $scope.PremiumDepartments = null;
        $scope.dependent.PremiumDepartment = "";

        /* Populate Premium Departments based on unit selection */
        $http({
            method: 'GET',
            url: '/MWP/AddMember/GetPremiumDepartments',
            params: { premiumUnitId: $scope.dependent.PremiumUnit }
        }).success(function (result) {
            $scope.PremiumDepartments = result;
        });

    });

    $scope.$watch('dependent.PremiumDepartment', function (value, $event) {
        $scope.values.PremiumDepartment = $('#PremiumDepartment option:selected').text();
    });

    $scope.ShowSpecialNeeds = function () {
        if ($scope.dependent.SpecialNeeds)
            return "Yes";

        return "No";
    }

}


app.controller('AlertCtrl', AlertCtrl);

function AlertCtrl($scope, $rootScope) {
    $scope.alerts = [];

    $scope.addAlert = function (msg, type, timeout) {
        $scope.alerts.push({
            msg: msg,
            type: type
        });
    };

    $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
    };

    $rootScope.$watch

}
app.controller('BenefitSummaryCtrl', BenefitSummaryCtrl);

function BenefitSummaryCtrl($scope, $http, $location) {

    $scope.showReport = false;

    $scope.setModel = function (model) {
        $scope.filter.enrolleeId = model.EnrolleId;
        $scope.filter.productId = model.ProductId;
    }

    $scope.filter = {
        enrolleeId: 0,
        productId: -1,
        premiumGroupId: -1,
        benefitLvl: 1,
        locationId: -1,
        providerId: -1
    };


    $scope.hasEnrollee = function () {

        if ($scope.filter.enrolleeId > 0)
            return true;
        else
            return false;
    };


    $scope.generateURL = function () {
        var URL = '/Areas/MWP/Reports/BenefitSummary.aspx';
        var param = {
            enrolleeId: $scope.filter.enrolleeId,
            productId: $scope.filter.productId,
            premiumGroupId: $scope.filter.premiumGroupId,
            benefitLvl: $scope.filter.benefitLvl,
            locationId: $scope.filter.locationId,
            providerId: $scope.filter.providerId

        };

        var result = URL + "?" + jQuery.param(param);

        var g_SummaryWnd = window.open(result, "BenefitSummary", "resizable,scrollbars,width=1000,height=500", true);

    }

}



app.controller('CobEditCtrl', ['$scope', 'DataService', 'API', 'ValidationService', '$timeout', 'ErrorHandler', '$window', function ($scope, DataService, API, ValidationService, $timeout, ErrorHandler, $window) {
    $scope.rules = DataService.rules();
    $scope.genderList = DataService.genderList;
    $scope.relationshipCodeList = DataService.relationshipCodeList;
    $scope.policyList = DataService.policyList;
    $scope.members = DataService.members;
    $scope.edit = DataService.edit;
    
    
    if (DataService.edit) {
        $scope.cob = DataService.otherInsurance;
    } else {
        $scope.cob = {
            COBResponsibility: "P",
            COBEnrolleeId: DataService.otherInsurance.COBEnrolleeId
        };

        
    }
    
    $scope.errorHandler = ErrorHandler;

    $scope.cancel = function () {
        $window.location.href = '/MWP/UpdateCOB/';
    }


    $scope.$validationOptions = { hideErrorUnderInputs: true };
    // @todo move to root scope.
    $scope.tooltips = {};

    $scope.validate = function () {
        $timeout(function () {
            $scope.tooltips = {};
            _.each($scope.other_insurance.$validationSummary, function (obj, idx) {
                $scope.tooltips[obj.field] = obj.message.split('.')[0]; //obj.message;
            });
        });
    }

    $scope.errorHandler = ErrorHandler;

    ErrorHandler.clear();

    $scope.save = function () {
        var payload = angular.copy($scope.cob);

        var CoveredMembers = [];
        _.each($scope.members, function (obj) {
            if (obj.covered) {
                CoveredMembers.push(obj.ENROLLEE_ID);
            }
        });
        
        payload.CoveredMembers = CoveredMembers;

        API.post('/MWP/UpdateCOB/Save?edit=' + (($scope.edit) ? 'true' : 'false'), payload).then(function (success) {
            location.href = '/MWP/UpdateCOB/';
        }, function (fail) {

        })
    };


}]);
app.controller('EnrollmentSummaryCtrl', EnrollmentSummaryCtrl);

function EnrollmentSummaryCtrl($scope, $http, wbxProviderSearch) {
    $scope.values = {};
    $scope.member = {};

    // toggle for displays
    $scope.values.showNameEdit = null;
    $scope.values.showAddressEdit = null;
    $scope.values.showDetailsEdit = null;
    $scope.values.showPCPEdit = null;

    $scope.values.showNameEdit = false;
    $scope.values.showAddressEdit = false;
    $scope.values.showDetailsEdit = false;
    $scope.values.showPCPEdit = false;

    $scope.canUpdateEnrollment = true;

    $scope.showMessage = false;
    $scope.Message = "";
    $scope.showNameMessage = false;
    $scope.NameMessage = "";


    $scope.showAddressMessage = false;
    $scope.AddressMessage = "";
    $scope.showDetailsMessage = false;
    $scope.DetailsMesssage = "";
    $scope.showPCPMessage = false;
    $scope.PCPMesssage = "";

    $scope.getRedactedSSN = function (SSN) {

        if (SSN != null && SSN.length == 11)
            return "XXX-XX-" + SSN.substr(7, 4);
        else
            if (SSN != null && SSN.length == 9)
                return "XXX-XX-" + SSN.substr(5, 4);
            else
                return "No SSN";
    }

    $scope.setDOB = function (year, month, day) {
        //var DOB = new Date(year, month, day);

        // seems date has to be 1/2/2003 format to work
        $scope.member.DOB = month + "/" + day + "/" + year;
        $scope.DOB = month + "/" + day + "/" + year;
    }

    // determine whether user can update enrollment information. Call on ng-init
    $scope.setCanUpdateEnrollment = function (isGroup, canGroupUpdate, canMemberUpdate) {
        if (isGroup) {
            $scope.canUpdateEnrollment = canGroupUpdate;
        }
        else {
            $scope.canUpdateEnrollment = canMemberUpdate;
        }
    }


    // special case for phone extension not saved in SUMMARY model.
    $scope.setPhoneExtension = function (phoneExtension) {
        if (phoneExtension != null) {
            $scope.member.PhoneExtension = phoneExtension.toString();
            $scope.PhoneExtension = phoneExtension.toString();
        }
    }


    $scope.setModel = function (model) {
        //alert(model.MARITAL_DESCRIPTION);
        //alert(model.DOB);
        //alert(Date.parse(model.DOB));
        //alert(model.DOB.substr(0, model.DOB.indexOf('T')));

        // SET DATA THAT WILL BE MANIPULATED IN EDIT CONTROLS
        $scope.member.EnrolleeId = model.ENROLLEE_ID;
        $scope.member.FirstName = model.FIRST_NAME;
        $scope.member.MiddleName = model.MIDDLE_NAME;
        $scope.member.LastName = model.LAST_NAME;
        $scope.member.Address1 = model.ADDRESS1;
        $scope.member.Address2 = model.ADDRESS2;
        $scope.member.City = model.CITY;
        $scope.member.State = model.STATE;
        $scope.member.Zip = model.ZIP;
        $scope.member.Zip4 = model.ZIP_4
        $scope.member.PropagateAddress = 0;
        $scope.member.SSN = model.SS_NUMBER;
        $scope.member.Phone = model.PHONE
        //$scope.member.PhoneExtension = model.PHONE_EXTENSION;
        $scope.member.PhoneType = model.PHONE_TYPE;
        $scope.member.PropagatePhone = "False";
        $scope.member.Gender = model.GENDER;

        if (model.HANDICAP_FLAG)
            $scope.member.SpecialNeeds = "True";
        else
            $scope.member.SpecialNeeds = "False";
        $scope.member.MaritalStatus = model.MARITAL_STATUS;
        $scope.member.MaritalDescription = model.MARITAL_DESCRIPTION;
        $scope.member.ProviderName = model.PROVIDER_NAME;

        // SET ORIGINAL DATA IN CASE USER HITS CANCEL WE CAN RESET DATA TO ORIGINAL
        $scope.EnrolleeId = model.ENROLLEE_ID;
        $scope.FirstName = model.FIRST_NAME;
        $scope.MiddleName = model.MIDDLE_NAME;
        $scope.LastName = model.LAST_NAME;
        $scope.Address1 = model.ADDRESS1;
        $scope.Address2 = model.ADDRESS2;
        $scope.City = model.CITY;
        $scope.State = model.STATE;
        $scope.Zip = model.ZIP;
        $scope.Zip4 = model.ZIP_4
        $scope.PropagateAddress = 0;
        $scope.SSN = model.SS_NUMBER;
        $scope.Phone = model.PHONE
        //$scope.PhoneExtension = model.PHONE_EXTENSION;
        $scope.PhoneType = model.PHONE_TYPE;
        $scope.PropagatePhone = "False";
        $scope.Gender = model.GENDER;

        if (model.HANDICAP_FLAG)
            $scope.SpecialNeeds = "True";
        else
            $scope.SpecialNeeds = "False";

        $scope.MaritalStatus = model.MARITAL_STATUS;
        $scope.MaritalDescription = model.MARITAL_DESCRIPTION;
        $scope.ProviderName = model.PROVIDER_NAME;
    }

    //$scope.member = {
    //    EnrolleeId: 0,
    //    FirstName: "",
    //    MiddleName: "",
    //    LastName: "",
    //    Address1: "",
    //    Address2: "",
    //    City: "",
    //    State: "",
    //    Zip: "",
    //    Zip4: "",
    //    SSN: "",
    //    Phone: "",
    //    Gender: "",
    //    DOB: null,
    //    SpecialNeeds: "",
    //    PrimaryCareProviderId: 0//,
    //    //PrimaryCareProvider:""
    //};




    $scope.HideMessages = function () {
        $scope.showNameMessage = false;
        $scope.showAddressMessage = false;
        $scope.showDetailsMessage = false;
        $scope.showPCPMessage = false;
    }


    // Name Edit
    $scope.ChangeName = function () {
        $scope.showNameEdit = true;
        $scope.HideMessages();
    }

    $scope.CancelNameEdit = function () {
        $scope.member.FirstName = $scope.FirstName;
        $scope.member.MiddleName = $scope.MiddleName;
        $scope.member.LastName = $scope.LastName;
        $scope.showNameEdit = false;
        $scope.HideMessages();
    }


    $scope.SaveName = function () {

        if ($scope.member.FirstName == null || $scope.member.FirstName == "") {
            bootbox.alert("Please enter a valid first name.");
            return;
        }

        if ($scope.member.LastName == null || $scope.member.LastName == "") {
            bootbox.alert("Please enter a valid last name.");
            return;
        }

        var payload = $scope.member;
        $http({
            method: 'POST',
            url: '/MWP/EnrollmentSummary/SaveName',
            data: payload
        })
            .success(function (data) {
                if (data.error == false) {
                    $scope.FirstName = $scope.member.FirstName;
                    $scope.MiddleName = $scope.member.MiddleName;
                    $scope.LastName = $scope.member.LastName;

                    $scope.HideMessages();

                    $scope.showNameEdit = false;
                    $scope.showNameMessage = true;
                    $scope.NameMessage = data.message;
                }
                else {
                    bootbox.alert(data.message);
                }

            })
        .error(function (data) {
            bootbox.alert(data.message);
        });
    }



    // Address Edit
    $scope.ChangeAddress = function () {
        $scope.showAddressEdit = true;
        $scope.HideMessages();
    }

    $scope.CancelAddressEdit = function () {
        $scope.member.Address1 = $scope.Address1;
        $scope.member.Address2 = $scope.Address2;
        $scope.member.City = $scope.City;
        $scope.member.State = $scope.State;
        $scope.member.Zip = $scope.Zip;
        $scope.member.Zip4 = $scope.Zip4;
        $scope.member.PropagateAddress = $scope.PropagateAddress;

        $scope.showAddressEdit = false;
        $scope.HideMessages();
    }

    $scope.SaveAddress = function () {
        // validate fields
        if ($scope.member.Address1 == "") {
            bootbox.alert("Please enter a valid address.");
            return;
        }

        if ($scope.member.City == "") {
            bootbox.alert("Please enter a valid city.");
            return;
        }

        if ($scope.member.State == null || $scope.member.State == "" || $scope.member.State == "Please select") {
            bootbox.alert("Please select a valid state.");
            return;
        }

        if ($scope.member.Zip == "" || $scope.member.Len < 5) {
            bootbox.alert("Please enter a valid Zip.");
            return;
        }

        if ($scope.member.Zip4 != "" && $scope.member.Len < 4) {
            bootbox.alert("Please enter a valid Zip+.");
            return;
        }

        if ($scope.member.PropagateAddress == null) {
            bootbox.alert("Please select whether to update all addresses.");
            return;
        }


        var payload = $scope.member;
        $http({
            method: 'POST',
            url: '/MWP/EnrollmentSummary/SaveAddress',
            data: payload
        })
            .success(function (data) {
                if (data.error == false) {
                    $scope.Address1 = $scope.member.Address1;
                    $scope.Address2 = $scope.member.Address2;
                    $scope.City = $scope.member.City;
                    $scope.State = $scope.member.State;
                    $scope.Zip = $scope.member.Zip;
                    $scope.Zip4 = $scope.member.Zip4;
                    $scope.PropagateAddress = $scope.member.PropagateAddress;

                    $scope.HideMessages();

                    $scope.showAddressEdit = false;
                    $scope.showAddressMessage = true;
                    $scope.AddressMessage = data.message;
                }
                else {
                    bootbox.alert(data.message);
                }
            })

            .error(function (data) {
                bootbox.alert(data.message);
            });
    }


    // Details Edit
    $scope.ChangeDetails = function () {
        $scope.HideMessages();
        $scope.showDetailsEdit = true;
    }

    $scope.CancelDetailsEdit = function () {
        $scope.member.SSN = $scope.SSN;
        $scope.member.Phone = $scope.Phone
        $scope.member.PhoneExtension = $scope.PhoneExtension;
        $scope.member.PhoneType = $scope.PhoneType;
        $scope.member.PropagatePhone = $scope.PropagatePhone;
        $scope.member.Gender = $scope.Gender;
        $scope.member.DOB = $scope.DOB;
        $scope.member.SpecialNeeds = $scope.SpecialNeeds;
        $scope.member.MaritalStatus = $scope.MaritalStatus;
        $scope.member.MaritalDescription = $scope.MaritalDescription;

        $scope.HideMessages();
        $scope.showDetailsEdit = false;
    }

    $scope.SaveDetails = function () {

        // validate fields
        // SSN NO LONGER REQUIRED
        //if ($scope.member.SSN == "") {
        //    bootbox.alert("Please enter a valid social security number (SSN).");
        //    return;
        //}

        if ($scope.member.Gender == null) {
            bootbox.alert("Please select a gender.");
            return;
        }

        if ($scope.member.DOB == "" || $scope.member.DOB == null) {
            bootbox.alert("Please enter a valid date of birth (DOB).");
            return;
        }

        if ($scope.member.Phone.indexOf("_") !== -1) {
            bootbox.alert("Please enter a valid phone number.");
            return;
        }


        var payload = $scope.member;
        $http({
            method: 'POST',
            url: '/MWP/EnrollmentSummary/SaveDetails',
            data: payload
        })
            .success(function (data) {
                if (data.error == false) {
                    $scope.SSN = $scope.member.SSN;
                    $scope.Phone = $scope.member.Phone
                    $scope.PhoneExtension = $scope.member.PhoneExtension;
                    $scope.PhoneType = $scope.member.PhoneType;
                    $scope.PropagatePhone = $scope.member.PropagatePhone;
                    $scope.Gender = $scope.member.Gender;
                    $scope.DOB = $scope.member.DOB;
                    $scope.SpecialNeeds = $scope.member.SpecialNeeds;
                    $scope.MaritalStatus = $scope.member.MaritalStatus;
                    $scope.MaritalDescription = $scope.member.MaritalDescription;

                    $scope.showDetailsEdit = false;

                    $scope.HideMessages();

                    $scope.showDetailsMessage = true;
                    $scope.DetailsMessage = data.message;
                }
                else {
                    bootbox.alert(data.message);
                }

            })
        .error(function (data) {
            bootbox.alert(data.message);
        });
    }

    // PCP Edit
    $scope.ChangePCP = function () {
        $scope.showPCPEdit = true;
        $scope.HideMessages();
    }

    $scope.CancelPCPEdit = function () {
        $scope.showPCPEdit = false;
        $scope.HideMessages();
    }




    ///* receive broadcast message of PCP selection from ProviderSearchCtrl.js */
    $scope.$on('handleBroadcast', function () {
        //bootbox.alert(wbxProviderSearch.message.Message);


        if (wbxProviderSearch.message.MessageType == "PCPSelection") {

            var msg = {
                EnrolleeID: $scope.member.EnrolleeId,
                ProviderID: wbxProviderSearch.message.ProviderID,
                LocationID: wbxProviderSearch.message.LocationID,
                LastName: wbxProviderSearch.message.LastName,
                FirstName: wbxProviderSearch.message.FirstName
            }

            //var payload = $scope.member;
            $http({
                method: 'GET',
                url: '/MWP/EnrollmentSummary/SavePCP',
                params: {
                    EnrolleeID: $scope.member.EnrolleeId,
                    ProviderID: wbxProviderSearch.message.ProviderID,
                    LocationID: wbxProviderSearch.message.LocationID,
                    LastName: wbxProviderSearch.message.LastName,
                    FirstName: wbxProviderSearch.message.FirstName
                }

                })
                .success(function (data) {
                    if (data.error == false) {
                        $scope.member.ProviderName = wbxProviderSearch.message.LastName + ', ' + wbxProviderSearch.message.FirstName;
                        $scope.showPCPEdit = false;
                    }
                    bootbox.alert(data.message);

                })
            .error(function (data) {
                bootbox.alert(data);
            });

        }
    })




    $scope.$watch('member.MaritalStatus', function (value, $event) {
        //alert($('#ddlMaritalStatus option:selected').val());

        if (value == $('#ddlMaritalStatus option:selected').val())
            $scope.member.MaritalDescription = $('#ddlMaritalStatus option:selected').text();

    });





}


app.controller('MWPHomeCtrl', MWPHomeCtrl);

function MWPHomeCtrl($scope, $http, $location) {

    $scope.blah = "blah";

    //$scope.setModel = function () {
    //    console("setModel ");
    //}
    //$scope.init = function(showDlg)    {
    //        console("init " + showDlg)
    //        $scope.showSelectGroupDlg = showDlg;
    //    }
}


app.controller('MWPLandingCtrl', MWPLandingCtrl);

function MWPLandingCtrl($scope, $http, $location) {
    


}


app.controller('LeftCtrl', LeftCtrl);

function LeftCtrl($scope, $http) {
    $scope.links = [{
        title: 'FAQ',
        link: [
{ title: 'Faq 1' },
{ title: 'Faq 2' },
{ title: 'Faq 3' }
        ]
    }];
}
app.controller('GenderateIDCardCtrl', GenderateIDCardCtrl);

function GenderateIDCardCtrl($scope, $http, $location) {
    
    $scope.showReport = false;
    
    $scope.filter = {
        enrolleeId: 0,
        productId: -1,
        premiumGroupId: -1,
        benefitLvl: 1,
        locationId: -1,
        providerId: -1
    };


    $scope.hasEnrollee = function () {

        if ($scope.filter.enrolleeId > 0)
            return true;
        else
            return false;
    };


    $scope.generateURL = function () {
        var URL = '/Areas/MWP/Reports/BenefitSummary.aspx';
        var param = {
            enrolleeId: $scope.filter.enrolleeId,
            productId: $scope.filter.productId,
            premiumGroupId: $scope.filter.premiumGroupId,
            benefitLvl: $scope.filter.benefitLvl,
            locationId: $scope.filter.locationId,
            providerId: $scope.filter.providerId

        };

        var result = URL + "?" + jQuery.param(param);

        $scope.reportURL = result;
        $scope.showReport = true;
    }

}


app.controller('SelectGroupCtrl', ['$scope', '$http', '$location', 'DataService', 'API', function ($scope, $http, $location, DataService, API) {
    $scope.planSelection = DataService.planSelection;

    $scope.setPlan = function (groupId, planId) {
        API.put('/MWP/select-group', {
            groupId : groupId,
            planId : planId
        }).then(
            function (ok) {
                window.location = '/MWP/';
            },
            function (failed) {

            });
    }

}]);



// Main index controller
app.controller('UpdateCobCtrl',
[
    'API', '$scope', 'DataService', '$window',  function(API, $scope, DataService, $window) {
 
        $scope.members = DataService.members; // remove
        $scope.enrolleeId = DataService.enrolleeId;
        $scope.editing = DataService.editing;
        $scope.forceVerification = DataService.forceVerification;
        $scope.member = DataService.member;
        $scope.dependents = DataService.dependents;
        
        $scope.errors = false;

        $scope.termDetails = {
            date: null,
            otherInsuranceId: null
        };

        angular.element(document).ready(function () {
            $('.panel-body').matchHeight({
                byRow: false,
                property: 'height',
                target: null,
                remove: false
            });
        });

        $scope.verify = function() {

            API.post('/UpdateCOB/Verify', { verify: true }).then(function(ok) {
                location.href = '/MWP/';
            }, function (failed) {
                
            });
        };

        $scope.unverify = function () {

            API.post('/UpdateCOB/Verify', { verify: false }).then(function (ok) {
                location.href = '/MWP/';
            }, function (failed) {

            });
        }



        $scope.addPolicy = function (enrolleeId) {
            $window.location.href = '/MWP/UpdateCOB/Add?enrolleeId=' + enrolleeId;
        }

        $scope.delete = function (enrolleeId, otherInsuranceId) {
            $scope.termDetails.otherInsuranceId = otherInsuranceId;

            $('#TermPolicyDialog').modal({
                backdrop: 'static'
            });
            $('#TermPolicyDialog').modal('show');

            return;
            bootbox.confirm("Are you sure you want to delete other insurance?", function (okay) {
                if (okay)
                    location.href = "/MWP/UpdateCOB/Delete?EnrolleeId=" + enrolleeId + "&otherInsuranceId=" + otherInsuranceId;
            });
            return false;
        }

        $scope.closeTermPolicy = function () {
            $scope.errors = false;
            $('#TermPolicyDialog').modal('hide');
        }

        $scope.termPolicy = function () {
            API.delete('/UpdateCOB/TermPolicy?otherInsuranceId=' + $scope.termDetails.otherInsuranceId + '&date=' + $scope.termDetails.date).then(function (ok) {
                $scope.errors = false;
                location.href = '/MWP/UpdateCOB/';
            }, function (failed) {
                $scope.errors = failed.errors;
            });
        }

        $scope.editOtherInsurance = function (enrolleeId, otherInsuranceId) {
            $window.location.href = '/MWP/UpdateCOB/Edit/?enrolleeId='+enrolleeId+'&otherInsuranceId=' + otherInsuranceId;
        }

    }
]);
app.controller('ViewDocumentCtrl', ViewDocumentCtrl);


function ViewDocumentCtrl($scope, $http) {
    $scope.domainSourceId="";

    $scope.viewDocument = function(documentId)
    {
        console.log("view document: " + documentId);

        $http({
            cache: false,
            url: "ViewDocuments/LogView",
            params: {
                domainSourceId: $scope.domainSourceId,
                documentId: documentId
            }
        });

    }

}


function formatMoney(c) {
    return parseFloat(c).toFixed(2);
};

/* Mask Directives -  Written with minification support, 
see 1. )http://odetocode.com/blogs/scott/archive/2013/03/13/angularjs-controllers-dependencies-and-minification.aspx 
    2.) http://blog.getbrandid.com/2013/03/22/your-angular-js-directives-will-break-when-minified-this-is-how-you-write-directives-likeaboss/
*/

app.directive('wbxDateMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("mm/dd/yyyy",
            {
                yearrange: { minyear: 1900, maxyear: 2078 },
                clearIncomplete: true,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                onincomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxDateMaskMmyyyy', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("mm/yyyy",
            {
                yearrange: { minyear: 1900, maxyear: 2078 },
                clearIncomplete: true,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable

                        ngModel.assign(scope, element.val());
                    });
                },
                onincomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxTimeMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("h:s t",
            {
                clearIncomplete: true,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                onincomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
         });
    }
}]);

app.directive('wbxSsnMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("999-99-9999",
            {
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxSsnMaskOld', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("999-99-9999",
            {
                clearIncomplete: true,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxPhoneMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("(999) 999-9999",
            {
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val().replace(/\s/g, ''));
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);
app.directive('wbxPhoneMaskOld', ["$parse", function ($parse)
{
    return function (scope, element, attrs)
    {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("(999) 999-9999",
            {
                clearIncomplete: true,
                oncomplete: function ()
                {
                    scope.$apply(function (scope)
                    {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                oncleared: function ()
                {
                    scope.$apply(function (scope)
                    {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);


app.directive('currencyMask', ["$parse", function ($parse) {
    return function (scope, element, attrs, modelCtrl) {
        var ngModel = $parse(attrs.ngModel);

        var decimalPlaces = 2;
        if (angular.isDefined(attrs.currencyDecimalPlaces))
            decimalPlaces = attrs.currencyDecimalPlaces;

        var currencySeparator = '';
        if (angular.isDefined(attrs.currencySeparator))
            currencySeparator = attrs.currencySeparator;

        element.autoNumeric('init', { aSep: currencySeparator, mDec: decimalPlaces });
        element.css("text-align", "right");

        
        ////ngModel.$parsers.unshift(validate);
        //ngModel.$parsers.push(function (data) {
        //    //return $filter('number')(data, decimalPlaces);
        //    return data.replace(currencySeparator, '');
        //});

        //ngModel.$formatters.push(function (data) {
        //    return $filter('number')(data, decimalPlaces);
        //    //return data.replace(currencySeparator, '');
        //});

        //var val = element.val();

        element.keyup(function () {
            scope.$apply(function (scope) {
                // Change binded variable
                var val = element.val();
                ngModel.assign(scope, val);
            });
        });

        element.focusout(function () {
            var val = element.val();
        });

    }
}]);

app.directive('wbxCurrencyMask', ["$filter", "$parse",
 function ($filter, $parse) {
     var link = function ($scope, $element, $attrs, ngModel) {
         var assess = function (scope, element, attrs, viewValue) {
             var ngModel = $parse(attrs.ngModel);
             element.inputmask("currency",
                {
                    prefix: "",
                    //placeholder: "",  //If this is used, oncleared isn't fired when textbox is cleared. Don't use this.
                    radixFocus: false,
                    max: attrs.wbxCurrencyMaxValue,
                    allowMinus: attrs.wbxCurrencyAllowMinus != null ? attrs.wbxCurrencyAllowMinus.toLowerCase() == "true" : false,
                    digits: attrs.wbxCurrencyDecimalPoints,
                    clearMaskOnLostFocus: true, //This is so that the 0.00 doesn't show if the value hasn't been entered
                    autoUnmask: true, //This is what caused the 0.00 to work (0.00 being saved instead of "")
                    oncleared: function () {
                        scope.$apply(function (scope) {
                            // Change binded variable
                            ngModel.assign(scope, null); //This is to make sure that if there's nothing entered, the value will be null. instead of ""
                        });
                    }
                });

             return viewValue;
         };

         ngModel.$parsers.unshift(function (viewValue) {
             var plainNumber = "";
             if (!isNaN(viewValue)) {
                 plainNumber = viewValue.replace(/[^\d|\-+|\.+]/g, '');
             }
             return plainNumber;
         });

         ngModel.$formatters.push(function (viewValue) {
             return assess($scope, $element, $attrs, viewValue);
         });
         
         $attrs.$observe('wbxCurrencyMaxValue', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return assess($scope, $element, $attrs, ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxNumericMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask(attrs.wbxNumericType != null ? attrs.wbxNumericType.toLowerCase() : "integer",
            {
                digits: (attrs.wbxNumericType != null && attrs.wbxNumericType.toLowerCase() == "decimal") ? attrs.wbxDigits != null ? attrs.wbxDigits : 2 : "*",
                max: attrs.wbxNumericMaxValue,
                min: attrs.wbxNumericMinValue,
                allowMinus: attrs.wbxNumericAllowMinus != null ? attrs.wbxNumericAllowMinus.toLowerCase() == "true" : false,
                radixFocus: false,
                allowPlus: false,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxEntityIdMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("integer",
            {
                rightAlign: false,
                allowMinus: false,
                allowPlus: false,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxZipMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("99999",
            {
                placeholder: "",
                clearIncomplete: true,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                onincomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxFournumberMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("9999",
            {
                placeholder: "",
                clearIncomplete: true,
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                onincomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxNpiMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("9999999999",
            {
                placeholder: "",
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

app.directive('wbxMemberIdMask', ["$parse", function ($parse) {
    return function (scope, element, attrs) {
        var ngModel = $parse(attrs.ngModel);
        element.inputmask("99",
            {
                placeholder: "",
                oncomplete: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, element.val());
                    });
                },
                onBeforePaste: function (pastedValue, opts) {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, pastedValue);
                    });
                },
                oncleared: function () {
                    scope.$apply(function (scope) {
                        // Change binded variable
                        ngModel.assign(scope, '');
                    });
                }
            });
    }
}]);

//end of mask directive

//Validation directive
app.directive('wbxValidationMessage', function () {
    return {
        restrict: 'A',
        priority: 1000,
        require: '^wbxValidationTooltip',
        link: function (scope, element, attr, ctrl) {
            ctrl.$addExpression(attr.ngIf || true);
        }
    };
});

app.directive('wbxConvertToNumber', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            ngModel.$parsers.push(function (val) {
                return parseInt(val, 10);
            });
            ngModel.$formatters.push(function (val) {
                return angular.isDefined(val) ? '' + val : null;
            });
        }
    };
});

app.directive('wbxValidationTooltip', ['$timeout', function ($timeout) {
    return {
        restrict: 'E',
        transclude: true,
        require: '^form',
        scope: {
            tooltipPlacement: '=?'
        },

        template: '<div class="wbx-alert-icon fa fa-caret-left fa-lg" ng-show="errorCount > 0"></div>',

        controller: ['$scope', function ($scope) {
            var expressions = [];
            $scope.errorCount = 0;

            this.$addExpression = function (expr) {
                expressions.push(expr);
            };
            $scope.$watch(function () {
                var count = 0;
                angular.forEach(expressions, function (expr) {
                    ++count;
                });
                return count;

            }, function (newVal) {
                $scope.errorCount = newVal;
            });

        }],
        link: function (scope, element, attr, formController, transcludeFn) {
            scope.$form = formController;
            if (scope.tooltipPlacement == null) {
                scope.tooltipPlacement = "right";
            }

            transcludeFn(scope, function (clone) {
                var badge = element.find('.wbx-alert-icon');
                var tooltip = angular.element('<div class="wbx-validationMessageTemplate tooltip-danger" />');

                tooltip.append(clone);
                element.append(tooltip);

                $timeout(function () {
                    scope.$field = formController[attr.target];
                    badge.tooltip({
                        placement: scope.tooltipPlacement,
                        html: true,
                        title: clone
                    });

                });
            });
        }
    };
}]);

app.directive('wbxRequiredValidationTooltip', ['$timeout', function ($timeout) {
    return {
        restrict: 'E',
        transclude: true,
        require: '^form',
        scope: {
            tooltipPlacement: '=?'
        },

        template: '<div class="wbx-required-icon fa fa-caret-left fa-lg"></div>',
        link: function (scope, element, attr, formController, transcludeFn) {
            scope.$form = formController;
            if (scope.tooltipPlacement == null) {
                scope.tooltipPlacement = "right";
            }

            transcludeFn(scope, function (clone) {
                var badge = element.find('.wbx-required-icon');
                $timeout(function () {
                    scope.$field = formController[attr.target];
                    badge.tooltip({
                        placement: scope.tooltipPlacement,
                        html: true,
                        title: 'Required'
                    });

                });
            });
        }

    };
}]);
 
app.directive('wbxIsNotFuture', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         var validate = function (viewValue) {
             var valid = true;  // Assume valid if either model does not contain a valid date.
             var pat = /[mdy]/i;
             var bInvalidDate = pat.test(viewValue);
             if (!bInvalidDate)
             {

                 var today = new Date(Date());
                 if (viewValue)
                 {
                     var f = new Date(viewValue);
                     if (!isNaN(f.getTime()))
                     {
                         // Valid if model is less than or equal to the model we're comparing against.
                         valid = today.getTime() > f.getTime();
                     }
                 }
             }
             ngModel.$setValidity('isNotFuture', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);
     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

// for MM/YYYY date entry
app.directive('wbxIsNotFutureMonthYear', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         var validate = function (viewValue) {

             // For expressions which determine if directive should even be run.
             // If directive shouldn't be run then set validity to true
             if ($attrs.wbxIsNotFutureMonthYear.length > 0 && !$scope.$eval($attrs.wbxIsNotFutureMonthYear)) {
                 ngModel.$setValidity('isNotFutureMonthYear', true);
             }

             var valid = true;  // Assume valid if either model does not contain a valid date.
             var pat = /[my]/i;
             var bInvalidDate = pat.test(viewValue);
             if (!bInvalidDate) {

                 var today = new Date(Date());
                 if (viewValue) {
                     var f = new Date(viewValue.substr(0,2) + '-01-' + viewValue.substr(3,4));
                     if (!isNaN(f.getTime())) {
                         // Valid if model is less than or equal to the model we're comparing against.
                         valid = today.getTime() > f.getTime();
                     }
                 }
             }
             ngModel.$setValidity('isNotFutureMonthYear', valid);
             return viewValue;
         };

         var conditionChange = function (viewValue) {
             ngModel.$setValidity('isNotFutureMonthYear', true);

             if (viewValue == true)
                 return validate(ngModel.$modelValue);
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);
         $scope.$watch($attrs.wbxIsNotFutureMonthYear, conditionChange);
     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);


app.directive('wbxIsBefore', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         //  ngModel.$setValidity('isBefore', false);
         var validate = function (viewValue) {
             var valid = true;  // Assume valid if either model does not contain a valid date.
             var pat = /[mdy]/i;
             var bInvalidDate = pat.test(viewValue);
             if (!bInvalidDate)
             {
                 var comparisonModel = $attrs.wbxIsBefore;
                 if (comparisonModel)
                 {
                     var t = new Date(comparisonModel);
                     if (!isNaN(t.getTime()))
                     {
                         if (viewValue)
                         {
                             var f = new Date(viewValue);
                             if (!isNaN(f.getTime()))
                             {
                                 // Valid if model is less than or equal to the model we're comparing against.
                                 valid = t.getTime() >= f.getTime();
                             }
                         }
                     }
                 }
             }
             ngModel.$setValidity('isBefore', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxIsBefore', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxIsAfter', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         //   ngModel.$setValidity('isAfter', false);
         var validate = function (viewValue) {
             var valid = true;  // Assume valid if either model does not contain a valid date.
             var pat = /[mdy]/i;
             var bInvalidDate = pat.test(viewValue);
             if (!bInvalidDate)
             {
                 var comparisonModel = $attrs.wbxIsAfter;
                 if (comparisonModel)
                 {
                     var t = new Date(comparisonModel);
                     if (!isNaN(t.getTime()))
                     {
                         if (viewValue)
                         {
                             var f = new Date(viewValue);
                             if (!isNaN(f.getTime()))
                             {
                                 // Valid if model is less than or equal to the model we're comparing against.
                                 valid = t.getTime() <= f.getTime();
                             }
                         }
                     }
                 }
             }

             ngModel.$setValidity('isAfter', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxIsAfter', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxIsAfterTime', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         var validate = function (viewValue) {
             var valid = true;  // Assume valid if either model does not contain a valid date.
             var pat = /(0[1-9]|1[0-2]):([0-5][0-9]) (AM|am|PM|pm)/i;
             var validTime = pat.test(viewValue);
             if (validTime) {
                var comparisonModel = $attrs.wbxIsAfterTime;
                if (comparisonModel) {
                    var ampmFrom = comparisonModel.charAt(6);
                    var hourFrom = parseInt(comparisonModel.substr(0, 2));
                    var minuteFrom = comparisonModel.substr(3, 2);
                    if (hourFrom == 12) {
                        if (ampmFrom == 'a') {
                            hourFrom = 0;
                        }
                    }
                    else if (ampmFrom == 'p' && hourFrom < 12) {
                        hourFrom = hourFrom + 12;
                    }
                    
                    var fromString = hourFrom + ":" + minuteFrom;
                    //The date part doesn't matter. Just need one there to fit the format
                    var from = new Date("June 18, 2015 " + fromString);
                    if (!isNaN(from.getTime())) {
                        if (viewValue) {
                            var ampmTo = viewValue.charAt(6);
                            var hourTo= parseInt(viewValue.substr(0, 2));
                            var minuteTo = viewValue.substr(3, 2);
                            if (hourTo == 12) {
                                if (ampmTo == 'a') {
                                    hourTo = 0;
                                }
                            }
                            else if (ampmTo == 'p' && hourTo < 12) {
                                hourTo = hourTo + 12;
                            }

                            var toString = hourTo + ":" + minuteTo;
                            //The date part doesn't matter. Just need one there to fit the format
                            var to = new Date("June 18, 2015 " + toString);
                            if (!isNaN(to.getTime())) {
                                // Valid if model is less than or equal to the model we're comparing against.
                                valid = from.getTime() < to.getTime();
                            }
                        }
                    }
                 }
             }

             ngModel.$setValidity('isAfterTime', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxIsAfterTime', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxIsAfterInt', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         //   ngModel.$setValidity('isAfter', false);
         var validate = function (viewValue) {
             var valid = true;  // Assume valid if either model does not contain a valid int.
             var pat = /^[0-9]*$/;
             var bValidInt = pat.test(viewValue);
             if (bValidInt) {
                 var comparisonModel = $attrs.wbxIsAfterInt;
                 if (comparisonModel && pat.test(comparisonModel)) {

                     var fromInt = parseInt(comparisonModel);
                     var toInt = parseInt(viewValue);

                     valid = fromInt <= toInt;

                 }
             }

             ngModel.$setValidity('isAfter', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxIsAfterInt', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxIsAfterMmyyyy', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         //   ngModel.$setValidity('isAfter', false);
         var validate = function (viewValue) {
             var valid = true;  // Assume valid if either model does not contain a valid date.
             var pat = /((0[1-9])|(1[0-2]))\/(\d{4})/;
             var bValidDate = pat.test(viewValue);
             if (bValidDate) {
                 var comparisonModel = $attrs.wbxIsAfterMmyyyy;
                 if (comparisonModel && pat.test(comparisonModel)) {

                     var fromDate = comparisonModel.substr(3, 4) + comparisonModel.substr(0, 2);
                     var toDate = viewValue.substr(3, 4) + viewValue.substr(0, 2);

                     valid = fromDate <= toDate;

                 }
             }

             ngModel.$setValidity('isAfter', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxIsAfterMmyyyy', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxIsMatched', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         var validate = function (viewValue) {
             var otherValue = $attrs.wbxIsMatched != null ? $attrs.wbxIsMatched : "";
             var thisValue = viewValue != null ? viewValue : "";
             var valid = otherValue == thisValue;

             ngModel.$setValidity('notMatched', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxIsMatched', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxDoesNotMatch', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         var validate = function (viewValue) {
             var otherValue = $attrs.wbxDoesNotMatch != null ? $attrs.wbxDoesNotMatch : "";
             var thisValue = viewValue != null ? viewValue : "";
             var valid = otherValue != thisValue;

             ngModel.$setValidity('Matches', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxDoesNotMatch', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxHasValue', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         var validate = function (viewValue) {
             var otherValue = $attrs.wbxHasValue;
             var thisValue = viewValue;
             var valid = thisValue == null || thisValue == "" || (thisValue != null && thisValue != "" && otherValue != null && otherValue != "");

             ngModel.$setValidity('noValue', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxHasValue', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxDateRange', [
 function () {
     var link = function ($scope, $element, $attrs, ngModel) {
         var conversionNumber = (1000 * 60 * 60 * 24);
         var validate = function (viewValue) {
             var valid = true;  // Assume valid if either model does not contain a valid date.
             var pat = /[mdy]/i;
             var bInvalidDate = pat.test(viewValue);
             if (!bInvalidDate) {
                 var comparisonModel = $attrs.wbxDateRange;
                 if (comparisonModel) {
                     var t = new Date(comparisonModel);
                     if (!isNaN(t.getTime())) {
                         if (viewValue) {
                             var f = new Date(viewValue);
                             if (!isNaN(f.getTime()) && (t.getTime() <= f.getTime())) {
                                 // Valid if the difference between model and the other model is less than max days.
                                 var diff = Math.floor((f.getTime() - t.getTime()) / conversionNumber);
                                 valid = diff <= $attrs.wbxMaxDays;
                             }
                         }
                     }
                 }
             }

             ngModel.$setValidity('wbxDateRange', valid);
             return viewValue;
         };

         ngModel.$parsers.unshift(validate);
         ngModel.$formatters.push(validate);

         $attrs.$observe('wbxDateRange', function (comparisonModel) {
             // Whenever the comparison model changes we'll re-validate
             return validate(ngModel.$viewValue);
         });

     };

     return {
         require: 'ngModel',
         link: link
     };

 }
]);

app.directive('wbxValidateNpi', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            var validate = function (viewValue) {
                var valid = true;
                if (viewValue != null) {
                    if (viewValue.length == 0)
                        valid = true;
                    else if (viewValue.length != 10)
                        valid = false;
                    else {
                        var checkDigit = 0;
                        for (var i = 0; i < viewValue.length - 1; i++) {
                            if (i % 2 == 0) {
                                var r = viewValue.substring(i, i + 1) * 2;
                                if (r >= 10) {
                                    //For multiple digits, add individual digit
                                    checkDigit += (("" + r).substring(0, 1) * 1) + (("" + r).substring(1, 2) * 1);
                                }
                                else {
                                    checkDigit += r;
                                }
                            }
                            else {
                                checkDigit += viewValue.substring(i, i + 1) * 1;
                            }
                        }
                        // For prefix 80840 which is not included on the NPI
                        checkDigit += 24;

                        if (checkDigit % 10 == 0) {
                            //If the last digit is 0, the checkDigit will be 0
                            checkDigit = 0;
                        }
                        else {
                            //If the last digit isn't 0, minus the value from the next rounded 10
                            checkDigit = ((parseInt(checkDigit / 10) + 1) * 10) - checkDigit;
                        }

                        valid = (viewValue.substring(9, 10) == checkDigit);
                    }
                }
                else {
                    valid = true;
                }
                ngModel.$setValidity('npi', valid);
                return viewValue;
            };

            ngModel.$parsers.unshift(validate);
            ngModel.$formatters.push(validate);
        }
    }
});

app.directive('wbxValidateDate', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            var validate = function (viewValue) {
                var valid = true;
                if (viewValue) {
                    if (viewValue.substring(viewValue.length - 1) == 'y') {
                        //Not complete
                        valid = false;
                    }
                    else {
                        valid = true;
                    }
                }
                ngModel.$setValidity('incomplete', valid);
                return viewValue;
            };

            ngModel.$parsers.unshift(validate);
            ngModel.$formatters.push(validate);
        }
    }
});

app.directive('wbxValidateTime', function () {
    return {
        restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, ngModel) {
                var validate = function (viewValue) {
                    var valid = true;
                    if (viewValue) {
                        if (viewValue.charAt(4) == 'm' || viewValue.charAt(6) == 'x') {
                            //Not complete
                            valid = false;
                        }
                        else {
                            valid = true;
                    }
                }
                ngModel.$setValidity('incomplete', valid);
                    return viewValue;
            };

            ngModel.$parsers.unshift(validate);
            ngModel.$formatters.push(validate);
}
}
});

app.directive('wbxValidateEmail', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            var validate = function (viewValue) {
                var valid = true;
                if (viewValue) {
                    var regEx = /^[-A-Za-z0-9_@.']+$/; //Only these characters are valid for email

                    if (!regEx.test(viewValue) ||           /*invalid characters*/
                        viewValue.indexOf(" ") >= 0 ||      /*no space allowed*/
                        viewValue.indexOf(".@") >= 0 ||     /*can't have period right before @*/
                        viewValue.indexOf("@.") >= 0 ||     /*can't have period right after @*/
                        viewValue.indexOf("@") == 0 ||      /*First character can't be @*/
                        viewValue.indexOf(".") == 0 ||      /*First character can't be .*/
                        viewValue.lastIndexOf("@") == viewValue.length - 1 ||  /*Last character can't be @*/
                        viewValue.lastIndexOf(".") == viewValue.length - 1      /*Last character can't be .*/
                        ) {
                        valid = false;
                    }

                    var atIndex = viewValue.indexOf("@");
                    if (atIndex <= 0 || /*If no @ found*/
                        atIndex >= viewValue.length - 3 || /*Needs to have at least 3 characters after @*/
                        viewValue.indexOf("@", atIndex + 1) >= 0 || /*Ensure there is only one @ char*/
                        viewValue.indexOf(".", atIndex) < 0 /*Ensure that the domain portion contains at least one dot*/
                        ) {
                        valid = false;
                    }

                }
                ngModel.$setValidity('email', valid);
                return viewValue;
            };

            ngModel.$parsers.unshift(validate);
            ngModel.$formatters.push(validate);
        }
    }
});

app.directive('wbxValidatePhone', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            var validate = function (viewValue) {
                var valid = true;
                if (viewValue) {
                    if ((viewValue.replace(/([-~!@#$%^&*()_+=`{}\[\]\|\\:;'<>,.\/? ])+/g, '')).length !== 10) {
                        //Not complete
                        valid = false;
                    }
                    else {
                        valid = true;
                    }
                }
                ngModel.$setValidity('incomplete', valid);
                return viewValue;
            };

            ngModel.$parsers.unshift(validate);
            ngModel.$formatters.push(validate);
        }
    }
});

app.directive('wbxValidateSsn', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            var validate = function (viewValue) {
                var valid = true;
                if (viewValue) {
                    if ((viewValue.replace(/([-~!@#$%^&*()_+=`{}\[\]\|\\:;'<>,.\/? ])+/g, '')).length !== 9) {
                        //Not complete
                        valid = false;
                    }
                    else {
                        valid = true;
                    }
                }
                ngModel.$setValidity('incomplete', valid);
                return viewValue;
            };

            ngModel.$parsers.unshift(validate);
            ngModel.$formatters.push(validate);
        }
    }
});

app.directive('wbxValidateMinCharacters', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            var validate = function (viewValue) {
                var minCharacters = attrs.wbxValidateMinCharacters;
                var valid = true;
                if (viewValue) {
                    if (viewValue.length < minCharacters) {
                        //Not complete
                        valid = false;
                    }
                    else {
                        valid = true;
                    }
                }
                ngModel.$setValidity('incomplete', valid);
                return viewValue;
            };

            ngModel.$parsers.unshift(validate);
            ngModel.$formatters.push(validate);
        }
    }
});


//end of Validation directive

//Start of Filters

app.filter('wbxContactsSign', function () {
    return function (a) {
        if (a == null) {
            return a;
        }

        if (a != "" && a >= 0) {
            a = "+" + a.toString();
        } else {
            a = a.toString();
        }
        return a;
    }
});

app.filter('wbxRxNumber', function () {
    return function (a, b) {
        if (a == null) {
            return "--";
        } else {
            a = a.toFixed(b);

            if (a >= 0) {
                a = "+" + a.toString();
            } else {
                a = a.toString();
            }

            return a;
        }
    }
});

app.filter('wbxRxNumberUnsigned', function () {
    return function (a, b) {
        if (a == null) {
            return "--";
        } else {
            a = a.toFixed(b);
            a = a.toString();

            return a;
        }
    }
});

app.filter('wbxSsnFilter', function () {
    return function (value, mask) {
        if (value != undefined) {
            var val = "";

            if (value)
                val = value.toString().replace(/\D/g, "")

            if (val != null) {
                len = val.length
            }
            
            if (len < 4) {
                return val
            }

            if (3 < len && len < 6) {
                if (mask) {
                    return "***-" + val.substr(3);
                }
                else {
                    return val.substr(0, 3) + "-" + val.substr(3);
                }
            }

            if (len > 5) {
                if (mask) {
                    return "***-**-" + val.substr(5, 4);
                }
                else {
                    return val.substr(0, 3) + "-" + val.substr(3, 2) + "-" + val.substr(5, 4);
                }
            }
        }
    }
});


app.filter('wbxDateFilter', function ()
{
    return function (value, mask)
    {
        if (value != undefined)
        {
            dateString = value.toString();
            if (dateString.length > 0)
            {
                var d = new Date(dateString);
                if (mask)
                {
                    return "**/**/" + d.getFullYear().toString();
                }
                else
                {
                    return (d.getMonth() + 1).toString() + "/" + d.getDate().toString() + "/" + d.getFullYear().toString();
                }
            }
        }
        return "";
    }
});


app.filter('wbxDeaFilter', function ()
{
    return function (value, mask)
    {
        if (value != undefined)
        {
            val = value;
            len = val.length

            if (len <= 4)
                return val

            if (mask)
                return "*****" + val.substr(len-4, 4);
            else
                return val;
        }
    }
});

//End of Filters

app.directive('enterAsTab', function ()
{
    return {
        restrict: 'A',
        link: function ($scope, elem, attrs)
        {
            elem.bind('keydown', function (e)
            {
                var code = e.keyCode || e.which;
                if (code === 13)
                {
                    e.preventDefault();
                    var ntabindex = parseFloat(elem[0].getAttribute('tabindex'));
                    var nextElem = null;
                    do 
                    {
                        if (e.shiftKey == false)
                        {
                            ntabindex++;
                        }
                        else
                        {
                            if (ntabindex > 1)
                                ntabindex--;
                        }

                        nextElem = $('[tabindex=' + ntabindex + ']');
                        if (nextElem != null)
                            nextElem.focus();
                        
                    } while (nextElem != null && nextElem.is(":visible") == false || nextElem.is(":disabled") == true)
                }
            });
        }
    }
});

app.directive('wbxEligibilitySearchCriteria', ['$http','$q','$timeout', function ($http, $q, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/EligibilitySearchCriteria',
        require: '^form',
        scope: {
            searchData: '=searchCriteriaObject',
            clearSearchCriteria: '=',
            isDoneLoading: '=',
            requestToCreateMember: '=?',
            isCreateMemberMode: '=?',
            createMember: '&?',
            sessionInfo: '=?'
        },
        controller: ['$scope', function ($scope) {
            $scope.clearSearchCriteria = false;
            $scope.searchCriteriaSessions = null;
            $scope.$watchCollection('[clearSearchCriteria, searchCriteriaSessions]', function (n, o) {
                if (n[0] != null && n[1] != null) {
                    $scope.resetMemberInfo();
                    $scope.clearSearchCriteria = false;
                }
            });

            $scope.initSearchCriteria = function () {
                if ($scope.sessionInfo == null) {
                    var promise = $scope.getSearchCriteriaSessions();
                    promise.then(function () {
                        $scope.populateSessionInfo();
                    }, function (data) {
                        // bad, do nothing
                    });
                }
                else {
                    $scope.searchCriteriaSessions = $scope.sessionInfo;
                    $scope.populateSessionInfo();
                }
            }

            $scope.populateSessionInfo = function () {
                    $scope.resetMemberInfo();
                    $scope.isDoneLoading = true;
                    if ($scope.searchData.passedInfo != null) {
                        //Populate some of the fields with passed info
                        if ($scope.searchData.passedInfo.RETAIN_MODE != 1) {
                            
                            $timeout(function () {
                                $scope.searchData.MemberInfoSelect = $scope.searchData.passedInfo.SEARCH_TYPE;

                                $scope.searchData.SUBSCRIBER_ID = $scope.searchData.passedInfo.SUBSCRIBER_ID;
                                $scope.searchData.LAST_NAME = $scope.searchData.passedInfo.LAST_NAME;
                                $scope.searchData.FIRST_NAME = $scope.searchData.passedInfo.FIRST_NAME;
                                $scope.searchData.DOB = $scope.searchData.passedInfo.DOB;
                                $scope.searchData.LAST_SSN = $scope.searchData.passedInfo.SSN;
                            });
                        }
                    }
            }

            $scope.MemberInfoChanged = function () {
                $scope.clearMemberInfo();
            }

            $scope.clearMemberInfo = function () {
                $scope.searchData.SUBSCRIBER_ID = null;
                $scope.searchData.DOB = null;
                $scope.searchData.LAST_NAME = null;
                $scope.searchData.FIRST_NAME = null;
                $scope.searchData.LAST_SSN = null;

                //Therapy
                $scope.searchData.IsSubscriberIdUnknown = false;
                $scope.isCreateMemberMode = false;
            }

            $scope.resetMemberInfo = function () {
                if ($scope.searchCriteriaSessions.SEARCH_SUBSCRIBER_ID_FLAG) {
                    $scope.searchData.MemberInfoSelect = 1;
                }
                else if ($scope.searchCriteriaSessions.SEARCH_SUBSCRIBER_ID_DOB_FLAG) {
                    $scope.searchData.MemberInfoSelect = 2;
                }
                else if ($scope.searchCriteriaSessions.SEARCH_LAST_FIRST_FLAG) {
                    $scope.searchData.MemberInfoSelect = 3;
                }
                else if ($scope.searchCriteriaSessions.SEARCH_LAST_DOB_FLAG) {
                    $scope.searchData.MemberInfoSelect = 4;
                }
                else if ($scope.searchCriteriaSessions.SEARCH_LAST_FIRST_DOB_FLAG) {
                    $scope.searchData.MemberInfoSelect = 5;
                }
                else if ($scope.searchCriteriaSessions.SEARCH_SSN_DOB_FLAG) {
                    $scope.searchData.MemberInfoSelect = 6;
                }
                else if ($scope.searchCriteriaSessions.SEARCH_SUBSCRIBER_ID_FIRST_LAST_DOB_FLAG) {
                    $scope.searchData.MemberInfoSelect = 7;
                }
                else {
                    $scope.searchData.MemberInfoSelect = 1;
                }

                $scope.clearMemberInfo();
            }

            $scope.getSearchCriteriaSessions = function () {
                var deferred = $q.defer();

                $http({
                    method: 'GET',
                    url: '/WebSession/GetSearchCriteriaSessions'
                }).then(function successCallback(response) {
                    $scope.searchCriteriaSessions = response.data;
                    deferred.resolve();
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error in getting search criteria sessions.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    deferred.reject(false);
                });

                return deferred.promise;
            }

            //Therapy
            $scope.clearSubscriberId = function () {
                $scope.searchData.SUBSCRIBER_ID = null;
            }

            $scope.$watch('requestToCreateMember', function (n, o) {
                if (n) {
                    if ($scope.searchData.IsSubscriberIdUnknown) {
                        $scope.searchData.IsSubscriberIdUnknown = false;

                        $timeout(function () {
                            $('#SubscriberId6TextBox').focus();
                        });

                        $scope.search_form.$setSubmitted();
                        $scope.isCreateMemberMode = true;
                    }

                    $timeout(function () {
                        if ($scope.search_form.$invalid) {
                            if ($('.alert-danger:visible:first').offset()) {
                                $('html, body').animate({
                                    scrollTop: $('.alert-danger:visible:first').offset().top - 60
                                }, 750);
                            }
                        }
                        else {
                            $scope.createMember();
                        }
                    });

                    $scope.requestToCreateMember = false;
                }
            });

        }],
        link: function (scope, element, attr, formController) {
            scope.search_form = formController;
        }
    };
}]);

app.directive('wbxUsernamePasswordPin', ['$http','$q','$timeout', function ($http, $q, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/UsernamePasswordPIN',
        require: '^form',
        scope: {
            registrationData: '=',
            clearFields: '=',
            hasPin: '=',
            isEdit: '='
        },
        controller: ['$scope', function ($scope) {
            $scope.clearFields = false;

            $scope.clearUserNameInfo = function () {
                $scope.registrationData.USER_NAME = null;
                $scope.registrationData.PASSWORD = null;
                $scope.registrationData.CONFIRM_PASSWORD = null;
                $scope.registrationData.PIN = null;
                $scope.registrationData.confirmPIN = null;
            }

            $scope.$watch('clearFields', function (n, o) {
                if (n != null && n) {
                    $scope.clearUserNameInfo();
                    $scope.clearFields = false;
                }
            });

            $scope.$watch('isPasswordValid', function (n, o) {
                if (n != o && !$scope.isEdit) {
                    $scope.registration_form.passwordTextBox.$setValidity("notvalid", $scope.isPasswordValid);
                }
            });

            $scope.$watch('registrationData.USER_NAME', function (n, o) {
                if (n != null && n != o && !$scope.isEdit) {
                    // Check to see if user name is available
                    $http({
                        method: 'GET',
                        url: '/Registration/IsUserNameValid',
                        params: {
                            USER_NAME: $scope.registrationData.USER_NAME
                        }
                    }).then(function successCallback(response) {
                        if (response.data != null) {
                            if ($scope.registrationData.USER_NAME == response.data.USER_NAME) {
                                $scope.registration_form.IsUserNameAvailableTextBox.$setValidity("UserNameNotAvailable", response.data.IS_AVAILABLE);
                            }
                        }
                        else {
                            $scope.registration_form.IsUserNameAvailableTextBox.$setValidity("UserNameNotAvailable", false);
                        }
                    }, function errorCallback(response) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with checking if user name is available.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                    });
                }
            });

        }],
        link: function (scope, element, attr, formController) {
            scope.registration_form = formController;
        }
    };
}]);

app.directive('wbxPasswordStrength', function() {
    return {
        template: '<div class="wbx-progress"><div class="progress-bar progress-bar-{{color}}" role="progressbar" ng-style="width"><span>{{message}}</span></div></div>',
        restrict: 'A',
        scope: {
            pwd: '=wbxPasswordStrength'
        },
        link: function(scope /*, elem, attrs*/ ) {
            var
              mesureStrength = function(p) {
                  var matches = {
                      pos: {},
                      neg: {}
                  },
                    counts = {
                        pos: {},
                        neg: {
                            seqLetter: 0,
                            seqNumber: 0,
                            seqSymbol: 0
                        }
                    },
                    tmp,
                    strength = 0,
                    letters = 'abcdefghijklmnopqrstuvwxyz',
                    numbers = '01234567890',
                    symbols = '!#$%*~',
                    back,
                    forth,
                    i;

                  if (p) {
                      // Benefits
                      matches.pos.lower = p.match(/[a-z]/g);
                      matches.pos.upper = p.match(/[A-Z]/g);
                      matches.pos.numbers = p.match(/\d/g);
                      matches.pos.symbols = p.match(/[!#$%*~]+/g);
                      matches.pos.middleNumber = p.slice(1, -1).match(/\d/g);
                      matches.pos.middleSymbol = p.slice(1, -1).match(/[!#$%*~]+/g);

                      counts.pos.lower = matches.pos.lower ? matches.pos.lower.length : 0;
                      counts.pos.upper = matches.pos.upper ? matches.pos.upper.length : 0;
                      counts.pos.numbers = matches.pos.numbers ? matches.pos.numbers.length : 0;
                      counts.pos.symbols = matches.pos.symbols ? matches.pos.symbols.length : 0;

                      tmp = _.reduce(counts.pos, function(memo, val) {
                          // if has count will add 1
                          return memo + Math.min(1, val);
                      }, 0);

                      counts.pos.numChars = p.length;
                      tmp += (counts.pos.numChars >= 8) ? 1 : 0;

                      counts.pos.requirements = (tmp >= 3) ? tmp : 0;
                      counts.pos.middleNumber = matches.pos.middleNumber ? matches.pos.middleNumber.length : 0;
                      counts.pos.middleSymbol = matches.pos.middleSymbol ? matches.pos.middleSymbol.length : 0;

                      // Deductions
                      matches.neg.consecLower = p.match(/(?=([a-z]{2}))/g);
                      matches.neg.consecUpper = p.match(/(?=([A-Z]{2}))/g);
                      matches.neg.consecNumbers = p.match(/(?=(\d{2}))/g);
                      matches.neg.onlyNumbers = p.match(/^[0-9]*$/g);
                      matches.neg.onlyLetters = p.match(/^([a-z]|[A-Z])*$/g);

                      counts.neg.consecLower = matches.neg.consecLower ? matches.neg.consecLower.length : 0;
                      counts.neg.consecUpper = matches.neg.consecUpper ? matches.neg.consecUpper.length : 0;
                      counts.neg.consecNumbers = matches.neg.consecNumbers ? matches.neg.consecNumbers.length : 0;


                      // sequential letters (back and forth)
                      for (i = 0; i < letters.length - 2; i++) {
                          var p2 = p.toLowerCase();
                          forth = letters.substring(i, parseInt(i + 3));
                          back = _.str.reverse(forth);
                          if (p2.indexOf(forth) !== -1 || p2.indexOf(back) !== -1) {
                              counts.neg.seqLetter++;
                          }
                      }

                      // sequential numbers (back and forth)
                      for (i = 0; i < numbers.length - 2; i++) {
                          forth = numbers.substring(i, parseInt(i + 3));
                          back = _.str.reverse(forth);
                          if (p.indexOf(forth) !== -1 || p.toLowerCase().indexOf(back) !== -1) {
                              counts.neg.seqNumber++;
                          }
                      }

                      // sequential symbols (back and forth)
                      for (i = 0; i < symbols.length - 2; i++) {
                          forth = symbols.substring(i, parseInt(i + 3));
                          back = _.str.reverse(forth);
                          if (p.indexOf(forth) !== -1 || p.toLowerCase().indexOf(back) !== -1) {
                              counts.neg.seqSymbol++;
                          }
                      }

                      // repeated chars
                      counts.neg.repeated = _.chain(p.toLowerCase().split('')).
                      countBy(function(val) {
                          return val;
                      })
                        .reject(function(val) {
                            return val === 1;
                        })
                        .reduce(function(memo, val) {
                            return memo + val;
                        }, 0)
                        .value();

                      // Calculations
                      strength += counts.pos.numChars * 4;
                      if (counts.pos.upper) {
                          strength += (counts.pos.numChars - counts.pos.upper) * 2;
                      }
                      if (counts.pos.lower) {
                          strength += (counts.pos.numChars - counts.pos.lower) * 2;
                      }
                      if (counts.pos.upper || counts.pos.lower) {
                          strength += counts.pos.numbers * 4;
                      }
                      strength += counts.pos.symbols * 6;
                      strength += (counts.pos.middleSymbol + counts.pos.middleNumber) * 2;
                      strength += counts.pos.requirements * 2;

                      strength -= counts.neg.consecLower * 2;
                      strength -= counts.neg.consecUpper * 2;
                      strength -= counts.neg.consecNumbers * 2;
                      strength -= counts.neg.seqNumber * 3;
                      strength -= counts.neg.seqLetter * 3;
                      strength -= counts.neg.seqSymbol * 3;

                      if (matches.neg.onlyNumbers) {
                          strength -= counts.pos.numChars;
                      }
                      if (matches.neg.onlyLetters) {
                          strength -= counts.pos.numChars;
                      }
                      if (counts.neg.repeated) {
                          strength -= (counts.neg.repeated / counts.pos.numChars) * 10;
                      }
                  }

                  return Math.max(0, Math.min(100, Math.round(strength)));
              },


              getClass = function(s) {
                  switch (Math.round(s / 33)) {
                      case 0:
                      case 1:
                          return 'danger';
                      case 2:
                          return 'warning';
                      case 3:
                          return 'success';
                  }
              },
            
              getText = function (s) {
                  switch (Math.round(s / 33)) {
                      case 0:
                          return '';
                      case 1:
                          return 'Weak';
                      case 2:
                          return 'Medium';
                      case 3:
                          return 'Very Strong';
                  }
              };

            getBarLength = function (s) {
                switch (Math.round(s / 33)) {
                    case 0:
                        return { 'width': '0%' };
                    case 1:
                        return { 'width': '33%' };
                    case 2:
                        return { 'width': '66%' };
                    case 3:
                        return { 'width': '100%' };
                }
            }

            scope.$watch('pwd', function() {
                scope.value = mesureStrength(scope.pwd);
                scope.color = getClass(scope.value);
                scope.message = getText(scope.value);
                scope.width = getBarLength(scope.value);
            });

        },
    };
});

app.directive('wbxPasswordStrengthDisplay', function () {
    return {
        templateUrl: '/Templates/PasswordStrengthDisplay',
        restrict: 'A',
        scope: {
            pwd: '=wbxPsdPassword',
            userName: '=wbxPsdUserName',
            isPasswordValid: '=wbxPsdIsValid'
        },
        controller: ['$scope','$http', '$location', function PasswordDisplayController($scope, $http, $location) {

            $scope.rules = [];

            $scope.Init = function (userName) {

                if ((userName == undefined) || (userName == null))
                    userName = "";

                // Get the policy rules
                $http({
                    url: '/AccountManagement/GetPasswordRules',
                    method: 'GET',
                    params: { userName: userName }
                }).then(function successCallback(response) {
                    if (response.data.length == 0) {
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with getting password rules.");
                        }
                        else {
                            bootbox.alert("Could not retrieve password rules.");
                        }
                    }
                    else {
                        $scope.rules = response.data;
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with getting password rules.");
                    }
                    else {
                        bootbox.alert("Could not retrieve password rules.");
                    }

                });
            }
        }],
        link: function (scope, element, attributes, controller, transcludeFn) {
            
            var lower = [];
            var upper = [];
            var numbers = [];
            var symbols = [];
            var passwordLength = 0;
            
            scope.Init(scope.userName);

            var characterTest = function (p) {

            },


            CheckForRequiredChars = function (p) {

                if (p == undefined)
                {
                    //This is to makes sure the checkmarks are removed if the password is deleted
                    lower = null;
                    upper = null;
                    numbers = null;
                    symbols = null;
                    passwordLength = 0;
                    return;
                }
                else {
                    lower = p.match(/[a-z]/g);
                    upper = p.match(/[A-Z]/g);
                    numbers = p.match(/\d/g);
                    symbols = p.match(/[!#$%*~]+/g);
                    passwordLength = p.length;
                }
            },


            DisplayCheckmarks = function () {
                var count = scope.rules.length;
                var checkedCount = 0;
                for (var i = 0; i < count; i++) {
                    var rule = 'rule_' + scope.rules[i].id;

                    // Special characters
                    if (scope.rules[i].character == "s") {
                        if (symbols != null) {
                            document.getElementById(rule).style.visibility = 'visible';
                            checkedCount++;
                        }
                        else {
                            document.getElementById(rule).style.visibility = 'hidden';
                        }
                        continue;
                    }
                    // Upper case letters
                    if (scope.rules[i].character == "u") {
                        if (upper != null) {
                            document.getElementById(rule).style.visibility = 'visible';
                            checkedCount++;
                        }
                        else {
                            document.getElementById(rule).style.visibility = 'hidden';
                        }
                        continue;
                    }
                    // Numeric characters
                    if (scope.rules[i].character == "n") {
                        if (numbers != null) {
                            document.getElementById(rule).style.visibility = 'visible';
                            checkedCount++;
                        }
                        else {
                            document.getElementById(rule).style.visibility = 'hidden';
                        }
                        continue;
                    }
                    // Lower or Upper (alpha) case letters
                    if (scope.rules[i].character == "l") {
                        if (lower != null || upper != null) {
                            document.getElementById(rule).style.visibility = 'visible';
                            checkedCount++;
                        }
                        else {
                            document.getElementById(rule).style.visibility = 'hidden';
                        }
                        continue;
                    }
                    // Minimum password length
                    if (scope.rules[i].character == "g") {
                        if (passwordLength >= scope.rules[i].passwordLength) {
                            document.getElementById(rule).style.visibility = 'visible';
                            checkedCount++;
                        }
                        else {
                            document.getElementById(rule).style.visibility = 'hidden';
                        }
                        continue;
                    }

                    if (scope.rules[i].character == "r") {
                        // Can't contain user name
                        var password = new String(scope.pwd);
                        if ((scope.userName != "") && (scope.userName != undefined))
                            var userName = scope.userName;
                        else {
                            var userName = new String(scope.rules[i].userName);
                        }

                        if ((scope.pwd != "") && (scope.pwd != undefined)) {
                            var result = password.toLowerCase().indexOf(userName.toLowerCase());
                            if (result == -1) {
                                document.getElementById(rule).style.visibility = 'visible';
                                checkedCount++;
                            }
                            else {
                                document.getElementById(rule).style.visibility = 'hidden';
                            }
                        }
                        else {
                            document.getElementById(rule).style.visibility = 'hidden';
                        }

                        continue;
                    }

                }
                scope.isPasswordValid = (count == checkedCount);

            };


            scope.$watchCollection('[userName, pwd]', function (n, o) {
                if (n[0] != o[0] || n[1] != o[1]) {
                    CheckForRequiredChars(scope.pwd);
                    DisplayCheckmarks();
                }
            });

        },
    };
});

app.directive('wbxMemberAction', ['$window', '$http', '$location', '$q', function ($window, $http, $location, $q) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/MemberAction',
        scope: {
            selectedItem: '=',
            productLevelResults: '=?',
            openClose: '=',
            pageSource: '=',
            isCalendar: '=?',
            isAddedToRoster: '=?',
            isAddedToCalendar: '=?',
            closeMemberAction: '&?'
        },
        controller: ['$scope', function ($scope) {

            $scope.$watch('openClose', function (n, o) {
                if (n != o && n != null && n) {

                    $scope.evaluateStartClaimButtonForTherapy();

                    //open the dialog
                    $('#MemberAction' + $scope.MemberActionId + 'Dialog').modal({
                        backdrop: 'static'
                    })
                    $('#MemberAction' + $scope.MemberActionId + 'Dialog').modal('show');
                    $scope.openClose = false;
                }
            });

            $scope.modalActionClass = function (isMultiple) {
                //Determines the size of the modal action window depending if it's a single or multiple products.
                if (isMultiple)
                    return 'modal-lg';
                else
                    return '';
            }

            $scope.startClaimAuth = function (type, auth) {
                $('#MemberAction' + $scope.MemberActionId + 'Dialog').modal('hide');
                $http({
                    url: "/Welcome/SetHomePageData",
                    method: "PUT",
                    data: {
                        LOCATION_ID: $scope.selectedItem.LOCATION_ID,
                        PROVIDER_ID: $scope.selectedItem.PROVIDER_ID,
                        DATE_OF_SERVICE: $scope.selectedItem.DATE_OF_SERVICE,
                        SUBSCRIBER_ID: $scope.selectedItem.SUBSCRIBER_ID,
                        FIRST_NAME: $scope.selectedItem.FIRST_NAME,
                        LAST_NAME: $scope.selectedItem.LAST_NAME,
                        DOB: $scope.selectedItem.DOB,
                        DATA_SOURCE: $scope.pageSource,
                        MEMBER_ID: $scope.selectedItem.MEMBER_ID,
                        PRODUCT_ID: $scope.selectedItem.PRODUCT_ID,
                        INSURER_ID: $scope.selectedItem.INSURER_ID,
                        ENROLLEE_ID: $scope.selectedItem.ENROLLEE_ID,
                        AUTHORIZATION_NUMBER: auth != null ? auth.AUTHORIZATION_NUMBER : null
                    }
                }).then(function successCallback(response) {
                    if (!response.data.Status) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with setting homepage data.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                    }
                    else {
                        var index = $location.absUrl().indexOf("/PatientManagement");
                        var url = "";
                        if (index > 0) {
                            url = $location.absUrl().substr(0, index);
                        }
                        else {
                            url = $location.absUrl();
                        }

                        index = url.indexOf("#");
                        if (index > 0) {
                            url = url.substr(0, index);
                        }

                        if (type == 1) {
                            $window.location.href = url + '/ClaimEntry';
                        }
                        else {
                            $window.location.href = url + '/AuthEntry';
                        }
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with setting homepage data.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.closeMemberActionDialog = function () {
                $('#MemberAction' + $scope.MemberActionId + 'Dialog').modal('hide');
                $scope.closeMemberAction();
            }

            $scope.multiProductStartClaimAuth = function (productInfo, type) {
                $scope.selectedItem.SUBSCRIBER_ID = productInfo.SUBSCRIBER_ID;
                $scope.selectedItem.INSURER_ID = productInfo.INSURER_ID;
                $scope.selectedItem.PRODUCT_ID = productInfo.PRODUCT_ID;
                $scope.selectedItem.MEMBER_ID = productInfo.MEMBER_ID;
                $scope.startClaimAuth(type);
            }

            $scope.showEligibilityReport = function () {
                var sessionProperties = $scope.setSessionPropertiesForEligibilityReport();

                $scope.openTab("/Areas/PWP/Reports/PortalEligibility.aspx", sessionProperties);
            }

            $scope.setSessionPropertiesForEligibilityReport = function () {
                var sessionProperties = [];
                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_ELIGIBILITY_ENROLLEE_ID",
                    SESSION_VALUE: $scope.selectedItem.ENROLLEE_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_ELIGIBILITY_SUBSCRIBER_ID",
                    SESSION_VALUE: $scope.selectedItem.SUBSCRIBER_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_ELIGIBILITY_PROVIDER_ID",
                    SESSION_VALUE: $scope.selectedItem.PROVIDER_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_ELIGIBILITY_LOCATION_ID",
                    SESSION_VALUE: $scope.selectedItem.LOCATION_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_ELIGIBILITY_PRODUCT_ID",
                    SESSION_VALUE: $scope.selectedItem.PRODUCT_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_ELIGIBILITY_STATUS",
                    SESSION_VALUE: $scope.selectedItem.STATUS
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_ELIGIBILITY_DATE_OF_SERVICE",
                    SESSION_VALUE: $scope.selectedItem.DATE_OF_SERVICE
                }
                sessionProperties.push(sessionProperty);

                return sessionProperties;
            }

            $scope.multiProdutShowEligibilityReport = function (productInfo) {
                $scope.selectedItem.SUBSCRIBER_ID = productInfo.SUBSCRIBER_ID;
                $scope.selectedItem.PRODUCT_ID = productInfo.PRODUCT_ID;
                $scope.selectedItem.STATUS = productInfo.STATUS;
                $scope.showEligibilityReport();
            }

            $scope.showPortalBenefitSummaryReport = function () {
                var sessionProperties = $scope.setSessionPropertiesForPortalBenefitSummaryReport();

                $scope.openTab("/Areas/PWP/Reports/PortalBenefitSummaryReport.aspx", sessionProperties);
            }

            $scope.setSessionPropertiesForPortalBenefitSummaryReport = function () {
                var sessionProperties = [];
                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_BENEFIT_SUMMARY_DATE_OF_SERVICE",
                    SESSION_VALUE: $scope.selectedItem.DATE_OF_SERVICE
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_BENEFIT_SUMMARY_PRODUCT_ID",
                    SESSION_VALUE: $scope.selectedItem.PRODUCT_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_BENEFIT_SUMMARY_ENROLLEE_ID",
                    SESSION_VALUE: $scope.selectedItem.ENROLLEE_ID
                }
                sessionProperties.push(sessionProperty);

                return sessionProperties;
            }

            $scope.multiProductShowPortalBenefitSummaryReport = function (productInfo) {
                $scope.selectedItem.PRODUCT_ID = productInfo.PRODUCT_ID;
                $scope.showPortalBenefitSummaryReport();
            }

            $scope.showPatientHistory = function () {
                if ($scope.selectedItem.ENROLLEE_ID != null && $scope.selectedItem.SUBSCRIBER_ID.length > 0) {
                    var sessionProperties = [];
                    var sessionProperty = {
                        SESSION_NAME: "REPORT_SERVICE_HISTORY_ENROLLEE_ID",
                        SESSION_VALUE: $scope.selectedItem.ENROLLEE_ID
                    }
                    sessionProperties.push(sessionProperty);

                    var sessionProperty = {
                        SESSION_NAME: "REPORT_SERVICE_HISTORY_SUBSCRIBER_ID",
                        SESSION_VALUE: $scope.selectedItem.SUBSCRIBER_ID
                    }
                    sessionProperties.push(sessionProperty);

                    $scope.openTab("/Areas/PWP/Reports/ServiceHistory.aspx", sessionProperties);
                }
            }

            $scope.multiProdutShowPatientHistory = function (productInfo) {
                $scope.selectedItem.ENROLLEE_ID = productInfo.ENROLLEE_ID;
                $scope.selectedItem.SUBSCRIBER_ID = productInfo.SUBSCRIBER_ID;
                $scope.selectedItem.STATUS = productInfo.STATUS;
                $scope.showPatientHistory();
            }

            $scope.addToRoster = function (patient) {
                $http({
                    url: "/PatientManagement/AddMembers",
                    method: "PUT",
                    data: {
                        ROSTER_ID: null,
                        LOCATION_ID: patient.LOCATION_ID,
                        IS_LOCATION_ROSTER: true,
                        EnrolleeIds: patient.ENROLLEE_ID
                    }
                }).then(function successCallback(response) {
                    $scope.isAddedToRoster = (response.data.INSERTED_ROW_COUNT == 1);
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with adding member to roster.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.addToCalendar = function (patient) {
                $http({
                    url: "/PatientManagement/AddCalendarMembers/",
                    method: "PUT",
                    data: {
                        LOCATION_ID: patient.LOCATION_ID,
                        PROVIDER_ID: patient.PROVIDER_ID,
                        DATE_OF_SERVICE: patient.DATE_OF_SERVICE,
                        EnrolleeIds: patient.ENROLLEE_ID
                    }
                }).then(function successCallback(response) {
                    $scope.isAddedToCalendar = (response.data == 1);
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with adding member to calendar.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.addToPatientManagement = function (patient, product) {
                if (product != null) {
                    patient.INSURER_ID = product.INSURER_ID;
                    patient.INSURER_NAME = product.INSURER_NAME;
                    patient.MEMBER_ID = product.MEMBER_ID;
                    patient.PRODUCT_ID = product.PRODUCT_ID;
                    patient.PRODUCT_NAME = product.PRODUCT_NAME;
                    patient.ENROLLEE_ID = product.ENROLLEE_ID;
                }

                $scope.addToRoster(patient);
                $scope.addToCalendar(patient);
                //If this is called by Member on the fly, don't close the dialog after adding it to patient management.
                // We do show the banner in the dialog
                if ($scope.pageSource != 7) {
                    $('#MemberAction' + $scope.MemberActionId + 'Dialog').modal('hide');
                }
            }

            $scope.setSessionProperties = function (sessionProperties) {
                var deferred = $q.defer();

                $http({
                    url: "/WebSession/SetWebSessionProperties",
                    method: "PUT",
                    data: {
                        SESSION_PROPERTIES: sessionProperties
                    }
                }).then(function successCallback(response) {
                    if (!response.data.Status) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with setting web session properties.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        deferred.reject(false);
                    }
                    else {
                        deferred.resolve(true);
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with setting web session properties.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    deferred.reject(false);
                });

                return deferred.promise;
            }

            $scope.openTab = function (url, sessionProperties) {
                var randomno = Math.floor((Math.random() * 100) + 1);
                var newWindow = $window.open('', 'PopUpWindow' + randomno, 'scrollbars=1,menubar=0,resizable=1,width=920,height=850');

                var promise = $scope.setSessionProperties(sessionProperties);
                promise.then(function () {
                    newWindow.location = url;
                }, function (data) {
                    // bad, do nothing
                });
            }

            $scope.evaluateStartClaimButtonForTherapy = function () {
                var dateOfService = moment($scope.selectedItem.DATE_OF_SERVICE, "MM/DD/YYYY").startOf('day');
                var today = moment().startOf('day');
                $scope.IsFutureDate = (dateOfService > today);
            }

            $scope.showSelectedItemInfo = function () {
                console.log($scope.selectedItem);
            }
        }],
        link: function (scope, element, attr) {
            scope.MemberActionId = attr.name != null ? attr.name.replace(/ /g, "").replace(/-/g, "") : "";
        }
    };
}]);

app.directive('wbxEligibilityResults', ['$timeout', '$http', function ($timeout, $http)
{
    return {
        restrict: 'E',
        templateUrl: '/Templates/EligibilityResults',
        scope: {
            eligibilityResults: '=',
            dateOfService: '=',
            locationId: '=',
            locationName: '=',
            providerId: '=',
            providerName: '=',
            isVision: '=?',
            isTherapy: '=?',
            showMemberOnTheFlyRow: '=?',
            requestToCreateMember: '=?',
            requestToCreatePrimary: '=?',
            resultSelect: '&'
        },
        controller: ['$scope', function ($scope)
        {
            $scope.$watchCollection('eligibilityResults', function (n, o)
            {
                if (!(n === o) && n != null)
                {
                    if ($scope.isVision)
                    {
                        $scope.evaluateDateOfService();
                    }

                    if (!$scope.isVision && !$scope.isTherapy && $scope.eligibilityResults.length == 1)
                    {
                        //If it's vision, we don't want to click on select button immediately even though
                        // it's only one record since vision doesn't have a pop up action dialog.
                        // Vision goes to claim entry directly.
                        $scope.ResultSelect($scope.eligibilityResults[0]);
                    }

                    $timeout(function ()
                    {
                        $('html, body').animate({
                            scrollTop: $('#search-results').offset().top
                        }, 750);
                    }, 250);
                }
            });

            $scope.ResultSelect = function (result, isHoldMode)
            {
                $scope.selectedResult = angular.copy(result);
                $scope.selectedResult.DATE_OF_SERVICE = $scope.dateOfService;
                $scope.selectedResult.LOCATION_ID = $scope.locationId;
                $scope.selectedResult.LOCATION_NAME = $scope.locationName;
                $scope.selectedResult.PROVIDER_ID = $scope.providerId;
                $scope.selectedResult.PROVIDER_NAME = $scope.providerName;

                $scope.selectedResult.STATUS = result.STATUS;
                if (result.PRODUCTS != null && result.PRODUCTS.length > 1)
                {
                    $scope.productLevelResults = result.PRODUCTS;
                }
                else
                {
                    $scope.selectedResult.INSURER_ID = result.INSURER_ID;
                    $scope.selectedResult.INSURER_NAME = result.INSURER_NAME;
                    $scope.selectedResult.MEMBER_ID = result.MEMBER_ID;
                    $scope.selectedResult.PRODUCT_ID = result.PRODUCT_ID;
                    $scope.selectedResult.PRODUCT_NAME = result.PRODUCT_NAME;
                    $scope.productLevelResults = null;
                }
                if (!$scope.isVision)
                {
                    $scope.resultSelect({ selectedResult: $scope.selectedResult, productLevelResults: $scope.productLevelResults, visionInfo: null });
                }
                else
                {
                    $scope.visionInfo.IS_CLAIM_ENTRY_MODE = false;
                    $scope.visionInfo.IS_HOLD_MODE = isHoldMode;
                    $scope.visionInfo.PRICING_REQUEST_ID = $scope.selectedResult.PRICING_REQUEST_ID;

                    if ($scope.isPastDateOfService || $scope.isPresentDateOfService)
                    {
                        $scope.visionInfo.IS_CLAIM_ENTRY_MODE = true && !$scope.visionInfo.IS_HOLD_MODE;
                    }

                    if (result.PRICING_REQUEST_DATE != null && !$scope.visionInfo.IS_HOLD_MODE)
                    {
                        var pricingRequestDate = moment(result.PRICING_REQUEST_DATE, "MM/DD/YYYY").startOf('day');
                        var dateOfService = moment($scope.dateOfService, "MM/DD/YYYY").startOf('day');

                        if (dateOfService.toString() != pricingRequestDate.toString())
                        {
                            $('#VisionExistingPricingRequestDialog').modal({
                                backdrop: 'static'
                            })
                            $('#VisionExistingPricingRequestDialog').modal('show');
                            return;
                        }
                    }
                    else {
                        $scope.visionInfo.IsResume = false;
                    }

                    $scope.visionResultSelect();
                }
            }

            //Specific to vision - start
            $scope.visionInfo = {};

            $scope.visionResultSelect = function ()
            {
                $scope.ShowStartPricingRequestProcess = true;
                $scope.resultSelect({ selectedResult: $scope.selectedResult, productLevelResults: $scope.productLevelResults, visionInfo: $scope.visionInfo });
            }

            $scope.evaluateDateOfService = function ()
            {
                var dateOfService = moment($scope.dateOfService, "MM/DD/YYYY").startOf('day');
                var today = moment().startOf('day');
                $scope.isPastDateOfService = today > dateOfService;
                $scope.isPresentDateOfService = today.toString() == dateOfService.toString();
                $scope.isFutureDateOfService = today < dateOfService;
            }

            $scope.cancelExistingPricingRequestDialog = function ()
            {
                $('#VisionExistingPricingRequestDialog').modal('hide');
            }

            $scope.resumePricingRequest = function ()
            {
                $scope.selectedResult.DATE_OF_SERVICE = $scope.selectedResult.PRICING_REQUEST_DATE;
                $scope.visionInfo.IsResume = true;
                $scope.visionInfo.IS_CLAIM_ENTRY_MODE = true;
                $scope.visionResultSelect();
            }

            $scope.newPricingRequest = function ()
            {
                $scope.visionInfo.IsResume = false;
                $scope.ShowStartPricingRequestProcess = true;
                $http({
                    url: "/Vision/DeletePricingRequests",
                    method: "PUT",
                    data: {
                        ENROLLEE_ID: $scope.selectedResult.ENROLLEE_ID,
                        LOCATION_ID: $scope.selectedResult.LOCATION_ID,
                        PROVIDER_ID: $scope.selectedResult.PROVIDER_ID
                    }
                }).then(function successCallback(response) {
                    if (!response.data.Status) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with deleting pricing requests.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                    }
                    else {
                        $scope.visionInfo.PRICING_REQUEST_ID = null;
                        $scope.selectedResult.DATE_OF_SERVICE = $scope.dateOfService;
                        $scope.visionResultSelect();
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with deleting pricing requests.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });

            }
            //Specific to vision - end

            //Specific to therapy - start
            $scope.createMember = function () {
                $scope.requestToCreateMember = true;
            }

            //Specific to therapy - end

        }]
    };
}]);

app.directive('wbxCalendar', ['$filter', '$http', '$timeout', '$q', '$window', function ($filter, $http, $timeout, $q, $window) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/Calendar',
        scope: {
            currentDay: '=',
            calendarEvents: '=',
            inputInfo: '=',
            calendarActionInfo: '=',
            displayMemberAction: '=',
            displayMemberLevelResults: '=',
            selectedItem: '=',
            memberLevelResults: '=',
            productLevelResults: '=',
            isDragAndDropOn: '=',
            calendarControl: '=',
            addToCalendarDate: '=',
            isTherapy: '='
        },
        controller: ['$scope', function ($scope) {
            $scope.timer = null;
            $scope.view = 'month';
            $scope.openDay = {};
            //helper

            $scope.isISOWeek = function () {
                return moment().startOf('week').day() === 1;
            }

            $scope.eventIsInPeriod = function (dateOfService, date) {
                return moment(dateOfService, "MM/DD/YYYY").isSame(moment(date, "MM/DD/YYYY"));
            };

            $scope.getWeekDayNames = function (short) {
                var format = short ? 'EEE' : 'EEEE';

                var weekdays = [];
                var startDay = $scope.isISOWeek() ? 22 : 21;
                for (var i = 0; i <= 6; i++) {
                    weekdays.push($filter('date')(new Date(2014, 8, startDay + i), format));
                }
                return weekdays;

            };

            $scope.getMonthView = function (events, currentDay, useISOWeek) {

                var dateOffset = $scope.isISOWeek() ? 1 : 0;

                function getWeekDayIndex() {
                    var day = startOfMonth.day() - dateOffset;
                    if (day < 0) day = 6;
                    return day;
                }

                var startOfMonth = moment(new Date(currentDay)).startOf('month');
                var numberOfDaysInMonth = moment(new Date(currentDay)).endOf('month').date();

                var grid = [];
                var buildRow = new Array(7);
                var eventsWithIds = events.map(function (event, index) {
                    event.$id = index;
                    return event;
                });
                for (var i = 1; i <= numberOfDaysInMonth; i++) {

                    if (i == 1) {
                        var weekdayIndex = getWeekDayIndex(startOfMonth);
                        var prefillMonth = startOfMonth.clone();
                        while (weekdayIndex > 0) {
                            weekdayIndex--;
                            prefillMonth = prefillMonth.subtract(1, 'day');
                            buildRow[weekdayIndex] = {
                                label: prefillMonth.date(),
                                date: prefillMonth.clone(),
                                inMonth: false,
                                events: []
                            };
                        }
                    }

                    buildRow[getWeekDayIndex(startOfMonth)] = {
                        label: startOfMonth.date(),
                        inMonth: true,
                        isToday: moment().startOf('day').isSame(startOfMonth),
                        date: startOfMonth.clone(),
                        events: eventsWithIds.filter(function (event) {
                            return $scope.eventIsInPeriod(event.DATE_OF_SERVICE, startOfMonth.clone().startOf('day'));
                        })
                    };

                    if (i == numberOfDaysInMonth) {
                        var weekdayIndex = getWeekDayIndex(startOfMonth);
                        var postfillMonth = startOfMonth.clone();
                        while (weekdayIndex < 6) {
                            weekdayIndex++;
                            postfillMonth = postfillMonth.add(1, 'day');
                            buildRow[weekdayIndex] = {
                                label: postfillMonth.date(),
                                date: postfillMonth.clone(),
                                inMonth: false,
                                events: []
                            };
                        }
                    }

                    if (getWeekDayIndex(startOfMonth) === 6 || i == numberOfDaysInMonth) {
                        grid.push(buildRow);
                        buildRow = new Array(7);
                    }

                    startOfMonth = startOfMonth.add(1, 'day');

                }
                return grid;
            };

            $scope.toggleEventBreakdown = function (view, rowIndex, cellIndex) {

                var openEvents = [];
                var isCellOpened = view[rowIndex][cellIndex].isOpened;
                var selectedRowIndex = null;
                var selectedCellIndex = null;
                view = view.map(function (row) {
                    row.isOpened = false;
                    return row.map(function (cell) {
                        cell.isOpened = false;
                        return cell;
                    });
                });

                if (view[rowIndex][cellIndex].events.length > 0) {
                    view[rowIndex][cellIndex].isOpened = !isCellOpened;
                    view[rowIndex].isOpened = !isCellOpened;
                    if (view[rowIndex][cellIndex].isOpened) {
                        openEvents = view[rowIndex][cellIndex].events;
                        selectedRowIndex = rowIndex;
                        selectedCellIndex = cellIndex;
                    }
                    else {
                        openEvents = [];
                        selectedRowIndex = null;
                        selectedCellIndex = null;
                    }
                }
                return { view: view, openEvents: openEvents, selectedRowIndex: selectedRowIndex, selectedCellIndex: selectedCellIndex };
            };

            $scope.setNoProviderFlag = function () {
                //If provider dropdown list is set to all providers, we can't add to the calendar.
                $scope.calendarActionInfo.noProvider = true;
                //Close the info banner automatically in 3 seconds
                //$timeout.cancel($scope.timer);
                //$scope.timer = $timeout(function () {
                //    $scope.calendarActionInfo.noProvider = false;
                //}, 3000);
            }

            $scope.showMemberAction = function (selectedItem, productLevelResults) {
                $scope.displayMemberAction = true;
                $scope.selectedItem = selectedItem;
                $scope.productLevelResults = productLevelResults;

                $timeout.cancel($scope.timer);
                $scope.timer = $timeout(function () {
                    $scope.displayMemberAction = false;
                }, 1000);
            }

            $scope.showMemberLevelResults = function (memberLevelResults, DATE_OF_SERVICE) {
                $scope.memberLevelResults = memberLevelResults;
                $scope.memberLevelResults.DATE_OF_SERVICE = DATE_OF_SERVICE;
                $scope.displayMemberLevelResults = true;

                $timeout.cancel($scope.timer);
                $scope.timer = $timeout(function () {
                    $scope.displayMemberLevelResults = false;
                }, 1000);
            }

            $scope.updateView = function () {
                if ($scope.calendarEvents != null) {
                    $scope.calendarView = $scope.getMonthView($scope.calendarEvents, $scope.currentDay, $scope.useIsoWeek);
                    
                    //if (!$scope.hasTodayOpened) {
                        //$scope.calendarView.forEach(function (week, rowIndex) {
                        //    week.forEach(function (day, cellIndex) {
                        //        if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date.startOf('day'))) {
                        //            //console.log("updateView");
                        //            $scope.dayClicked(rowIndex, cellIndex);
                        //            //$scope.hasTodayOpened = true;
                        //        }
                        //    });
                        //});
                    //}
                }
            }

            $scope.updateDayView = function () {
                if ($scope.openDay.rowIndex != null && $scope.openDay.cellIndex != null &&
                    (($scope.openDay.rowIndex != $scope.selectedRowIndex) ||
                     ($scope.openDay.cellIndex != $scope.selectedCellIndex))) {
                    $scope.dayClicked($scope.openDay.rowIndex, $scope.openDay.cellIndex);
                }
            }

            $scope.$watchCollection('[openDay.rowIndex, openDay.cellIndex]', $scope.updateDayView);
            //$scope.$watch('currentDay', $scope.updateDayView);
            $scope.$watch('calendarEvents', $scope.updateView);

            $scope.weekDays = $scope.getWeekDayNames(true);

            $scope.dayClicked = function (rowIndex, cellIndex) {
                var handler = $scope.toggleEventBreakdown($scope.calendarView, rowIndex, cellIndex);
                $scope.calendarView = handler.view;
                $scope.openEvents = handler.openEvents;

                $scope.openEvents.calendarMemberSearchText = '';
                $scope.openEvents.sortColumn = 'LAST_NAME';
                $scope.openEvents.reverse = false;

                $scope.selectedRowIndex = handler.selectedRowIndex;
                $scope.selectedCellIndex = handler.selectedCellIndex;

                $scope.currentDay = $filter('date')($scope.calendarView[rowIndex][cellIndex].date._d, 'MM/dd/yyyy');
                $scope.addToCalendarDate = $scope.currentDay;
            };

            //end helper
            $scope.calendarControl.dropCallBack = function (item, targetDate, updateView) {
                var targetRowIndex = null;
                var targetCellIndex = null;

                if (updateView) {
                    $scope.calendarView = $scope.getMonthView($scope.calendarEvents, $scope.currentDay, $scope.useIsoWeek);
                }

                angular.forEach($scope.calendarView, function (week, rowIndex) {
                    angular.forEach(week, function (day, cellIndex) {
                        if (day.inMonth && moment(new Date(targetDate)).startOf('day').isSame(day.date.startOf('day'))) {
                            targetRowIndex = rowIndex;
                            targetCellIndex = cellIndex;
                        }
                    });
                });

                $scope.calendarDropCallback(item, targetRowIndex, targetCellIndex);
            }

            //DropDown
            $scope.calendarDropCallback = function (item, rowIndex, cellIndex) {
                if (item.DATE_OF_SERVICE == $filter('date')($scope.calendarView[rowIndex][cellIndex].date._d, 'MM/dd/yyyy')) {
                    //Won't allow dropping in the same bucket.
                    return false;
                }
                else if ($scope.inputInfo.PROVIDER_ID == -1) {
                    //Provider drop down isn't selected
                    $scope.setNoProviderFlag();
                    return false;
                }

                var itemAlreadyAdded = false;
                var potentialOpenEvents = $scope.calendarView[rowIndex][cellIndex].events;
                
                if (potentialOpenEvents.length > 0) {
                    angular.forEach(potentialOpenEvents, function (value, key) {
                        if (value.LAST_NAME == item.LAST_NAME &&
                            value.FIRST_NAME == item.FIRST_NAME &&
                            value.DOB == item.DOB) {
                            itemAlreadyAdded = true;
                        }
                    });
                }

                if (!itemAlreadyAdded) {
                    item.bucketIndex = null;
                    $scope.addCalendarMembers(item, rowIndex, cellIndex);
                }
                else {
                    $scope.actionStatus(null, 0, 1, rowIndex, cellIndex);
                }

                return false;
            };

            $scope.calendarEventsDropCallback = function (item) {
                if (item.DATE_OF_SERVICE == $filter('date')($scope.calendarView[$scope.selectedRowIndex][$scope.selectedCellIndex].date._d, 'MM/dd/yyyy')) {
                    //Won't allow dropping in the same bucket.
                    return false;
                }
                else if ($scope.inputInfo.PROVIDER_ID == -1) {
                    $scope.setNoProviderFlag();
                    return false;
                }

                if ($scope.selectedRowIndex == null || $scope.selectedCellIndex == null) {
                    return false;
                }

                var itemAlreadyAdded = false;
                $scope.openEvents = $scope.calendarView[$scope.selectedRowIndex][$scope.selectedCellIndex].events;

                if ($scope.openEvents.length > 0) {
                    angular.forEach($scope.openEvents, function (value, key) {
                        if (value.LAST_NAME == item.LAST_NAME &&
                            value.FIRST_NAME == item.FIRST_NAME &&
                            value.DOB == item.DOB) {
                            itemAlreadyAdded = true;
                        }
                    });
                }
                if (!itemAlreadyAdded) {
                    item.bucketIndex = null;
                    $scope.addCalendarMembers(item, $scope.selectedRowIndex, $scope.selectedCellIndex);
                }
                else {
                    $scope.actionStatus(null, 0, 1, $scope.selectedRowIndex, $scope.selectedCellIndex);
                }
                return false;
            };

            $scope.addCalendarMembers = function (item, rowIndex, cellIndex) {
                var addedMembersList = [];
                item.LOCATION_ID = $scope.inputInfo.LOCATION_ID;
                item.LOCATION_NAME = $scope.inputInfo.selectedLocation.NAME;

                item.PROVIDER_ID = $scope.inputInfo.PROVIDER_ID;
                item.PROVIDER_NAME = $scope.inputInfo.selectedProvider.NAME;

                item.DATE_OF_SERVICE = $filter('date')($scope.calendarView[rowIndex][cellIndex].date._d, 'MM/dd/yyyy');
                addedMembersList.push(item);

                //Construct a string of enrollee Ids.
                var enrolleeIds = '';
                angular.forEach(addedMembersList, function (value, key) {
                    if (enrolleeIds != "")
                        enrolleeIds += "|"
                    enrolleeIds += value.ENROLLEE_ID;
                });

                $http({
                    url: "/PatientManagement/AddCalendarMembers/",
                    method: "PUT",
                    data: {
                        LOCATION_ID: $scope.inputInfo.LOCATION_ID,
                        PROVIDER_ID: $scope.inputInfo.PROVIDER_ID,
                        DATE_OF_SERVICE: item.DATE_OF_SERVICE,
                        EnrolleeIds: enrolleeIds
                    }
                }).then(function successCallback(response) {
                    $scope.actionStatus(addedMembersList, response.data, 1 - response.data, rowIndex, cellIndex);
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with adding member to calendar.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.actionStatus = function (addedMembersList, addedCount, existCount, rowIndex, cellIndex) {
                $scope.calendarActionInfo.addedCount = addedCount;
                $scope.calendarActionInfo.existCount = existCount;
                $scope.calendarActionInfo.addedDate = $filter('date')($scope.calendarView[rowIndex][cellIndex].date._d, 'MM/dd/yyyy');

                if (addedCount > 0 && addedMembersList != null && addedMembersList.length > 0) {
                    $scope.openDay = { rowIndex: rowIndex, cellIndex: cellIndex };
                    angular.forEach(addedMembersList, function (addedMember, key) {
                        $scope.calendarView[rowIndex][cellIndex].events.push(addedMember);
                    });
                }

                $timeout.cancel($scope.timer);
                //Close the info banner automatically in 3 seconds
                $scope.timer = $timeout(function () {
                    $scope.calendarActionInfo.addedCount = 0;
                    $scope.calendarActionInfo.existCount = 0;
                    $scope.calendarActionInfo.addedDate = null;
                }, 3000);

            }

            $scope.deleteCalendarMembers = function (patient) {
                $http({
                    url: "/PatientManagement/DeleteCalendarMembers",
                    method: "PUT",
                    data: {
                        LOCATION_ID: patient.LOCATION_ID,
                        PROVIDER_ID: patient.PROVIDER_ID,
                        DATE_OF_SERVICE: patient.DATE_OF_SERVICE,
                        EnrolleeIds: patient.ENROLLEE_ID
                    }
                }).then(function successCallback(response) {
                    var index = $scope.openEvents.indexOf(patient);
                    $scope.openEvents.splice(index, 1);
                    if ($scope.openEvents.length <= 0) {
                        $scope.dayClicked($scope.selectedRowIndex, $scope.selectedCellIndex);
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with deleting member from calendar.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.sort = function (columnName) {
                if ($scope.openEvents.sortColumn != columnName)
                    $scope.openEvents.reverse = false;
                else
                    $scope.openEvents.reverse = !$scope.openEvents.reverse;
                $scope.openEvents.sortColumn = columnName;
            }

            $scope.select = function (patient) {
                $scope.selectedItem = null;
                $scope.productLevelResults = null;
                $scope.memberLevelResults = null;
                
                $http({
                    cache: false,
                    url: "/Welcome/MemberEligibilitySearch/",
                    method: "POST",
                    data: {
                        LAST_NAME: patient.LAST_NAME,
                        FIRST_NAME: patient.FIRST_NAME,
                        DOB: patient.DOB,
                        SUBSCRIBER_ID: null,
                        DATE_OF_SERVICE: patient.DATE_OF_SERVICE,
                        LOCATION_ID: patient.LOCATION_ID,
                        PROVIDER_ID: patient.PROVIDER_ID,
                        SSN: null,
                        ENROLLEE_ID: $scope.isTherapy ? patient.ENROLLEE_ID : null,
                        Log: false
                    }
                }).then(function successCallback(response) {
                    if (response.data.length == 1) {
                        var result = response.data[0];
                        result.PROVIDER_ID = patient.PROVIDER_ID;
                        result.PROVIDER_NAME = patient.PROVIDER_NAME;
                        result.LOCATION_ID = patient.LOCATION_ID;
                        result.LOCATION_NAME = patient.LOCATION_NAME;
                        result.DATE_OF_SERVICE = patient.DATE_OF_SERVICE;

                        //result.STATUS = response.data.STATUS;
                        if (result.PRODUCTS != null && result.PRODUCTS.length > 1) {
                            $scope.productLevelResults = result.PRODUCTS;
                        }
                        else {
                            result.INSURER_ID = result.INSURER_ID;
                            result.INSURER_NAME = result.INSURER_NAME;
                            result.MEMBER_ID = result.MEMBER_ID;
                            result.PRODUCT_ID = result.PRODUCT_ID;
                            result.PRODUCT_NAME = result.PRODUCT_NAME;
                            $scope.productLevelResults = null;
                        }

                        $scope.showMemberAction(result, $scope.productLevelResults);
                    }
                    else {
                        $scope.showMemberLevelResults(response.data, patient.DATE_OF_SERVICE);
                    }

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with deleting member from calendar.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }
            //end DropDown

            $scope.verifyEligibilityBulk = function () {
                $scope.showBulkLoading = true;

                $http({
                    method: 'POST',
                    url: '/PatientManagement/VerifyEligibilityBulk',
                    params: {
                        LOCATION_ID: $scope.inputInfo.LOCATION_ID,
                        DATE_OF_SERVICE: $filter('date')($scope.calendarView[$scope.selectedRowIndex][$scope.selectedCellIndex].date._d, 'MM/dd/yyyy')
                    }
                }).then(function successCallback(response) {
                    $scope.showBulkLoading = false;

                    if (response.data.length > 0) {
                        angular.forEach($scope.openEvents, function (openEvent, value) {
                            angular.forEach(response.data, function (elig, value) {
                                if (openEvent.LAST_NAME == elig.LAST_NAME &&
                                    openEvent.FIRST_NAME == elig.FIRST_NAME &&
                                    openEvent.DOB == elig.DOB) {
                                    if (elig.ENROLLEE_COUNT > 1) {
                                        openEvent.STATUS = 3;
                                    }
                                    else {
                                        openEvent.STATUS = elig.STATUS;
                                    }
                                }
                            });
                        });
                    }
                    else {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with bulk verifying eligibility.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with bulk verifying eligibility.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.openTab = function (url, sessionProperties, isExportToExcel) {
                var randomno = Math.floor((Math.random() * 100) + 1);
                var newWindow;
                if (isExportToExcel) {
                    newWindow = $window.open('');
                }
                else {
                    newWindow = $window.open('', 'PopUpWindow' + randomno, 'scrollbars=1,menubar=0,resizable=1,width=920,height=850');
                }

                var promise = $scope.setSessionProperties(sessionProperties);
                promise.then(function () {
                    newWindow.location = url;
                }, function (data) {
                    // bad, do nothing
                });
            }

            $scope.printCalendarRoster = function (isExportToExcel) {
                var dateOfService = $filter('date')($scope.calendarView[$scope.selectedRowIndex][$scope.selectedCellIndex].date._d, 'MM/dd/yyyy');
                
                var sessionProperties = [];
                var sessionProperty = {
                    SESSION_NAME: 'REPORT_PATIENT_CALENDAR_ROSTER_LOCATION_ID',
                    SESSION_VALUE: $scope.inputInfo.LOCATION_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: 'REPORT_PATIENT_CALENDAR_ROSTER_PROVIDER_ID',
                    SESSION_VALUE: $scope.inputInfo.PROVIDER_ID != -1 ? $scope.inputInfo.PROVIDER_ID : ""
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: 'REPORT_PATIENT_CALENDAR_ROSTER_DATE_OF_SERVICE',
                    SESSION_VALUE: dateOfService
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: 'REPORT_PATIENT_CALENDAR_ROSTER_IS_EXCEL',
                    SESSION_VALUE: isExportToExcel
                }
                sessionProperties.push(sessionProperty);

                $scope.openTab("/Areas/PWP/Reports/PatientCalendarRoster.aspx", sessionProperties, isExportToExcel);
            }

            $scope.setSessionProperties = function (sessionProperties) {
                var deferred = $q.defer();

                $http({
                    url: "/WebSession/SetWebSessionProperties",
                    method: "PUT",
                    data: {
                        SESSION_PROPERTIES: sessionProperties
                    }
                }).then(function successCallback(response) {
                    if (!response.data.Status) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with setting web session properties.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        deferred.reject(false);
                    }
                    else {
                        deferred.resolve(true);
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with setting web session properties.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    deferred.reject(false);
                });

                return deferred.promise;
            }
        }]
    };
}]);

app.directive('wbxAddressFields', ['$http', '$timeout', function ($http, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/AddressFields',
        require: '^form',
        scope: {
            data: '=',
            control: '=',
            formType: '=?',
            stateList: '=?'
        },
        controller: ['$scope', function ($scope) {
        }],
        link: function (scope, element, attr, formController) {
            scope.address_form = formController;
            scope.control = scope.control || {};

            scope.control.populateStateList = function () {
                if (scope.stateList == null) {
                    scope.LoadingStateList = true;
                    $http({
                        method: 'GET',
                        url: '/PortalDropList/GetStates'
                    }).then(function successCallback(response) {
                        scope.stateList = response.data;
                        scope.LoadingStateList = false;
                    }, function errorCallback(response) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with populating state dropdown.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        scope.LoadingStateList = false;
                    });
                }
            }
        }
    };
}]);

//TODO: Remove this. But we have to take care of the vision contacts alternate shipping first.
//Make sure to remove all the .cs methods if they are not used anymore. ie: DropList/GetLanguages
app.directive('wbxPayeeLocationForm', ['$http', '$timeout', function ($http, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/PayeeLocationForm',
        scope: {
            data: '=',
            formType: '=',
            isVision: '=?',
            cancelButton: '&',
            submitButton: '&'
        },
        controller: ['$scope', function ($scope) {
            $scope.init = function () {
                $scope.populateStateList();
            }

            $scope.populateStateList = function () {
                $scope.stateList = null;
                $http({
                    method: 'GET',
                    url: '/PortalDropList/GetStates'
                }).then(function successCallback(response) {
                    $scope.stateList = response.data;
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating state dropdown.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.submit = function () {
                if ($scope.payee_location_form.$invalid) {
                    return false;
                }
                $scope.payee_location_form.$setPristine();

                if ($scope.isVision && $scope.formType != 'shipping') {
                    //Convert location hours
                    $scope.data.LOCATION_HOURS = [];
                    _.each($scope.data.HOURS, function (obj, idx) {
                        $scope.data.LOCATION_HOURS.push({ DAY: idx, HR_END1: obj.HR_END1, HR_END2: obj.HR_END2, HR_START1: obj.HR_START1, HR_START2: obj.HR_START2 });
                    });
                }

                $scope.submitButton({ data: $scope.data });
            }

            $scope.cancel = function () {
                //If it's not a valid email, it has to be explicitly cleared because 
                // angular doesn't bind until the value is valid.
                //In this case, if it's not a valid email, angular doesn't bind it and 
                // it's not automatically cleared.
                if ($scope.payee_location_form.emailTextBox.$invalid) {
                    $('#emailTextBox')[0].value = "";
                }

                $scope.payee_location_form.$setPristine();
                $scope.cancelButton();
            }

            $scope.remove = function () {
                $scope.payee_location_form.$setPristine();
                $scope.submitButton({ data: null });
            }

            $scope.getLanguages = function () {
                $scope.loadingLanguagesDropDown = true;
                $http({
                    method: 'GET',
                    url: '/DropList/GetLanguages'
                }).then(function successCallback(response) {
                    $scope.loadingLanguagesDropDown = false;
                    $scope.languageList = response.data;
                    $scope.setSelect2_Language();
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating language dropdown.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    $scope.loadingLanguagesDropDown = false;
                });
            }

            $scope.setSelect2_Language = function () {
                $(".wbx-select2-language").select2();
            }

            $scope.$watchCollection('isVision + formType', function (n, o) {
                if ($scope.isVision && $scope.formType == 'location' && $scope.formType != 'shipping') {
                    $scope.getLanguages();
                }
            });

            $scope.$watchCollection('data.LANGUAGES', function (n, o) {
                $timeout(function () {
                    $scope.setSelect2_Language();
                }, 100);
            });
        }]
    };
}]);

app.directive('wbxProviderForm', ['$http', '$timeout', function ($http, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/ProviderForm',
        scope: {
            providerData: '=',
            isVision: '=',
            cancelButton: '&',
            submitButton: '&'
        },
        controller: ['$scope', function ($scope) {
            $scope.submit = function () {
                if ($scope.provider_form.$invalid) {
                    return false;
                }
                $scope.provider_form.$setPristine();
                $scope.submitButton({ data: $scope.providerData });
            }

            $scope.cancel = function () {
                //If it's not a valid email, it has to be explicitly cleared because 
                // angular doesn't bind until the value is valid.
                //In this case, if it's not a valid email, angular doesn't bind it and 
                // it's not automatically cleared.
                if ($scope.provider_form.emailTextBox.$invalid) {
                    $('#emailTextBox')[0].value = "";
                }

                $scope.provider_form.$setPristine();
                $scope.cancelButton();
            }

            $scope.getSpecialties = function () {
                $scope.loadingSpecialtiesDropDown = true;
                $http({
                    method: 'GET',
                    url: '/DropList/GetSpecialties'
                }).then(function successCallback(response) {
                    $scope.loadingSpecialtiesDropDown = false;
                    $scope.specialtyList = response.data;
                    $scope.setSelect2_Specialty();
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating specialty dropdown.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    $scope.loadingSpecialtiesDropDown = false;
                });
            }

            $scope.setSelect2_Specialty = function () {
                $(".wbx-select2-specialty").select2({ tags: true });
            }

            $scope.$watch('isVision', function (n, o) {
                if (n) {
                    $scope.getSpecialties();
                }
            });

            $scope.$watchCollection('providerData.SPECIALTIES', function (n, o) {
                $timeout(function () {
                    $scope.setSelect2_Specialty();
                }, 100);
            });

        }]
    };
}]);

app.directive('wbxOfficeContactFormDialog', ['$http', '$timeout', function ($http, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/OfficeContactFormDialog',
        scope: {
            control: '=',
            officeContactData: '=',
            isEdit: '=',
            submitButton: '&',
            cancelButton: '&?'
        },
        controller: ['$scope', function ($scope) {
            $scope.submit = function () {
                if ($scope.office_contact_form.$invalid) {
                    return false;
                }

                $scope.ShowCreatingOfficeContactProcessingMsg = true;

                //If it's an empty string, store as NULL in the database
                if ($scope.officeContactData.EMAIL != null && $scope.officeContactData.EMAIL.trim() == '') {
                    $scope.officeContactData.EMAIL = null;
                }

                if (!$scope.isEdit) {
                    //Create
                    $http({
                        url: "/EntityManagement/CreateOfficeContact",
                        method: "PUT",
                        data: {
                            LOCATION_ID: $scope.officeContactData.LOCATION_ID,
                            DESCRIPTION: $scope.officeContactData.DESCRIPTION,
                            FIRST_NAME: $scope.officeContactData.FIRST_NAME,
                            LAST_NAME: $scope.officeContactData.LAST_NAME,
                            VOICE_PHONE: $scope.officeContactData.VOICE_PHONE,
                            FAX_PHONE: $scope.officeContactData.FAX_PHONE,
                            EMAIL: $scope.officeContactData.EMAIL
                        }
                    }).then(function successCallback(response) {
                        $scope.ShowCreatingOfficeContactProcessingMsg = false;
                        if (!response.data.Status) {
                            console.error(response.data.Message);
                            console.error(response);
                            if ($scope.ExceptionDialogControl != null) {
                                $scope.ExceptionDialogControl.showDialog("Error with creating office contact.");
                            }
                            else {
                                bootbox.alert(response.data.Message);
                            }
                        }
                        else {
                            $scope.officeContactData.OFFICE_CONTACT_ID = response.data.Data.OFFICE_CONTACT_ID;
                            $scope.control.hideDialog();
                        }
                        $scope.submitButton({ data: $scope.officeContactData });
                    }, function errorCallback(response) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with creating office contact.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        $scope.ShowCreatingOfficeContactProcessingMsg = false;
                    });
                }
                else {
                    //Edit
                    $http({
                        url: "/EntityManagement/UpdateOfficeContact",
                        method: "PUT",
                        data: {
                            OFFICE_CONTACT_ID: $scope.officeContactData.OFFICE_CONTACT_ID,
                            DESCRIPTION: $scope.officeContactData.DESCRIPTION,
                            FIRST_NAME: $scope.officeContactData.FIRST_NAME,
                            LAST_NAME: $scope.officeContactData.LAST_NAME,
                            VOICE_PHONE: $scope.officeContactData.VOICE_PHONE,
                            FAX_PHONE: $scope.officeContactData.FAX_PHONE,
                            EMAIL: $scope.officeContactData.EMAIL
                        }
                    }).then(function successCallback(response) {
                        $scope.ShowCreatingOfficeContactProcessingMsg = false;
                        if (!response.data.Status) {
                            console.error(response.data.Message);
                            console.error(response);
                            if ($scope.ExceptionDialogControl != null) {
                                $scope.ExceptionDialogControl.showDialog("Error with updating office contact.");
                            }
                            else {
                                bootbox.alert(response.data.Message);
                            }
                        }
                        else {
                            $scope.control.hideDialog();
                        }

                        $scope.submitButton({ data: $scope.officeContactData });
                    }, function errorCallback(response) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with updating office contact.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        $scope.ShowCreatingOfficeContactProcessingMsg = false;
                    });
                }

                $scope.office_contact_form.$setPristine();
            }

            $scope.cancel = function () {
                //If it's not a valid email, it has to be explicitly cleared because 
                // angular doesn't bind until the value is valid.
                //In this case, if it's not a valid email, angular doesn't bind it and 
                // it's not automatically cleared.
                if ($scope.office_contact_form.emailTextBox.$invalid) {
                    $('#emailTextBox')[0].value = "";
                }

                $scope.ShowCreatingOfficeContactProcessingMsg = false;
                $scope.office_contact_form.$setPristine();
                $scope.control.hideDialog();
                if ($scope.cancelButton != null) {
                    $scope.cancelButton();
                }
            }
        }],
        link: function (scope, element, attr) {
            scope.control = scope.control || {};
            scope.control.showDialog = function () {
                $('#office-contact-dialog').modal({
                    backdrop: 'static'
                });
                $('#office-contact-dialog').modal('show');
            };

            scope.control.hideDialog = function () {
                $('#office-contact-dialog').modal('hide');
            };
        }
    };
}]);

app.directive('wbxSelectGroupDialog', ['$http', '$timeout', '$window', function ($http, $timeout, $window) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/SelectGroupDialog',
        scope: {
            selectgroupData: '=',
            alerts: '=',
            alertMessages: '=',
            openClose: '=',
            redirect: '=',
            cancelButton: '&',
            submitButton: '&'
        },
        controller: ['$scope', function ($scope) {
            $scope.submit = function () {
                if ($scope.selectgroup_form.$invalid) {
                    return false;
                }
                $scope.selectgroup_form.$setPristine();
                $scope.submitButton({ data: $scope.selectgroupData });
            }

            $scope.cancel = function () {
                //console.log("shared directive cancel()");
                //// prevent cancel
                //$scope.selectgroup_form.$setPristine();
                //$scope.cancelButton();
            }

            $scope.setgroup = function (groupId, planId) {
                //console.log("User selected group: " + groupId + " planId: " + planId + " reload: " + $scope.reload);
                $timeout(function () {
                    $http({
                        method: 'PUT',
                        url: '/MWP/EnrollmentSummary/SetGroup',
                        params: {
                            groupId: groupId
                            ,planId: planId
                        }
                    }).success(function (data) {
                        $scope.cancel();
                        $scope.openClose = false;
                        //if ($scope.url != null && $scope.url != "") {
                        //    $window.location.reload();
                        //    //console.log("set - reload");
                        //}
                        //else
                        //{
                        //    $scope.reload = true;
                        //}
                        if ($scope.redirect != "") {
                            //console.log("redirecting: " +$scope.redirect)
                            $window.location = $scope.redirect;
                        }

                    }).error(function (data, status, headers, config) {
                        bootbox.alert(data);
                    });
                });

            }

            $('#selectgroup-dialog').on('hide.bs.modal', function () {
                //console.log("selectgroup-dialog hide.bs.modal");
                //$scope.cancel();
                //$scope.openClose = false;
            });

            $scope.$watch('selectgroupData.ENROLLEE_ID', function (n, o) {
                $timeout(function () {
                    if ($scope.openClose) {
                        //$http({
                        //    method: 'GET',
                        //    url: '/MWP/EnrollmentSummary/GetGroups',
                        //}).success(function (data) {
                        //    $scope.groupsList = data;
                        //}).error(function (data, status, headers, config) {
                        //    bootbox.alert(data);
                        //});
                    }
                });
            });

            $scope.$watch('selectgroup_form.$pristine', function (n, o) {
                if (n != o && !n) {
                    $scope.alerts = {};
                    $scope.alertMessages = {};
                }
            });

            $scope.$watch('openClose', function (n, o) {
                if (n != null) {
                    if (n) {
                        //console.log("open select dialog" + n);
                        //open the dialog
                        $('#selectgroup-dialog').modal({
                            keyboard: false,
                            backdrop: 'static'
                        })

                        // get group information
                        $http({
                            method: 'GET',
                            url: '/MWP/EnrollmentSummary/GetGroups',
                        }).success(function (data) {
                            $scope.groupsList = data;
                        }).error(function (data, status, headers, config) {
                            bootbox.alert(data);
                        });

                        $('#selectgroup-dialog').modal('show');
                    }
                    else {
                        $('#selectgroup-dialog').modal('hide');
                        //console.log("return url:" + $scope.returnUrl)
                        //if ($scope.returnUrl != null) {
                        //    scope.$apply(function () { $location.path($scope.returnUrl); });
                        //}
                    }
                }
            });
        }]
    };
}]);

app.directive('wbxLoginPinPasswordExpired', ['$http','$window','$timeout', function ($http, $window, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/LoginPinPasswordExpired',
        scope: {
            sessionInfo:'=?'
        },
        controller: ['$scope', function ($scope) {
            $scope.pinInfo = {};
            $scope.passwordInfo = {};

            $scope.showPIN = false;
            $scope.showExpiredPassword = false;
            $scope.modalCloseDueToSuccess = false;
            $scope.isPasswordValid = false;

            $scope.init = function () {
                if ($scope.sessionInfo == null) {
                $scope.getSessionInfo();
            }
                else {
                    $scope.populateSessionInfo($scope.sessionInfo);
                }
            }

            $scope.getSessionInfo = function () {
                $http({
                    method: 'GET',
                    url: '/Account/GetSessionInfo'
                }).then(function successCallback(response) {
                    $scope.populateSessionInfo(response.data);
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with getting session info.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.populateSessionInfo = function (sessionInfo) {
                $scope.isCreatePin = sessionInfo.IS_CREATE_PIN;
                $scope.isPasswordExpired = sessionInfo.IS_PASSWORD_EXPIRED;
                $scope.showPasswordAboutToExpire = sessionInfo.IS_PASSWORD_ABOUT_TO_EXPIRE;
                $scope.daysPasswordAboutToExpire = sessionInfo.DAYS_PASSWORD_ABOUT_TO_EXPIRE;

                    if ($scope.isCreatePin) {
                        $('#ExpiredPinPasswordDialog').on('shown.bs.modal', function () {
                            $('#PINTextBox').select();
                        })
                        $scope.showPIN = true;
                        $scope.showExpiredPassword = false;
                        $scope.showModal();
                    }
                    else if ($scope.isPasswordExpired) {
                    $scope.passwordInfo = {};
                    $scope.getUserName();
                        $('#ExpiredPinPasswordDialog').on('shown.bs.modal', function () {
                            $('#CurrentPasswordTextBox').select();
                        })
                        $scope.showPIN = false;
                        $scope.showExpiredPassword = true;
                        $scope.showModal();
                    }
                    else {
                        $scope.showPIN = false;
                        $scope.showExpiredPassword = false;
                    }
            }

            $scope.getUserName = function () {
                $http({
                    method: 'GET',
                    url: '/AccountManagement/GetUserName'
                }).then(function successCallback(response) {
                    if (response.data != null) {
                        $scope.userDetails = 
                        {
                            USER_NAME: response.data
                        };
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with getting user name.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.showModal = function () {
                $('#ExpiredPinPasswordDialog').modal({
                    backdrop: 'static'
                })
                $('#ExpiredPinPasswordDialog').modal('show');
            }

            $scope.closeModalFromUI = function () {
                $('#ExpiredPinPasswordDialog').modal('hide');
            }

            $('#ExpiredPinPasswordDialog').on('hidden.bs.modal', function () {
                if ($scope.modalCloseDueToSuccess) {
                    if ($scope.create_pin_form != null) {
                    $scope.create_pin_form.$setPristine();
                    }
                    if ($scope.create_password_form != null) {
                        $scope.create_password_form.$setPristine();
                }
                }
                else {
                    $scope.logOff();
                }
                $scope.modalCloseDueToSuccess = false;
            })

            $scope.logOff = function () {
                $http({
                    method: 'GET',
                    url: '/Account/LogOffJson'
                }).then(function successCallback(response) {
                    if (response.data != null) {
                        $window.location.href = response.data.URL;
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with logging off.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            //Password about to expire
            $scope.closePasswordAboutToExpireAlert = function () {
                $scope.showPasswordAboutToExpire = false;
                $scope.daysPasswordAboutToExpire = null;
            }

            $scope.routeToChangePassword = function () {
                $window.location.href = '/AccountManagement#/Password';
            }

            //End Password about to expire

            //PIN
            $scope.createPIN = function () {
                if ($scope.create_pin_form.$invalid) {
                    return false;
                }
                $http({
                    url: '/Account/CreatePIN',
                    method: 'PUT',
                    data: {
                        NEW_PIN: $scope.pinInfo.newPIN
                    }
                }).then(function successCallback(response) {
                    if (response.data.error) {
                        $scope.showUnsuccessfulPINCreate = true;
                        $scope.pinCreateMessage = response.data.message.replace(/ <br \/>/g, "");
                    }
                    else {
                        if (!$scope.isPasswordExpired) {
                            $scope.modalCloseDueToSuccess = true;
                            $('#ExpiredPinPasswordDialog').modal('hide');
                        }
                        else {
                            $scope.showPIN = false;
                            $scope.showExpiredPassword = true;
                            $timeout(function () {
                                $('#CurrentPasswordTextBox').select();
                            });
                        }
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with creating PIN.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.closeUnsuccessfulPINCreateAlert = function () {
                $scope.showUnsuccessfulPINCreate = false;
            }

            $scope.cancelCreatePIN = function () {
                $scope.pinInfo = {};
                $scope.showUnsuccessfulPINCreate = false;
                $scope.pinCreateMessage = "";
                $scope.create_pin_form.$setPristine();
            }

            $scope.$watch('create_pin_form.$pristine', function (n, o) {
                if (n != o && !n) {
                    $scope.showUnsuccessfulPINCreate = false;
                    $scope.pinCreateMessage = "";
                }
            });

            $scope.showPINInfo = function () {
                console.log({ PINInfo: $scope.pinInfo });
            }
            //end PIN
            
            //Password
            $scope.resetPassword = function () {
                if ($scope.reset_password_form.$invalid) {
                    return false;
                }
                $http({
                    url: '/Account/ResetPassword',
                    method: 'PUT',
                    data: {
                        CURRENT_PASSWORD: $scope.passwordInfo.OldPassword,
                        NEW_PASSWORD: $scope.passwordInfo.NewPassword,
                        CONFIRM_PASSWORD: $scope.passwordInfo.ConfirmPassword,
                        PIN: $scope.passwordInfo.PIN
                    }
                }).then(function successCallback(response) {
                    if (response.data.error) {
                        $scope.showUnsuccessfulPasswordReset = true;
                        $scope.passwordResetMessage = response.data.message.replace(/ <br \/>/g, "");
                    }
                    else {
                        $scope.modalCloseDueToSuccess = true;
                        $('#ExpiredPinPasswordDialog').modal('hide');
                    }

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with resetting password.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.closeUnsuccessfulPasswordResetAlert = function () {
                $scope.showUnsuccessfulPasswordReset = false;
            }

            $scope.cancelResetPassword = function () {
                $scope.passwordInfo = {};
                $scope.showUnsuccessfulPasswordReset = false;
                $scope.passwordResetMessage = "";
                $scope.reset_password_form.$setPristine();
            }

            $scope.$watch('reset_password_form.$pristine', function (n, o) {
                if (n != o && !n) {
                    $scope.showUnsuccessfulPasswordReset = false;
                    $scope.passwordResetMessage = "";
                }
            });

            $scope.$watch('isPasswordValid', function (n, o) {
                if (n != o) {
                    $scope.reset_password_form.NewPasswordTextBox.$setValidity("notvalid", $scope.isPasswordValid);
                }
            });

            $scope.showPasswordInfo = function () {
                console.log({ PasswordInfo: $scope.passwordInfo });
            }
            //end Password

        }]
    };
}]);

app.directive('wbxClaimAuthSearchCriteria', ['$http', '$timeout', function ($http, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/ClaimAuthSearchCriteria',
        scope: {
            statusList: '=',
            isClaim: '=', /*true => Claims. false => Authorizations*/
            searchResults: '=',
            showSearchResultsLoading: '=',
            searchText: '=',
            sessions: '='
        },
        controller: ['$scope', '$http', '$location', '$timeout', function ($scope, $http, $location, $timeout)
        {
            $scope.searchCriteria = {};
            $scope.collapsePanels = {
                isCollapsed : false
            };

            $scope.init = function (isInitial) {
                $scope.ShowSearchCriteria = true;

                $scope.clearSearchCriteria();
                $scope.searchResults = null;
                $scope.searchText = '';

                if (isInitial) {
                    $timeout(function () {
                        if ($scope.sessions.IS_FACILITY_SUBTYPE) {
                            $(".wbx-select2-facility").select2();
                        }
                        else {
                            $(".wbx-select2-location").select2();
                            $(".wbx-select2-provider").select2();
                        }
                    });
                    
                    $scope.populateStatusList();
                    $scope.populateSearchCriteriaList();
                }
                else {
                    if ($scope.sessions.IS_FACILITY_SUBTYPE) {
                        $scope.autoSetFacility();
                    }
                    else {
                        $scope.autoSetLocation();
                        $scope.autoSetProvider();
                    }
                    $scope.autoSetInsurer();
                    $scope.autoSetProcessingStatus();
                }
            }

            $scope.autoSetLocation = function () {
                if ($scope.LocationList.length == 2) {
                    $scope.searchCriteria.LOCATION_ID = $scope.LocationList[1].LOCATION_ID;
                }
                else {
                    $scope.searchCriteria.LOCATION_ID = -1;
                }
                $scope.setSelect2_Location();
                $scope.IsLocationSet = true;
            }

            $scope.autoSetProvider = function () {
                if ($scope.ProviderList.length == 2) {
                    $scope.searchCriteria.PROVIDER_ID = $scope.ProviderList[1].PROVIDER_ID;
                }
                else {
                    $scope.searchCriteria.PROVIDER_ID = -1;
                }

                $scope.setSelect2_Provider();
                $scope.IsProviderSet = true;
            }

            $scope.autoSetFacility = function () {
                if ($scope.FacilityList.length == 2) {
                    $scope.searchCriteria.FACILITY_ID = $scope.FacilityList[1].FACILITY_ID;
                }
                else {
                    $scope.searchCriteria.FACILITY_ID = -1;
                }

                $scope.setSelect2_Facility();
                $scope.IsFacilitySet = true;
            }

            $scope.autoSetInsurer = function () {
                if ($scope.InsurerList.length == 1) {
                    angular.forEach($scope.InsurerList, function (insurer, key) {
                        if (insurer.INSURER_ID == $scope.InsurerList[0].INSURER_ID) {
                            $scope.searchCriteria.insurer = insurer;
                        }
                    });
                }
                $scope.IsInsurerSet = true;
            }

            $scope.autoSetProcessingStatus = function () {
                if ($scope.statusList.length == 1) {
                    angular.forEach($scope.statusList, function (status, key) {
                        if (status.PORTAL_STATUS == $scope.statusList[0].PORTAL_STATUS) {
                            $scope.searchCriteria.Status = status;
                        }
                    });
                }
                $scope.IsProcessingStatusSet = true;
            }

            $scope.setSelect2_Location = function () {
                $timeout(function () {
                    $(".wbx-select2-location").select2({
                        escapeMarkup: function (m) { return m; },
                        templateResult: function (data) {
                            if (data.text == "") {
                                return;
                            }

                            if (data.id == -1) {
                                return $("<span><b>" + data.text + "</b> <br /></span>");
                            }
                            else {
                                var str = "";
                                var result = _.findWhere($scope.LocationList, { LOCATION_ID: parseInt(data.id) });
                                if (result != null) {
                                    str = $("<span><b>" + result.NAME + "</b> <br />" + result.ADDRESS1 + ", " + result.CITY + ", " + result.STATE + " " + result.ZIP + "</span>");
                                }
                                return str;
                            }
                        },
                        templateSelection: function (data) {
                            var str = "";

                            var result = _.findWhere($scope.LocationList, { LOCATION_ID: $scope.searchCriteria.LOCATION_ID });
                            if (result != null) {
                                if (result.LOCATION_ID == -1) {
                                    str = result.NAME;
                                }
                                else {
                                    str = $("<span title=\"" + result.NAME + "&#10;" + result.ADDRESS1 + " " + result.CITY + " " + result.STATE + "," + result.ZIP + "" + "\"><b>" + result.NAME + "</b> (" + result.CITY + ", " + result.STATE + ", " + result.ZIP + ")</span>");
                                }
                            }
                        
                            return str;
                        }
                    });
                });
            }

            $scope.setSelect2_Provider = function () {
                $timeout(function () {
                    $(".wbx-select2-provider").select2({
                        escapeMarkup: function (m) { return m; },
                        templateResult: function (data) {
                            if (data.text == "") {
                                return;
                            }
                            else {
                                return data.text;
                            }
                        },
                        templateSelection: function (data) {
                            var str = "";

                            var result = _.findWhere($scope.ProviderList, { PROVIDER_ID: $scope.searchCriteria.PROVIDER_ID });
                            if (result != null) {
                                str = $("<span title=\"" + result.FIRST_NAME + ' ' + result.LAST_NAME + "\">" + result.FIRST_NAME + ' ' + result.LAST_NAME + "</span>");
                            }
                        
                            return str;
                        }
                    });
                });
            }

            $scope.setSelect2_Facility = function () {
                $timeout(function () {
                    $(".wbx-select2-facility").select2({
                        escapeMarkup: function (m) { return m; },
                        templateResult: function (data) {
                            if (data.text == "") {
                                return;
                            }

                            if (data.id == -1) {
                                return $("<span><b>" + data.text + "</b> <br /></span>");
                            }
                            else {
                                var str = "";
                                var result = _.findWhere($scope.FacilityList, { FACILITY_ID: parseInt(data.id) });
                                if (result != null) {
                                    str = $("<span><b>" + result.NAME + "</b> <br />" + result.ADDRESS1 + ", " + result.CITY + ", " + result.STATE + " " + result.ZIP + "</span>");
                                }
                                return str;
                            }
                        },
                        templateSelection: function (data) {
                            var str = "";
                            var result = _.findWhere($scope.FacilityList, { FACILITY_ID: $scope.searchCriteria.FACILITY_ID });
                            if (result != null) {
                                if (result.FACILITY_ID == -1) {
                                    str = result.NAME;
                                }
                                else {
                                    str = $("<span title=\"" + result.NAME + "&#10;" + result.ADDRESS1 + " " + result.CITY + " " + result.STATE + "," + result.ZIP + "" + "\"><b>" + result.NAME + "</b> (" + result.CITY + ", " + result.STATE + ", " + result.ZIP + ")</span>");
                                }
                            }
                            return str;
                        }
                    });
                });
            }

            $scope.showResults = function () {
                console.log($scope.searchResults);
            }

            $scope.performSearch = function () {
                if ($scope.search_form.$invalid) {
                    return true;
                }
                $scope.searchResults = [];
                $scope.showSearchResultsLoading = true;

                if ($scope.isClaim) {
                    //Claims
                    $http({
                        method: 'GET',
                        url: '/ClaimAuthSearch/SearchClaims',
                        params: {
                            PORTAL_STATUS: $scope.searchCriteria.Status != null ? $scope.searchCriteria.Status.PORTAL_STATUS : null,
                            ENCOUNTER_ID: $scope.searchCriteria.ENCOUNTER_ID,
                            SERVICE_DATE_FROM: $scope.searchCriteria.SERVICE_DATE_FROM,
                            SERVICE_DATE_TO: $scope.searchCriteria.SERVICE_DATE_TO,
                            ENTERED_DATE_FROM: $scope.searchCriteria.ENTERED_DATE_FROM,
                            ENTERED_DATE_TO: $scope.searchCriteria.ENTERED_DATE_TO,
                            DATE_PAID_FROM: $scope.searchCriteria.DATE_PAID_FROM,
                            DATE_PAID_TO: $scope.searchCriteria.DATE_PAID_TO,
                            FIRST_NAME: $scope.searchCriteria.FIRST_NAME,
                            LAST_NAME: $scope.searchCriteria.LAST_NAME,
                            SUBSCRIBER_ID: $scope.searchCriteria.SUBSCRIBER_ID,
                            MEMBER_ID: $scope.searchCriteria.MEMBER_ID,
                            INSURER_ID: $scope.searchCriteria.insurer != null ? $scope.searchCriteria.insurer.INSURER_ID : null,
                            LOCATION_ID: $scope.searchCriteria.LOCATION_ID != -1 ? $scope.searchCriteria.LOCATION_ID : null,
                            PROVIDER_ID: $scope.searchCriteria.PROVIDER_ID != -1 ? $scope.searchCriteria.PROVIDER_ID : null,
                            FACILITY_ID: $scope.searchCriteria.FACILITY_ID != -1 ? $scope.searchCriteria.FACILITY_ID : null
                        }
                    }).then(function successCallback(response) {
                        if (response.data.length > 0) {
                            $scope.searchResults = response.data;
                        }

                        $timeout(function () {
                            $('html, body').animate({
                                scrollTop: $('#claim-auth-results').offset().top
                            }, 750);
                        }, 250);

                        $scope.showSearchResultsLoading = false;
                        $scope.search_form.$setPristine();
                    }, function errorCallback(response) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with claim search.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        $scope.showSearchResultsLoading = false;
                        $scope.search_form.$setPristine();
                    });
                }
                else {
                    //Authorizations
                    $http({
                        method: 'GET',
                        url: '/ClaimAuthSearch/SearchAuths',
                        params: {
                            AUTHORIZATION_STATUS_ID: $scope.searchCriteria.Status != null ? $scope.searchCriteria.Status.PORTAL_STATUS : null,
                            AUTHORIZATION_NUMBER: $scope.searchCriteria.AUTHORIZATION_NUMBER,
                            SERVICE_DATE_FROM: $scope.searchCriteria.ANTICIPATED_SERVICE_DATE_FROM,
                            SERVICE_DATE_TO: $scope.searchCriteria.ANTICIPATED_SERVICE_DATE_TO,
                            ENTERED_DATE_FROM: $scope.searchCriteria.ENTERED_DATE_FROM,
                            ENTERED_DATE_TO: $scope.searchCriteria.ENTERED_DATE_TO,
                            DETERMINATION_DATE_FROM: $scope.searchCriteria.DETERMINATION_DATE_FROM,
                            DETERMINATION_DATE_TO: $scope.searchCriteria.DETERMINATION_DATE_TO,
                            FIRST_NAME: $scope.searchCriteria.FIRST_NAME,
                            LAST_NAME: $scope.searchCriteria.LAST_NAME,
                            SUBSCRIBER_ID: $scope.searchCriteria.SUBSCRIBER_ID,
                            MEMBER_ID: $scope.searchCriteria.MEMBER_ID,
                            INSURER_ID: $scope.searchCriteria.insurer != null ? $scope.searchCriteria.insurer.INSURER_ID : null,
                            LOCATION_ID: $scope.searchCriteria.LOCATION_ID != -1 ? $scope.searchCriteria.LOCATION_ID : null,
                            PROVIDER_ID: $scope.searchCriteria.PROVIDER_ID != -1 ? $scope.searchCriteria.PROVIDER_ID : null
                        }
                    }).then(function successCallback(response) {
                        if (response.data.length > 0) {
                            $scope.searchResults = response.data;
                            if ($scope.sessions.IS_THERAPY) {
                                //For therapy, handling treatment type with multiple lines of business
                                angular.forEach($scope.searchResults, function (result) {
                                    if (result.IS_MULTIPLE_SERVICE_LINES) {
                                        result.Italicize = { 'font-style': 'italic' };
                                        result.TREATMENT_TYPE = '(Multiple)';
                                        result.TT_SORT = 'Multiple';
                                        result.TT_SEARCH = '(Multiple)';
                                    }
                                    else if (result.TREATMENT_TYPE == 'SP') {
                                        result.TREATMENT_TYPE = 'Splint';
                                        result.TT_SORT = 'Splint';
                                        result.TT_SEARCH = 'Splint';
                                    }

                                    var today = moment().startOf('day');
                                    var dateOfServiceFrom = moment(result.DATE_OF_SERVICE_FROM, "MM/DD/YYYY").startOf('day');
                                    var dateOfServiceTo;

                                    //Only enable if the date of service is not in the future.
                                    result.EnableStartClaim = dateOfServiceFrom <= today;
                                });
                            }
                        }

                        $timeout(function () {
                            $('html, body').animate({
                                scrollTop: $('#claim-auth-results').offset().top
                            }, 750);
                        }, 250);

                        $scope.showSearchResultsLoading = false;
                        $scope.search_form.$setPristine();
                    }, function errorCallback(response) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with auth search.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        $scope.showSearchResultsLoading = false;
                        $scope.search_form.$setPristine();
                    });
                }
            }

            $scope.clear = function () {
                $scope.init(false);
                $scope.search_form.$setPristine();
            }

            $scope.populateStatusList = function () {
                if ($scope.isClaim) {
                    $scope.StatusesToLoad = [
                                    {
                            PORTAL_PROCESSING_TYPE: 1,
                            TITLE: 'Claim Status'
                            }
                    ];
                            }
                else {
                    $scope.StatusesToLoad = [
                        {
                            PORTAL_PROCESSING_TYPE: 2,
                            TITLE: 'Authorization Status'
                        }
                    ];
                    }
            }

            $scope.clearSearchCriteria = function () {
                $scope.searchCriteria.Status = null;
                if ($scope.InsurerList != null && $scope.InsurerList.length > 1) {
                    $scope.searchCriteria.insurer = null;
                }

                $scope.searchCriteria.ENCOUNTER_ID = '';
                $scope.searchCriteria.AUTHORIZATION_NUMBER = '';
                $scope.searchCriteria.SERVICE_DATE_FROM = '';
                $scope.searchCriteria.SERVICE_DATE_TO = '';
                $scope.searchCriteria.ANTICIPATED_SERVICE_DATE_FROM = '';
                $scope.searchCriteria.ANTICIPATED_SERVICE_DATE_TO = '';
                $scope.searchCriteria.ENTERED_DATE_FROM = '';
                $scope.searchCriteria.ENTERED_DATE_TO = '';
                $scope.searchCriteria.DATE_PAID_FROM = '';
                $scope.searchCriteria.DATE_PAID_TO = '';
                $scope.searchCriteria.DETERMINATION_DATE_FROM = '';
                $scope.searchCriteria.DETERMINATION_DATE_TO = '';

                $scope.searchCriteria.FIRST_NAME = '';
                $scope.searchCriteria.LAST_NAME = '';
                $scope.searchCriteria.SUBSCRIBER_ID = '';
                $scope.searchCriteria.MEMBER_ID = '';

                if ($scope.sessions.IS_FACILITY_SUBTYPE) {
                    if ($scope.FacilityList != null && $scope.FacilityList.length > 2 && $scope.searchCriteria.FACILITY_ID != -1) {
                        //Only set to "All" option if they are more than 1 facility and it's not set to all yet
                        $scope.searchCriteria.FACILITY_ID = -1;
                        $scope.setSelect2_Facility();
                    }
                }
                else {
                    if ($scope.searchCriteria.LOCATION_ID != null &&
                        $scope.searchCriteria.PROVIDER_ID != null) {

                        if ($scope.searchCriteria.LOCATION_ID == -1 &&
                           (($scope.ProviderList.length == 2 && $scope.searchCriteria.PROVIDER_ID != $scope.ProviderList[1].PROVIDER_ID) ||
                            ($scope.ProviderList.length != 2 && $scope.searchCriteria.PROVIDER_ID != -1))) {
                            //Location has All selected and Provider has more than one and other than All is selected
                            if ($scope.ProviderList.length == 2) {
                                $scope.searchCriteria.PROVIDER_ID = $scope.ProviderList[1].PROVIDER_ID;
                            }
                            else {
                                $scope.searchCriteria.PROVIDER_ID = -1;
                            }

                            $scope.setSelect2_Provider();
                        }
                        else if (($scope.LocationList.length == 2 && $scope.searchCriteria.LOCATION_ID != $scope.LocationList[1].LOCATION_ID) ||
                                 ($scope.LocationList.length != 2 && $scope.searchCriteria.LOCATION_ID != -1)) {
                            $scope.searchCriteria.LOCATION_ID = -1;
                            $scope.setSelect2_Location();
                            $scope.populateProviderList();
                        }
                    }
                }
            }

            $scope.populateSearchCriteriaList = function () {
                var dropdownSettings = {};

                if ($scope.sessions.IS_FACILITY_SUBTYPE) {
                    $scope.FacilityList = null;
                    $scope.LoadingFacilityDropDown = true;

                    dropdownSettings = {
                        GET_FACILITY: true,
                        INCLUDE_FACILITY_OPTION_ALL: true
                    }
                }
                else {
                    $scope.LocationList = null;
                    $scope.ProviderList = null;

                    $scope.LoadingLocationDropDown = true;
                    $scope.LoadingProviderDropDown = true;

                    dropdownSettings = {
                        GET_LOCATION: true,
                        INCLUDE_LOCATION_OPTION_ALL: true,
                        GET_PROVIDER: true,
                        INCLUDE_PROVIDER_OPTION_ALL: true
                    }
                }
                
                $scope.InsurerList = null;
                $scope.LoadingInsurerDropDown = true;
                dropdownSettings.GET_INSURER = true;

                $http({
                    method: 'GET',
                    url: '/DropList/GetSearchCriteriaDropdowns',
                    params: {
                        GET_LOCATION: dropdownSettings.GET_LOCATION,
                        INCLUDE_LOCATION_OPTION_ALL: dropdownSettings.INCLUDE_LOCATION_OPTION_ALL,
                        GET_PROVIDER: dropdownSettings.GET_PROVIDER,
                        INCLUDE_PROVIDER_OPTION_ALL: dropdownSettings.INCLUDE_PROVIDER_OPTION_ALL,
                        GET_FACILITY: dropdownSettings.GET_FACILITY,
                        INCLUDE_FACILITY_OPTION_ALL: dropdownSettings.INCLUDE_FACILITY_OPTION_ALL,
                        GET_INSURER: dropdownSettings.GET_INSURER
                    }
                }).then(function successCallback(response) {

                    if ($scope.sessions.IS_FACILITY_SUBTYPE) {
                        $scope.FacilityList = response.data.FacilitiesList;
                        $scope.autoSetFacility();
                        $scope.LoadingFacilityDropDown = false;
                    }
                    else {
                        $scope.LocationList = response.data.LocationsList;
                        $scope.ProviderList = response.data.ProvidersList;
                        $scope.autoSetLocation();
                        $scope.autoSetProvider();
                        $scope.LoadingLocationDropDown = false;
                        $scope.LoadingProviderDropDown = false;
                    }

                    $scope.InsurerList = response.data.InsurerList;
                    $scope.autoSetInsurer();
                    $scope.LoadingInsurerDropDown = false;

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error with populating Search Criteria dropdowns.");

                    $scope.LoadingLocationDropDown = false;
                    $scope.LoadingProviderDropDown = false;
                    $scope.LoadingFacilityDropDown = false;
                    $scope.LoadingInsurerDropDown = false;

                });
            }

            $scope.locationListOnChange = function () {
                $scope.populateProviderList();
            }

            $scope.populateProviderList = function () {
                $scope.LoadingProviderDropDown = true;

                $http({
                    method: 'GET',
                    url: '/DropList/GetProviders',
                    params: {
                        locationId: $scope.searchCriteria.LOCATION_ID != -1 ? $scope.searchCriteria.LOCATION_ID : null,
                        includeOptionAll: true
                    }
                }).then(function successCallback(response) {
                    $scope.ProviderList = response.data;
                    $scope.LoadingProviderDropDown = false;
                    $scope.autoSetProvider();
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating provider dropdown.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    $scope.LoadingProviderDropDown = false;
                });
            }
            
            $scope.$watch('search_form.$pristine', function (n, o) {
                if (n != o && !n && ($scope.searchResults != null)) {
                    $scope.searchResults = null;
                    $scope.searchText = '';
                }
            });

            $scope.showProcessingStatusDescription = function () {
                if ($scope.isClaim) {
                    $scope.StatusTypeToShow = 1;
            }
                else {
                    $scope.StatusTypeToShow = 2;
                }

                $scope.ShowStatusDescriptionDialog = true;
            }

            $scope.statusListOnChange = function () {
                if ($scope.isClaim && $scope.searchCriteria.Status != null && $scope.searchCriteria.Status.PORTAL_STATUS < 2) {
                    //If the status is Received or In Process, the Date Paid will be hidden. At that point, we'll clear the model.
                    $scope.searchCriteria.DATE_PAID_FROM = null;
                    $scope.searchCriteria.DATE_PAID_TO = null;
                }
                else if (!$scope.isClaim && $scope.searchCriteria.Status != null && $scope.searchCriteria.Status.PORTAL_STATUS == 0) {
                    //If the auth status is Pending, the Determination date will be hidden. At that point, we'll clear the model.
                    $scope.searchCriteria.DETERMINATION_DATE_FROM = null;
                    $scope.searchCriteria.DETERMINATION_DATE_TO = null;
                }
            }

            $scope.$watchCollection('[IsProcessingStatusSet, IsInsurerSet, IsLocationSet, IsProviderSet, IsFacilitySet, PerformAutoSearch]', function (n, o) {
                if (n[0] != null && n[1] != null && n[2] != null && n[3] != null && n[4] != null && n[5] != null && (n[0] != o[0] || n[1] != o[1] || n[2] != o[2] || n[3] != o[3] || n[4] != o[4] || n[5] != o[5])) {
                    $scope.performSearch();
                    $scope.PerformAutoSearch = false;
                }
            });

            $scope.$watch('AreStatusListLoaded', function (n, o) {
                if (n) {
                    $scope.statusList = $scope.StatusDescriptionLists[0].List;

                    $scope.autoSetProcessingStatus();

                    if (!$scope.isClaim) {
                        //The prepopulating is only for authorizations coming from welcome page.
                        var params = $location.search();
                        if (params != null) {
                            try {
                                if (params.searchType != '' && params.searchType != null) {
                                    if (parseInt(params.searchType) < $scope.statusList.length)
                                        $scope.searchCriteria.Status = $scope.statusList[parseInt(params.searchType)];

                                    if (params.searchType == "1") //determined, so set the date range to the last 30 days.
                                    {
                                        var today = new Date();
                                        $scope.searchCriteria.DETERMINATION_DATE_FROM = new Date(new Date().setDate(today.getDate() - 30)).toLocaleDateString();
                                        $scope.searchCriteria.DETERMINATION_DATE_TO = today.toLocaleDateString();
                                    }
                                    $scope.PerformAutoSearch = true;
                                }
                            }
                            catch (e) {
                            }
                        }
                    }
                }
            });


            $scope.toggleSearchCriteriaPanel = function () {
                $scope.collapsePanels.isCollapsed = !$scope.collapsePanels.isCollapsed;
                $('#SearchCriteriaBody').collapse('toggle');
            }
        }]
    };
}]);

app.directive('wbxClaimAuthResults', ['$window','$location','$http', '$q', function ($window, $location, $http, $q) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/ClaimAuthResults',
        scope: {
            statusList: '=',
            results: '=',
            isClaim: '=', /*true => Claims. false => Authorizations*/
            isSearch: '=', /*true => Search. false => Dashboard*/
            showResultsLoading: '=',
            searchText: '=',
            sessions: '&'
        },
        controller: ['$scope', function ($scope) {
            $scope.init = function () {
                if (!$scope.isClaim) {
                     $scope.sortObject = {
                        sortColumn: 'AUTHORIZATION_NUMBER',
                        reverse: true
                    };
                }
                else {
                    $scope.sortObject = {
                        sortColumn: 'ENCOUNTER_ID',
                        reverse: false
                    };
                }

                $scope.historySortObject = {
                        sortColumn: 'ENCOUNTER_ID',
                        reverse: false
                };
            }

            $scope.sort = function (columnName) {
                if ($scope.sortObject.sortColumn != columnName)
                    $scope.sortObject.reverse = false;
                else
                    $scope.sortObject.reverse = !$scope.sortObject.reverse;

                $scope.sortObject.sortColumn = columnName;
            }

            $scope.sortHistory = function (columnName) {
                if ($scope.historySortObject.sortColumn != columnName)
                    $scope.historySortObject.reverse = false;
                else
                    $scope.historySortObject.reverse = !$scope.historySortObject.reverse;

                $scope.historySortObject.sortColumn = columnName;
            }



            $scope.viewClaim = function (claim) {
                var sessionProperties = $scope.setSessionPropertiesForClaimReport(claim);

                $scope.openTab("/Areas/PWP/Reports/PortalClaimReport.aspx", sessionProperties);
            }

            $scope.viewAuth = function (auth) {
                var sessionProperties = $scope.setSessionPropertiesForAuthReport(auth);

                $scope.openTab("/Areas/PWP/Reports/PortalAuthReport.aspx", sessionProperties);
            }

            $scope.setSessionPropertiesForClaimReport = function (claim) {
                var sessionProperties = [];
                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_CLAIM_CLAIM_ID",
                    SESSION_VALUE: claim.CLAIM_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_CLAIM_SERVER_SOURCE",
                    SESSION_VALUE: claim.SERVER_SOURCE == undefined ? 3 : claim.SERVER_SOURCE
                }
                sessionProperties.push(sessionProperty);

                return sessionProperties;
            }

            $scope.setSessionPropertiesForAuthReport = function (auth) {
                var sessionProperties = [];
                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_AUTH_AUTHORIZATION_ID",
                    SESSION_VALUE: auth.AUTHORIZATION_ID
                }
                sessionProperties.push(sessionProperty);

                var sessionProperty = {
                    SESSION_NAME: "REPORT_PORTAL_AUTH_DB_SOURCE",
                    SESSION_VALUE: auth.DB_SOURCE
                }
                sessionProperties.push(sessionProperty);

                return sessionProperties;
            }

            $scope.setSessionProperties = function (sessionProperties) {
                var deferred = $q.defer();

                $http({
                    url: "/WebSession/SetWebSessionProperties",
                    method: "PUT",
                    data: {
                        SESSION_PROPERTIES: sessionProperties
                    }
                }).then(function successCallback(response) {
                    if (!response.data.Status) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error with setting web session properties.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        deferred.reject(false);
                    }
                    else {
                        deferred.resolve(true);
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with setting web session properties.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    deferred.reject(false);
                });

                return deferred.promise;
            }

            $scope.openTab = function (url, sessionProperties) {
                var randomno = Math.floor((Math.random() * 100) + 1);
                var newWindow = $window.open('', 'PopUpWindow' + randomno, 'scrollbars=1,menubar=0,resizable=1,width=920,height=850');

                var promise = $scope.setSessionProperties(sessionProperties);
                promise.then(function () {
                    newWindow.location = url;
                }, function (data) {
                    // bad, do nothing
                });
            }

            $scope.gotoClaimSearch = function () {
                var index = $location.absUrl().indexOf("/ClaimDashboard");
                $window.location.href = $location.absUrl().substr(0, index) + "/ClaimSearch";
            }

            $scope.startClaim = function (selectedItem) {
                $http({
                    url: "/Welcome/SetHomePageData",
                    method: "PUT",
                    data: {
                        AUTHORIZATION_NUMBER: selectedItem.AUTHORIZATION_NUMBER,
                        DATA_SOURCE: 8
                    }
                }).then(function successCallback(response) {
                    if (!response.data.Status) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error in setting homepage data.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                    }
                    else {
                        $window.location.href = '/PWP/Therapy/ClaimEntry';
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error in setting homepage data.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.correctClaim = function (claim) {
                $http({
                    url: "/Welcome/SetHomePageData",
                    method: "PUT",
                    data: {
                        ENCOUNTER_ID: claim.ENCOUNTER_ID
                    }
                }).then(function successCallback(response) {
                    if (!response.data.Status) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error in setting homepage data.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                    }
                    else {
                        var index = 0;
                        if ($location.absUrl().indexOf("/ClaimDashboard") > -1) {
                            index = $location.absUrl().indexOf("/ClaimDashboard");
                        }
                        else if ($location.absUrl().indexOf("/ClaimSearch") > -1) {
                            index = $location.absUrl().indexOf("/ClaimSearch");
                        }
                        if (index > -1)
                            $window.location.href = $location.absUrl().substr(0, index) + "/ClaimEntry";
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error in setting homepage data.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.viewClaimHistory = function (claim) {
               
                if (claim.ORIGINAL_CLAIM_ID != null || claim.CLAIM_STATUS == 7 || claim.SERVICE_RESUBMITTED) {
                    $scope.claimHistorySelected = claim;
                    $scope.showClaimHistoryLoading = true;

                    // show dialog
                    $('#ClaimHistoryDialog').modal({
                        backdrop: 'static'
                    });
                    $('#ClaimHistoryDialog').modal('show');

                    // get claim history data
                    $http({
                        cache: false,
                        url: "/ClaimAuthSearch/GetClaimHistory",
                        method: "GET",
                        params: {
                            claimId: claim.CLAIM_ID
                        }
                    }).then(function successCallback(response) {
                        if (response.data != null) {
                            $scope.claimHistory = response.data;
                        }
                        else {
                            console.error(response.data.Message);
                            console.error(response);
                            if ($scope.ExceptionDialogControl != null) {
                                $scope.ExceptionDialogControl.showDialog("Error in getting claim history.");
                            }
                            else {
                                bootbox.alert(response.data.Message);
                            }
                        }

                        $scope.showClaimHistoryLoading = false;

                    }, function errorCallback(response) {
                        console.error(response.data.Message);
                        console.error(response);
                        if ($scope.ExceptionDialogControl != null) {
                            $scope.ExceptionDialogControl.showDialog("Error in getting claim history.");
                        }
                        else {
                            bootbox.alert(response.data.Message);
                        }
                        $scope.showClaimHistoryLoading = false;
                    });

                }
            }

            $scope.closeClaimHistory = function()
            {
                $('#ClaimHistoryDialog').modal('hide');
            }

            $scope.correctClaimCheck = function(claim)
            {
                var rowversion = claim.ROWVERSION;
                $http({
                    cache: false,
                    url: "/ClaimAuthSearch/GetClaimRowVersion",
                    method: "GET",
                    params: {
                        claimId : claim.CLAIM_ID
                    }
                }).then(function successCallback(response) {
                    if (response.data != null && response.data[0] == rowversion) {
                        $scope.correctClaim(claim);
                    }
                    else {
                        $scope.ConcurrencyCheckFailedDialogControl.showDialog(); 
                    }
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error in getting claim row version.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    $scope.ConcurrencyCheckFailedDialogControl.showDialog(); 
                });
            }
        }]
    };

}]);

app.directive('wbxStatusDescriptionDialog', ['$http','$window','$timeout', function ($http, $window, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/StatusDescriptionDialog',
        scope: {
            statusesToLoad: '=', // This is an array of objects. Each object will have the portal processing type (PORTAL_PROCESSING_TYPE) we want to load and the title (TITLE) and a list of colors (ColorList:{Green,Gold,Red}).
            statusDescriptionLists: '=', //This is an array of status description lists. The order would depend on the order in statusesToLoad
            statusTypeToShow: '=', //This is to indicate which status list to show
            showDialog: '=', //This is an event to trigger the display of the dialog
            areStatusListLoaded: '=', //This is to indicate if all the lists are done loading
            sortDescending: '=?'
        },
        controller: ['$scope', function ($scope) {
            $scope.sortDescending = $scope.sortDescending || false;

            $scope.getStatusList = function (statusToLoad) {
                $http({
                    method: 'GET',
                    url: '/PortalDropList/GetPortalProcessingStatuses',
                    params: {
                        PORTAL_PROCESSING_TYPE: statusToLoad.PORTAL_PROCESSING_TYPE
                    }
                }).then(function successCallback(response) {
                    if (response.data.length > 0) {

                        if (statusToLoad.ColorList != null){
                            if (statusToLoad.ColorList.Green != null){
                                angular.forEach(statusToLoad.ColorList.Green, function (green) {
                                    angular.forEach(response.data, function (status) {
                                        if (status.PORTAL_STATUS == green) {
                                            status.IsGreen = true;
                                        }
                                    });
                                });
                            }
                            if (statusToLoad.ColorList.Gold != null) {
                                angular.forEach(statusToLoad.ColorList.Gold, function (gold) {
                                    angular.forEach(response.data, function (status) {
                                        if (status.PORTAL_STATUS == gold) {
                                            status.IsGold = true;
                                        }
                                    });
                                });
                            }
                            if (statusToLoad.ColorList.Red != null) {
                                angular.forEach(statusToLoad.ColorList.Red, function (red) {
                                    angular.forEach(response.data, function (status) {
                                        if (status.PORTAL_STATUS == red) {
                                            status.IsRed = true;
                                        }
                                    });
                                });
                            }
                        }

                        if ($scope.statusDescriptionLists == null) {
                            $scope.statusDescriptionLists = [];
                        }

                        $scope.statusDescriptionLists.push(
                            {
                                TITLE: statusToLoad.TITLE,
                                PORTAL_PROCESSING_TYPE: statusToLoad.PORTAL_PROCESSING_TYPE,
                                List: response.data
                            }
                        );
                    }
                    
                    $scope.StatusListLoaded = true;
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error in getting portal processing statuses.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.showStatusDescription = function () {
                $('#StatusDescriptionDialog').modal({
                    backdrop: 'static'
                })
                $('#StatusDescriptionDialog').modal('show');
            }

            $scope.closeStatusDescriptionDialog = function () {
                $('#StatusDescriptionDialog').modal('hide');
            }

            $scope.$watchCollection('statusesToLoad', function (n, o) {
                if (n != null && n.length > 0) {
                    angular.forEach($scope.statusesToLoad, function (status) {
                        $scope.getStatusList(status);
                    });
                }
            });

            $scope.$watch('StatusListLoaded', function (n, o) {
                if (n) {
                    if ($scope.statusDescriptionLists != null && $scope.statusesToLoad != null && $scope.statusDescriptionLists.length == $scope.statusesToLoad.length) {
                        $scope.areStatusListLoaded = true;
                    }

                    $scope.StatusListLoaded = false;
                }
            });

            $scope.$watchCollection('[showDialog,areStatusListLoaded]', function (n, o) {
                if (n[0] && n[1]) {
                    $scope.Status = _.findWhere($scope.statusDescriptionLists, { PORTAL_PROCESSING_TYPE: $scope.statusTypeToShow });
                    $scope.showStatusDescription();

                    $scope.showDialog = false;
                }
            });
        }]
    };
}]);

app.directive('wbxCapApplicationDetails', ['$window', '$http', function ($window, $http) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/CAPApplicationDetails',
        scope: {
            providerId: '=',
            credentialingApplicationId: '=',
            showDialog: '=',
            hideStatus: '='
        },
        controller: ['$scope', function ($scope) {
            $scope.init = function () {
                $scope.getStatuses();
            }

            $scope.showApplicationDetails = function () {
                $('#ApplicationDetailsTab a:first').tab('show');

                $('#application-details').modal({
                    backdrop: 'static'
                })
                $('#application-details').modal('show');
            }

            $scope.closeApplicationDetails = function () {
                $('#application-details').modal('hide');
                $scope.ShowDialogContent = false;
                $scope.ErrorLoadingOverviewInfo = false;
            }

            $scope.getStatuses = function () {
                $http({
                    method: 'GET',
                    url: '/PortalDropList/GetPortalProcessingStatuses',
                    params: {
                        PORTAL_PROCESSING_TYPE: 5 //Download
                    }
                }).success(function (result) {
                    $scope.DownloadStatusList = result;
                    $scope.StatusListLoaded = true;
                }).error(function (data, status, headers, config) {
                    bootbox.alert(data);
                });

                $http({
                    method: 'GET',
                    url: '/PortalDropList/GetPortalProcessingStatuses',
                    params: {
                        PORTAL_PROCESSING_TYPE: 6 //Subscription
                    }
                }).success(function (result) {
                    $scope.SubscriptionStatusList = result;
                    $scope.SubscriptionListLoaded = true;
                }).error(function (data, status, headers, config) {
                    bootbox.alert(data);
                });
            }

            $scope.getProviderInfo = function () {
                $http({
                    cache: false,
                    url: "/CAP/ApplicationDetails/GetProviderInfo",
                    method: "GET",
                    params: {
                        PROVIDER_ID: $scope.providerId
                    }
                }).success(function (data) {
                    if (data.error)
                        bootbox.alert(data.message);
                    else {
                        if (data != null && data.length != 0) {
                            $scope.ProviderInfo = data;
                            $scope.ProviderInfoLoaded = true;
                        }
                    }
                }).error(function (data, status, headers, config) {
                    bootbox.alert(data);
                });
            }

            $scope.getOverviewInfo = function () {
                $scope.ShowDetailsDialogLoading = true;

                $http({
                    cache: false,
                    url: "/CAP/ApplicationDetails/GetOverviewInfo",
                    method: "GET",
                    params: {
                        CREDENTIALING_APPLICATION_ID: $scope.credentialingApplicationId
                    }
                }).success(function (data) {
                    $scope.ShowDetailsDialogLoading = false;
                    if (data.Status == false) {
                        $scope.ErrorLoadingOverviewInfo = true;
                    }
                    else {
                        $scope.OverviewDetails = data;

                        $scope.OverviewDetails.PERSONAL_INFO_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 15) > 0 ? true : false;
                        $scope.OverviewDetails.PRACTICE_INFO_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 16) > 0 ? true : false;
                        $scope.OverviewDetails.STATE_DOCUMENTS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 32) > 0 ? true : false;
                        $scope.OverviewDetails.ANESTHESIA_DOCUMENTS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 64) > 0 ? true : false;
                        $scope.OverviewDetails.DEA_DOCUMENTS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 128) > 0 ? true : false;
                        $scope.OverviewDetails.CDS_DOCUMENTS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 256) > 0 ? true : false;
                        $scope.OverviewDetails.MEDICARE_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 512) > 0 ? true : false;
                        $scope.OverviewDetails.MEDICAID_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 1024) > 0 ? true : false;
                        $scope.OverviewDetails.BLS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 2048) > 0 ? true : false;
                        $scope.OverviewDetails.ACLS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 4096) > 0 ? true : false;
                        $scope.OverviewDetails.DEGREE_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 8192) > 0 ? true : false;
                        $scope.OverviewDetails.RESIDENCY_INTERNSHIP_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 16384) > 0 ? true : false;
                        $scope.OverviewDetails.BOARD_CERTIFICATIONS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 32768) > 0 ? true : false;
                        $scope.OverviewDetails.NDBE_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 65536) > 0 ? true : false;
                        $scope.OverviewDetails.HOSPITAL_AFFILIATIONS_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 131072) > 0 ? true : false;
                        $scope.OverviewDetails.PROFESSIONAL_INSURANCE_UPDATED = ($scope.OverviewDetails.SECTIONS_UPDATED & 262144) > 0 ? true : false;
                      

                        if (!$scope.hideStatus != null) {
                            if ($scope.hideStatus == 1) {
                                $scope.OverviewDetails.APPLICATION_STATUS = -1;
                            }
                        }

                        $scope.OverviewInfoLoaded = true;
                    }

                }).error(function (data, status, headers, config) {
                    bootbox.alert(data);
                });
            }

           
         

            $scope.getLocationsList = function () {
                $scope.ShowLoadingLocationList = true;
                $http({
                    cache: false,
                    url: "/CAP/ApplicationDetails/GetLocationsList",
                    method: "GET",
                    params: {
                        CREDENTIALING_APPLICATION_ID: $scope.credentialingApplicationId
                    }
                }).success(function (data) {
                    $scope.LocationsList = data;

                    $scope.LocationsListLoaded = true;
                    $scope.ShowLoadingLocationList = false;
                }).error(function (data, status, headers, config) {
                    $scope.ShowLoadingLocationList = false;
                    bootbox.alert(data);
                });
            }

            $scope.getOtherInformationInfo = function () {
                $scope.ShowLoadingOtherInfo = true;
                $http({
                    cache: false,
                    url: "/CAP/ApplicationDetails/GetOtherInformationInfo",
                    method: "GET",
                    params: {
                        CREDENTIALING_APPLICATION_ID: $scope.credentialingApplicationId
                    }
                }).success(function (data) {
                    $scope.OtherInformationDetails = data;
                    $scope.OtherInformationDetailsLoaded = true;
                    $scope.ShowLoadingOtherInfo = false;
                }).error(function (data, status, headers, config) {
                    $scope.ShowLoadingOtherInfo = false;
                    bootbox.alert(data);
                });
            }
            
            //This is to generate the status name. It has to wait for the status list to be loaded as well as the overview details.
            $scope.$watchCollection('[StatusListLoaded, OverviewInfoLoaded]', function (n, o) {
                if (n[0] != null && n[1] != null && (n[0] != o[0] || n[1] != o[1])) {
                    $scope.OverviewDetails.STATUS_NAME = _.findWhere($scope.DownloadStatusList, { PORTAL_STATUS: $scope.OverviewDetails.APPLICATION_STATUS }).NAME;
                }
            });

            $scope.$watchCollection('[SubscriptionListLoaded, OverviewInfoLoaded]', function (n, o) {
                if (n[0] != null && n[1] != null && (n[0] != o[0] || n[1] != o[1])) {
                    var subscriptionPortalStatus = $scope.OverviewDetails.SUBSCRIPTION_ACTIVE_FLAG ? 1 : 0;
                    $scope.OverviewDetails.SUBSCRIPTION_STATUS_NAME = _.findWhere($scope.SubscriptionStatusList, { PORTAL_STATUS: subscriptionPortalStatus }).NAME;
                }
            });


         
        
       

            $scope.$watch('showDialog', function (n, o) {
                if (n) {
                    $scope.showApplicationDetails();

                    $scope.getProviderInfo();

                    //Load tab 1
                    $scope.getOverviewInfo();
                  
                    $scope.showDialog = false;

                }
            });
            
            $scope.$watchCollection('[ProviderInfoLoaded, OverviewInfoLoaded]', function (n, o) {
                if (n[0] && n[1]) {
                    $scope.ShowDialogContent = true;

                    //Load tab 2 and tab 3
                    $scope.getLocationsList();
                    $scope.getOtherInformationInfo();

                    $scope.ProviderInfoLoaded = false;
                    $scope.OverviewInfoLoaded = false;
                }
            });
        }]
    };
}]);

app.directive('wbxCapApplicationDownload', ['$window', '$http', '$timeout', 'WBXBatchAppCountService','bowser', function ($window, $http, $timeout, WBXBatchAppCountService, bowser) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/CAPApplicationDownload',
        scope: {
            selectedProvider: '=',
            displayPurchase: '=',
            downloadNow: '=',
            addToBatch: '=',
            removeFromBatch: '=',
            downloadStatus: '=?',
            packageType: '='
        },
        controller: ['$scope', function ($scope) {
            $scope.init = function () {
            }

            $scope.showPurchaseDialog = function () {
                $('#confirm-purchase').modal({
                    backdrop: 'static'
                })
                $('#confirm-purchase').modal('show');
            }

            $scope.cancelConfirmPurchase = function () {
                $('#confirm-purchase').modal('hide');
            }

            $scope.showFailedDownloadDialog = function () {
                $('#failed-download').modal({
                    backdrop: 'static'
                })
                $('#failed-download').modal('show');
            }

            $scope.closeFailedDownload = function () {
                $('#failed-download').modal('hide');
            }

            $scope.showIncompleteDownloadDialog = function () {
                $('#incomplete-download').modal({
                    backdrop: 'static'
                })
                $('#incomplete-download').modal('show');
            }

            $scope.closeIncompleteDownloadDialog = function () {
                $('#incomplete-download').modal('hide');
            }


            $scope.subscribe = function () {
                $('#confirm-purchase').modal('hide');

                $http({
                    url: "/CAP/Download/Subscribe",
                    method: "PUT",
                    data: {
                        providerId: $scope.selectedProvider.PROVIDER_ID
                    }
                }).success(function (data) {
                    if (!data.Status) {
                        bootbox.alert(data.Message);
                    }
                    else {
                        $scope.selectedProvider.IS_SUBSCRIPTION_EXPIRED = false;
                        var currentdate = new Date();
                        $scope.selectedProvider.SUBSCRIPTION_START_DATE = currentdate.getDate() + "/" + (currentdate.getMonth() + 1) + "/" + currentdate.getFullYear();
                        $scope.selectedProvider.SUBSCRIPTION_STATUS = 1;

                        $scope.clearBanners();
                        $scope.ShowSubscriptionActivatedBanner = true;

                        $timeout.cancel($scope.SubscribeTimer);
                        //Close the info banner automatically in 10 seconds
                        $scope.SubscribeTimer = $timeout(function () {
                            $scope.ShowSubscriptionActivatedBanner = false;
                        }, 10000);
                    }
                }).error(function (data, status, headers, config) {
                    bootbox.alert(data);
                });
            }

            $scope.closeSubscriptionActivatedBanner = function () {
                $scope.ShowSubscriptionActivatedBanner = false;
            }

            $scope.closeDownloadNowInitiatedBanner = function () {
                $scope.ShowDownloadNowInitiatedBanner = false;
            }

            $scope.closeAppAddedToBatchBanner = function () {
                $scope.ShowAppAddedToBatchBanner = false;
            }

            $scope.closeAppRemovedFromBatchBanner = function () {
                $scope.ShowAppRemovedFromBatchBanner = false;
            }

            $scope.clearBanners = function () {
                $scope.ShowSubscriptionActivatedBanner = false;
                $scope.ShowDownloadNowInitiatedBanner = false;
                $scope.ShowAppAddedToBatchBanner = false;
                $scope.ShowAppRemovedFromBatchBanner = false;
            }

            $scope.$watch('displayPurchase', function (n, o) {
                if (n) {
                    $scope.showPurchaseDialog();

                    $scope.displayPurchase = false;
                }
            });

            $scope.$watch('downloadNow', function (n, o) {

                if (n) {
                    $scope.clearBanners();
                    $scope.ShowDownloadNowInitiatedBanner = true;

                    $timeout.cancel($scope.DownloadNowTimer);
                    //Close the info banner automatically in 10 seconds
                    $scope.DownloadNowTimer = $timeout(function () {
                        $scope.ShowDownloadNowInitiatedBanner = false;
                    }, 10000);

                    if (bowser.safari) {
                        if ($scope.selectedProvider != null)
                            window.open("/CAP/Download/Download?appId=" + $scope.selectedProvider.PROVIDER_CREDENTIALING_APPLICATION_ID + "&packageType=" + $scope.packageType, '_self', '');
                        else {
                            window.open("/CAP/Download/Download?packageType=" + $scope.packageType, '_self', '');
                            $scope.downloadStatus = "200";
                        }
                    }
                    else {
                        try {
                            var isFileSaverSupported = !!new Blob;
                            $http({
                                method: 'GET',
                                url: '/CAP/Download/Download',
                                responseType: 'arraybuffer',
                                params: {
                                    providerId: $scope.selectedProvider != null ? $scope.selectedProvider.PROVIDER_ID : null,
                                    appId: $scope.selectedProvider != null ? $scope.selectedProvider.PROVIDER_CREDENTIALING_APPLICATION_ID : null,
                                    packageType: $scope.packageType
                                }
                            }).then(function successCallback(response) {
                                //Get the content type
                                var type = response.headers('content-type');

                                //Get the file name
                                var contentDisposition = response.headers('content-disposition');
                                var indexFileName = contentDisposition.indexOf('filename=');
                                var indexName = indexFileName + 9;
                                var fileName = contentDisposition.substr(indexName);

                                var file = new Blob([response.data], {
                                    type: type
                                });

                                saveAs(file, fileName);

                                if (response.status == "206")
                                    $scope.showIncompleteDownloadDialog();
                                else if ($scope.selectedProvider != null) {
                                    //When the download is successful, set the download status to application current (3)
                                    $scope.selectedProvider.DOWNLOAD_STATUS = 3;
                                }

                                $scope.downloadStatus = response.status;
                            }, function errorCallback(response) {
                                $scope.downloadStatus = response.status;
                                $scope.showFailedDownloadDialog();
                            });
                        } catch (e) {
                            if ($scope.selectedProvider != null)
                                window.open("/CAP/Download/Download?appId=" + $scope.selectedProvider.PROVIDER_CREDENTIALING_APPLICATION_ID + "&packageType=" + $scope.packageType, '_self', '');
                            else
                                window.open("/CAP/Download/Download?packageType=" + $scope.packageType, '_self', '');
                        }
                    }

                    $scope.downloadNow = false;
                }

            });

            $scope.$watch('addToBatch', function (n, o) {
                if (n) {
                        $http({
                            url: "/CAP/Download/AddToBatch",
                            method: "PUT",
                            data: {
                                providerId: $scope.selectedProvider.PROVIDER_ID,
                                appId: $scope.selectedProvider.PROVIDER_CREDENTIALING_APPLICATION_ID
                            }
                        }).success(function (data) {
                            if (!data.Status) {
                                bootbox.alert(data.Message);
                            }
                            else {
                                //Update batch count
                                WBXBatchAppCountService.addApplication();
                                $scope.selectedProvider.IS_IN_BATCH = true;

                                $scope.clearBanners();
                                $scope.ShowAppAddedToBatchBanner = true;

                                $timeout.cancel($scope.AppAddedToBatchTimer);
                                //Close the info banner automatically in 10 seconds
                                $scope.AppAddedToBatchTimer = $timeout(function () {
                                    $scope.ShowAppAddedToBatchBanner = false;
                                }, 10000);
                            }
                        }).error(function (data, status, headers, config) {
                            bootbox.alert(data);
                        });

                    $scope.addToBatch = false;
                }
            });

            $scope.$watch('removeFromBatch', function (n, o) {
                if (n) {
                    $http({
                        url: "/CAP/Download/RemoveFromBatch",
                        method: "PUT",
                        data: {
                            appId: $scope.selectedProvider.PROVIDER_CREDENTIALING_APPLICATION_ID
                        }
                    }).success(function (data) {
                        if (!data.Status) {
                            bootbox.alert(data.Message);
                        }
                        else {
                            //Update batch count
                            $scope.selectedProvider.IS_IN_BATCH = false;
                            WBXBatchAppCountService.delApplication();

                            $scope.clearBanners();
                            $scope.ShowAppRemovedFromBatchBanner = true;

                            $timeout.cancel($scope.AppRemovedFromBatchTimer);
                            //Close the info banner automatically in 10 seconds
                            $scope.AppRemovedFromBatchTimer = $timeout(function () {
                                $scope.ShowAppRemovedFromBatchBanner = false;
                            }, 10000);
                        }
                    }).error(function (data, status, headers, config) {
                        bootbox.alert(data);
                    });

                    $scope.removeFromBatch = false;
                }
            });
        }]
    };
}]);

app.directive('wbxModalDialog', ['$parse', '$compile', '$timeout', '$filter', function ($parse, $compile, $timeout, $filter) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/ModalDialog',
        transclude: true,
        scope: {
            control: '=',
            headerText: '=',
            subHeaderText: '=?', //sub header text
            bodyTextArray: '=', //List of basic text to display
            buttonsArray: '=?', //This is a list of buttons to display
            btnWidth: '=?', //This is so that all the buttons have the same size.
            isEscDisabled: '=?', //This is to remove the X icon on the top right and not allowing esc key to be used
            cancelOnClick: '&?'
        },
        controller: ['$scope', function ($scope) {
            $scope.XButtonxOnClick = function () {
                $scope.control.hideDialog();
                $scope.cancelOnClick();
            }
        }],
        link: function (scope, element, attr, ctrl, $transclude) {

            $transclude(function (clone) {
                /*
                if (clone.length == 0 || (clone.length == 1 && !_.isUndefined(clone[0].context) && clone[0].context.textContent.replace(/^\s+|\s+$/g, '').length == 0)) {
                    scope.HasTransclude = false;
                }
                else {
                    scope.HasTransclude = true;
                }*/

                scope.HasTransclude = true;
            });

            //Set Aria  label
            scope.AriaLabel = attr.ariaLabelledby
            //Set Modal Id
            scope.ModalId = attr.name != null ? attr.name.replace(/ /g, "").replace(/-/g, "") : "GenericModalDialog";
            //Set Size
            scope.Size = attr.size;

            //Set Control
            scope.control = scope.control || {};
            scope.control.showDialog = function () {

                if (scope.isEscDisabled) {
                    $('#' + scope.ModalId).modal({
                        backdrop: 'static',
                        keyboard: false //Disabling esc key
                    });
                }
                else {
                    $('#' + scope.ModalId).modal({
                        backdrop: 'static'
                    });
                }

                $('#' + scope.ModalId).modal('show');
            };

            scope.control.hideDialog = function () {
                $('#' + scope.ModalId).modal('hide');
            };

            var buttonCount = 0;

            $timeout(function () {
                if (scope.buttonsArray != null) {
                    //Order the array so that the secondary buttons are first (left on the dialog).
                    var orderedButtonsArray = $filter('orderBy')(scope.buttonsArray, 'IsPrimary');

                    if (orderedButtonsArray != null) {
                        orderedButtonsArray.forEach(function (button) {

                            //Specify the width so all buttons have the same width. Also add margin-left on buttons that are not the most left
                            var buttonName = button.Text != null ? button.Text.replace(/ /g, "").replace(/-/g, "") : "GenericButton";

                            //Specify minimum width of 60px so that no button will be too small;
                            var style = "";
                            style += "style=\"min-width:60px";
                            if ((scope.btnWidth != null && scope.btnWidth != "")) {
                                style += ";width:" + scope.btnWidth;
                            }

                            if (buttonCount > 0) {
                                style += ";margin-left:10px";
                            }

                            style += "\"";

                            //Differentiate primary and seconary color.
                            var buttonColor = "btn-default";
                            if (button.IsPrimary) {
                                buttonColor = "btn-primary";
                            }

                            var functionName = "";
                            if (button.OnClick == null || button.OnClick == "") {
                                //If button OnClick isn't provided, we'll create a default one
                                button.OnClick = scope.ModalId + buttonName + buttonCount;
                                functionName = button.OnClick;
                                buttonCount++;
                            }
                            else {
                                functionName = '$parent.' + button.OnClick;
                            }

                            var btnhtml = '<button type="button" class="btn ' + buttonColor + ' btn-xs"' + style + ' id="' + scope.ModalId + buttonName + 'Button" ng-click="' + functionName + '()">' + button.Text + '</button>';
                            var temp = $compile(btnhtml)(scope);
                            
                            angular.element(document.getElementById(scope.ModalId + "ButtonsPlaceHolder")).append(temp);

                            if (button.OnClick) {
                                var fn = functionName + "()";

                                //get a reference to the function defined in the scope
                                var getParentMethod = $parse(fn);

                                // For example if the markup is -- <button on-click="test(arg1, arg2)"
                                // arg1, arg2 needs to be evaluated in the scope
                                // As isolateScope breaks the inheritance chain, we need to pass element.scope() to the parser function to access the arg1, arg2 properties from controllers scope

                                // define a method in the scope with the value of button.OnClick (eg, clickedx)
                                scope[functionName] = function (locals) {
                                    if (button.IsClosingDialog) {
                                        scope.control.hideDialog();
                                    }
                                    // when scope.clickedx is executed, execute the method defined in the controller. 
                                    return getParentMethod(element.scope(), locals);
                                }
                            }
                        });
                    }
                }
            });
        }
    };
}]);

app.directive('wbxExceptionDialog', ['$parse', '$compile', '$timeout', '$filter', function ($parse, $compile, $timeout, $filter) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/ModalDialog',
        scope: {
            control: '='
        },
        link: function (scope, element, attr) {
            scope.AriaLabel = "Error";
            scope.ModalId = "ErrorDialog";
            scope.headerText = "Error";

            //Set Control
            scope.control = scope.control || {};
            scope.control.showDialog = function (message) {
                scope.bodyTextArray = [message];
                $('#' + scope.ModalId).modal({
                    backdrop: 'static'
                });

                $('#' + scope.ModalId).modal('show');
            };

            scope.control.hideDialog = function () {
                $('#' + scope.ModalId).modal('hide');
            };

            $timeout(function () {
                var btnhtml = '<button type="button" class="btn btn-primary btn-xs" style="width:60px" id="ErrorOKButton" ng-click="ErrorOKButton()">OK</button>';
                var temp = $compile(btnhtml)(scope);

                angular.element(document.getElementById(scope.ModalId + "ButtonsPlaceHolder")).append(temp);

                scope.ErrorOKButton = function (locals) {
                    scope.control.hideDialog();
                }
            });
        }
    };
}]);

app.directive('wbxVerificationStatus', ['$http', function ($http) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/VerificationStatus',
        scope: {
            name: '@',                //This is to have unique id for the denial code dialog
            status: '=',            //VERIFICATION_STATUS
            verifiedBy: '=?',       //This is only relevant for VERIFICATION_STATUS == 1 (Verified)
            validationDate: '=?',   //This is only relevant for VERIFICATION_STATUS == 1 (Verified)
            dueDate: '=?',          //This is only relevant for VERIFICATION_STATUS == 3 (Due)
            verificationId: '=?',   //This is only relevant for VERIFICATION_STATUS == 4 (Denied)
            daysToExpire: '=?',     //This is only relevant for VERIFICATION_STATUS == 5 (Past Due)
            expiredDate: '=?',      //This is only relevant for VERIFICATION_STATUS == 6 (Expired)
            statusList: '=',        //List for Verification Status
            icons: '='
        },
        controller: ['$scope', function ($scope) {
            $scope.StatusObject = {
                VERIFICATION_STATUS_NAME: null,
                VERIFICATION_STATUS_COLOR: {
                    IsRed: false,
                    IsGreen: false,
                    IsGold: false
                },
                SingleMargin: null,
                Tooltip: null
            };

            //Set the appropriate status name, icon, etc when both statusList and status are set
            $scope.$watchCollection('[statusList, status]', function (n, o) {
                if (n[0] != null) {
                    if ($scope.status == null) {
                        $scope.status = 0;
                    }

                    if ($scope.status == 0) {
                        $scope.StatusObject.Tooltip = "Verification not required.";
                        $scope.TextPosition = {
                            'vertical-align': 'text-top'
                        };
                    }
                    else if ($scope.status == 1) {
                        $scope.StatusObject.Tooltip = "Verified by " + $scope.verifiedBy + " on " + $scope.validationDate + ".";
                        $scope.TextPosition = {
                            'vertical-align': 'text-bottom'
                        };
                    }
                    else if ($scope.status == 2) {
                        $scope.StatusObject.Tooltip = "Pending administrator approval.";
                        $scope.TextPosition = {
                            'vertical-align': 'text-bottom'
                        };
                    }
                    else if ($scope.status == 3) {
                        $scope.StatusObject.Tooltip = "Due on " + $scope.dueDate + ".";
                        $scope.TextPosition = {
                            'vertical-align': 'text-top'
                            };
                    }
                    else if ($scope.status == 4) {
                        $scope.StatusObject.Tooltip = "Denied - See notes for more information.";
                        $scope.TextPosition = {
                            'vertical-align': 'text-top'
                        };
                    }
                    else if ($scope.status == 5) {
                        $scope.StatusObject.Tooltip = "Remove from directory in " + $scope.daysToExpire + " days.";
                        $scope.TextPosition = {
                            'vertical-align': 'text-top'
                        };
                    }
                    else if ($scope.status == 6) {
                        $scope.StatusObject.Tooltip = "Expired on " + $scope.expiredDate + ".";
                        //Special margin for Expired status due to icon a bit wider
                        $scope.StatusObject.SingleMargin = { 'margin-right': '1px' };
                        $scope.TextPosition = {
                            'vertical-align': 'text-top'
                        };
                    }

                    var selectedStatus = _.findWhere($scope.statusList, {
                        PORTAL_STATUS: $scope.status
                    });

                    $scope.StatusObject.ICON = selectedStatus.ICON;
                    $scope.StatusObject.VERIFICATION_STATUS_NAME = selectedStatus.NAME;
                    $scope.StatusObject.VERIFICATION_STATUS_COLOR.IsGreen = selectedStatus.IsGreen;
                    $scope.StatusObject.VERIFICATION_STATUS_COLOR.IsGold = selectedStatus.IsGold;
                    $scope.StatusObject.VERIFICATION_STATUS_COLOR.IsRed = selectedStatus.IsRed;
                }
            });
            
            $scope.showDenialNotes = function (verificationId) {
                $scope.LoadingDenialInfo = true;
                
                $http({
                    method: 'GET',
                    url: '/EntityManagement/GetDenialInfo',
                    params: {
                        VERIFICATION_ID: verificationId
                    }
                }).then(function successCallback(response) {
                    if (response.data != null) {
                        $scope.DenialInfo = {
                            REASON: response.data.DESCRIPTION,
                            NOTES: response.data.VERIFICATION_DENIAL_NOTES
                        };
                    }
                    $scope.LoadingDenialInfo = false;
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error in retrieving verification denial information.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    $scope.LoadingDenialInfo = false;
                });

                $('#DenialNotes' + $scope.name + 'Dialog').modal({
                    backdrop: 'static'
                });
                $('#DenialNotes' + $scope.name + 'Dialog').modal('show');
            }

            $scope.closeDenialNotesDialog = function () {
                $('#DenialNotes' + $scope.name + 'Dialog').modal('hide');
            }
        }]
    };
}]);

app.directive('wbxVerificationButton', [function () {
    return {
        restrict: 'E',
        templateUrl: '/Templates/VerificationButton',
        scope: {
            data: '=',
            submitFunction: '&'
        },
        controller: ['$scope', function ($scope) {
            $scope.submit = function (entity, isVerify) {
                $scope.submitFunction({ entity: entity, isVerify: isVerify});
            }
        }]
    };
}]);

app.directive('wbxMemberInfoFields', ['$http', '$q', '$timeout', function ($http, $q, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/MemberInfoFields',
        require: '^form',
        scope: {
            memberData: '=',
            fieldsReady: '=',
            enrolleeId: '=?',
            isDependent: '=?',
            isEdit: '=?',
            fullGender: '=?' /*Pass in the original data object with gender as 1 char to return the full gender string*/
        },
        controller: ['$scope', function ($scope) {
            
            $scope.init = function () {
                $scope.getStateList();
                if (!$scope.isEdit) {
                    $scope.getMaritalStatuses();
                }

            }
            $scope.fieldsReady = !( $scope.loadingMaritalStatusesList || $scope.loadingStateList);
           
            $scope.getStateList = function () {
                //if (scope.stateList == null) {
                $scope.LoadingStateList = true;
                $http({
                    method: 'GET',
                    url: '/PortalDropList/GetStates'
                }).then(function successCallback(response) {
                    $scope.stateList = response.data;

                    $scope.LoadingStateList = false;
                    //if ($scope.isEntityPanelLoaded())
                    //    $scope.showPanelBody('EntityPanelBody');

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating state dropdown.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    $scope.LoadingStateList = false;
                });
                //}
            }
           
            $scope.getMaritalStatuses = function () {
                $scope.maritalStatusesList = null;
                $scope.loadingMaritalStatusesList = true;
                $http({
                    method: 'GET',
                    url: '/Enrollee/GetMaritalStatuses'
                }).then(function successCallback(response) {
                    $scope.maritalStatusesList = response.data;

                    $scope.loadingMaritalStatusesList = false;
                    //if ($scope.isEntityPanelLoaded())
                    //    $scope.showPanelBody('EntityPanelBody');

                }, function errorCallback(response) {
                    $scope.loadingMaritalStatusesList = false;
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating marital statuses.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.getSubscriberInfo = function () {
                $scope.loadingSubscriberInfo = true;
                $http({
                    method: 'GET',
                    url: '/MAP/AddMember/GetSubscriberInfo',
                    params: {
                        enrolleeId: $scope.enrolleeId
                    }
                }).then(function successCallback(response) {
                    $scope.subscriber = response.data;
                    $scope.loadingSubscriberInfo = false;
                }, function errorCallback(response) {
                    $scope.loadingSubscriberInfo = false;
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error populating subscriber information.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }

            $scope.GenderList = [
               {
                   VALUE: 'F',
                   DESCRIPTION: "Female"
               },
               {
                   VALUE: 'M',
                   DESCRIPTION: "Male"
               },
               {
                   VALUE: 'U',
                   DESCRIPTION: "Unknown"
               }
            ];

            $scope.$watch('isDependent', function (n, o) {
                if (n == true) {
                    $scope.getSubscriberInfo();
                }
            });
            $scope.$watch('fullGender.GENDER', function (n, o) {
                if (n != null) {
                    $scope.fullGender.GENDER_FULL = (_.findWhere($scope.GenderList, { VALUE: $scope.fullGender.GENDER })).DESCRIPTION;
                }
            });
        }],
      
        link: function (scope, element, attr, formController) {
            scope.member_form = formController;
        }
    };
}]);

app.directive('wbxAdditionalInsuranceFields', ['$http', '$q', '$timeout','$window', function ($http, $q, $timeout, $window) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/AdditionalInsuranceFields',
        require: '^form',
        scope: {
            policyData: '=',
            fieldsReady: '='
        },
    
        controller: ['$scope', function ($scope) {
            $scope.init = function () {
                $scope.getRelationshipCodes();
                }
            $scope.fieldsReady = !$scope.loadingRelationshipCodesList;
            $scope.getRelationshipCodes = function () {
                $scope.relationshipCodesList = null;
                $scope.loadingRelationshipCodesList = true;
                $http({
                    method: 'GET',
                    url: '/Enrollee/GetRelationshipCodes'
                }).then(function successCallback(response) {
                    $scope.relationshipCodesList = response.data;
                    var path = $window.location.pathname;
                    if (path == "/MAP/EnrollmentSummary") {
                        $scope.colName = 4;
                        $scope.colInput = 8;
                        $scope.OtherInsuranceModal = true;
                        return ($scope.OtherInsuranceModal);
                    }
                    else {
                        $scope.colName = 3;
                        $scope.colInput = 8;
                    }
                    
                    $scope.loadingRelationshipCodesList = false;
                }, function errorCallback(response) {
                    $scope.loadingRelationshipCodesList = false;
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating relationship codes.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                });
            }
           
     $scope.GenderList = [
       {
           VALUE: 'F',
           DESCRIPTION: "Female"
       },
       {
           VALUE: 'M',
           DESCRIPTION: "Male"
       },
       {
           VALUE: 'U',
           DESCRIPTION: "Unknown"
       }
     ];

    $scope.PolicyTypeList = [
        {
            VALUE: 7,
            DESCRIPTION: "Unknown"
        },
        {
            VALUE: 6,
            DESCRIPTION: "Group Dental"
        },
        {
            VALUE: 5,
            DESCRIPTION: "Group Medical"
        },
        {
            VALUE: 1,
            DESCRIPTION: "Medicare Part A"
        },
        {
            VALUE: 2,
            DESCRIPTION: "Medicare Part B"
        },
        {
            VALUE: 3,
            DESCRIPTION: "Medicare Part C"
        },
        {
            VALUE: 4,
            DESCRIPTION: "Medicare Part D"
        }
    ];

        }],

        link: function (scope, element, attr, formController) {
            scope.add_member_form = formController;
        }
    };
}]);

app.directive('wbxRequestIdModal', ['$http', '$q', '$timeout', function ($http, $q, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/RequestIdModal',
        scope: {
            control: '=',
            data: '=',
            isSuccess: '=',
            message: '=',
            submit: '&'
        },
        controller: ['$scope', function ($scope) {
            $scope.init = function () {
                $timeout(function () {
                    $scope.message = null;
                });
            }

            $scope.SubmitRequestCard = function () {
                $http({
                    method: 'PUT',
                    url: '/Enrollee/RequestIDCard',
                    params: {
                        enrolleeId: $scope.data.enrolleeId,
                        productId: $scope.data.productId
                    }
                }).then(function successCallback(response) {
                    $scope.isSuccess = response.data.Status;
                    $scope.message = response.data.Message;
                    $scope.control.hideDialog();
                    $scope.submit();
                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error with requesting id card.");
                    $scope.control.hideDialog();
                    $scope.submit();
                })
            }
        }],
        link: function (scope, element, attr) {
            scope.control = scope.control || {};
            scope.control.showDialog = function () {
                scope.init();
                $('#RequestIDCard').modal({
                    backdrop: 'static',
                    keyboard: false
                });

                $('#RequestIDCard').modal('show');
            };

            scope.control.hideDialog = function () {
                $('#RequestIDCard').modal('hide');
            };
        }
    };
}]);


app.directive('wbxTerminateMemberModal', ['$http', '$q', '$timeout', function ($http, $q, $timeout) {
    return {
        restrict: 'E',
        templateUrl: '/Templates/TerminateMemberModal',
        scope: {
            control: '=',
            data: '=',
            submit: '&'
        },
        controller: ['$scope', function ($scope) {
            $scope.$watch('data.TYPE', function (n, o) {
                if (n != null && n != o) {
                    $scope.getTermReasonCodes($scope.data.TYPE);
                }
            });

            $scope.init = function () {
                $timeout(function () {
                    $scope.ShowErrorBanner = false;
                    $scope.data.TERM_REASON_CODE = null;
                    $scope.data.TERM_REASON_EVENT_DATE = moment().startOf('day').format("MM/DD/YYYY");
                });
            }

            $scope.closeSelectTerminatePolicy = function () {
                //$('#SelectTerminatePolicy').modal('hide');
                $scope.control.hideDialog();
            };

            $scope.submitTermination = function () {
                if ($scope.terminate_member_form.$invalid) {
                    return false;
                }
                $scope.ShowTerminationProcessingBanner = true;
                if ($scope.data.TYPE == 1) {
                    $scope.SubmitTerminatePolicy();
                }
                else if ($scope.data.TYPE == 2) {
                    $scope.SubmitDropDependent();
                }
            }

            $scope.SubmitDropDependent = function () {
                $http({
                    method: 'POST',
                    url: '/Enrollee/DropDependent',
                    data: {
                        enrolleeId: $scope.data.ENROLLEE_ID,
                        groupId: $scope.data.PREMIUM_GROUP_ID,
                        productId: $scope.data.PRODUCT_ID,
                        termReasonCode: $scope.data.TERM_REASON_CODE,
                        termReasonEventDate: $scope.data.TERM_REASON_EVENT_DATE
                    }
                }).then(function successCallback(response) {
                    $scope.ShowTerminationProcessingBanner = false;
                    if (!response.data.Status) {
                        $scope.ErrorBannerMessage = response.data.Message;
                        $scope.ShowErrorBanner = true;
                    }
                    else {
                        $scope.closeSelectTerminatePolicy();
                        $scope.submit();
                    }

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error in Dropping Dependent.");
                    $scope.ShowTerminationProcessingBanner = false;
                    $scope.closeSelectTerminatePolicy();
                });
            };

            $scope.SubmitTerminatePolicy = function () {
                $http({
                        method: 'POST',
                        url: '/Enrollee/TerminatePolicy',
                        data: {
                                enrolleeId: $scope.data.ENROLLEE_ID,
                                groupId: $scope.data.PREMIUM_GROUP_ID,
                                productId: $scope.data.PRODUCT_ID,
                                termReasonCode: $scope.data.TERM_REASON_CODE,
                                termReasonEventDate: $scope.data.TERM_REASON_EVENT_DATE
                }
                }).then(function successCallback(response) {
                    $scope.ShowTerminationProcessingBanner = false;
                    if (!response.data.Status) {
                        $scope.ErrorBannerMessage = response.data.Message;
                        $scope.ShowErrorBanner = true;
                    }
                    else {
                        $scope.closeSelectTerminatePolicy();
                        $scope.submit();
                }

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error in terminating policy.");
                    $scope.ShowTerminationProcessingBanner = false;
                    $scope.closeSelectTerminatePolicy();
                });
            };

            $scope.getTermReasonCodes = function (type) {
                $scope.loadingTermCodesList = true;
                $http({
                    method: 'GET',
                    url: '/Enrollee/getTermReasonCodes',
                    params: {
                        type: type
                    }
                }).then(function successCallback(response) {
                    $scope.termCodesList = response.data;
                    $scope.loadingTermCodesList = false;
                }), function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    if ($scope.ExceptionDialogControl != null) {
                        $scope.ExceptionDialogControl.showDialog("Error with populating Termination Reason codes.");
                    }
                    else {
                        bootbox.alert(response.data.Message);
                    }
                    $scope.loadingTermCodesList = false;
                }
            };
        }],
        link: function (scope, element, attr) {
            scope.control = scope.control || {};
            scope.control.showDialog = function () {
                scope.init();
                $('#SelectTerminatePolicy').modal({
                    backdrop: 'static',
                    keyboard: false
                });

                $('#SelectTerminatePolicy').modal('show');
            };

            scope.control.hideDialog = function () {
                scope.terminate_member_form.$setPristine();
                $('#SelectTerminatePolicy').modal('hide');
            };
        }
    };
}]);

app.directive('wbxMemberGridButtons', [function () {
    return {
        restrict: 'E',
        templateUrl: '/Templates/MemberGridButtons',
        scope: {
            control: '=',
            permissions: '=',
            data: '=',
            dialogData: '=',
            isGrid: '=',
            isAddDependent: '=?',
            isEnrollmentSummary: '=?',
            isEnrollmentSummaryInfo: '=?'
        },
        controller: ['$scope', '$window', function ($scope, $window) {
            $scope.filter = {
                benefitLvl: 1,
                locationId: -1,
                providerId: -1
            };
            
            $scope.gotoEnrollmentSummaryPage = function (enrolleeId, planId, groupId) {
                window.location.href = "/MAP/EnrollmentSummary/SelectEnrollee?EnrolleeId=" + enrolleeId + "&GroupId=" + groupId + "&PlanId=" + planId;
            };

            $scope.gotoAddDependent = function (enrolleeId, planId, groupId) {
                $window.location.href = "/MAP/AddMember/Index?EnrolleeId=" + enrolleeId + "&GroupId=" + groupId + "&PlanId=" + planId;
            }

            $scope.showBenefitSummaryReport = function (enrolleeId, productId, groupId) {
                var URL = '/Areas/MWP/Reports/BenefitSummary.aspx';
                var param = {
                    enrolleeId: enrolleeId,
                    productId: productId,
                    premiumGroupId: groupId,
                    benefitLvl: $scope.filter.benefitLvl,
                    locationId: $scope.filter.locationId,
                    providerId: $scope.filter.providerId

                };
                var result = URL + "?" + jQuery.param(param);
                window.open(result, "BenefitSummary", "resizable,scrollbars,width=1000,height=900", true);
            }

            $scope.showRequestIdCardDialog = function (enrolleeId, productId, firstName, lastName, address1, city, state, zip, groupIndex, planIndex) {
                $scope.dialogData.RequestIdInfo = {
                    ENROLLEE_ID: enrolleeId,
                    PRODUCT_ID: productId,
                    FIRST_NAME: firstName,
                    LAST_NAME: lastName,
                    ADDRESS: address1,
                    CITY: city,
                    STATE: state,
                    ZIP: zip,
                    GROUP_INDEX: groupIndex,
                    PLAN_INDEX: planIndex
                }
                $scope.determineWhereToShowAlert();
                $scope.control.showRequestIdDialog();
            }

            $scope.showIdCardReport = function (enrolleeId, productId, groupId) {
                var URL = '/Areas/MAP/Reports/MemberIDCard.aspx';
                var param = {
                    enrolleeId: enrolleeId,
                    productId: productId,
                    premiumGroupId: groupId,
                    benefitLvl: $scope.filter.benefitLvl,
                    locationId: $scope.filter.locationId,
                    providerId: $scope.filter.providerId

                };
                var result = URL + "?" + jQuery.param(param);
                window.open(result, "GetIDCard", "resizable,scrollbars,width=1000,height=900", true);
            }

            $scope.showEligibilityHistoryReport = function (enrolleeId) {
                var URL = '/Areas/MAP/Reports/EligibilityHistory.aspx';
                var param = {
                    enrolleeId: enrolleeId
                };

                var result = URL + "?" + jQuery.param(param);
                window.open(result, "ViewEligbility", "resizable,scrollbars,width=1000,height=900", true);
            };

            $scope.gotoOtherInsurance = function (enrolleeId, productId, groupId) {
                window.location.href = "/MAP/EnrollmentSummary/SelectEnrollee?EnrolleeId=" + enrolleeId + "&GroupId=" + groupId + "&PlanId=" + productId + '#bottom';
            };
            
            $scope.showTerminatePolicyDialog = function (enrolleeId, productId, premiumGroupId, firstName, lastName, benefitPlan, groupIndex, planIndex, dependentIndex) {
                $scope.dialogData.TerminateMemberInfo = {
                    ENROLLEE_ID: enrolleeId,
                    PRODUCT_ID: productId,
                    PREMIUM_GROUP_ID: premiumGroupId,
                    FIRST_NAME: firstName,
                    LAST_NAME: lastName,
                    BENEFIT_PLAN: benefitPlan,
                    GROUP_INDEX: groupIndex,
                    PLAN_INDEX: planIndex,
                    DEPENDENT_INDEX: dependentIndex,
                    TYPE: 1
                };
                $scope.determineWhereToShowAlert();
                $scope.control.showTerminateMemberDialog();
            }

            $scope.showDropDependentDialog = function (enrolleeId, productId, premiumGroupId, firstName, lastName, benefitPlan, groupIndex, planIndex, dependentIndex) {
                $scope.dialogData.TerminateMemberInfo = {
                    ENROLLEE_ID: enrolleeId,
                    PRODUCT_ID: productId,
                    PREMIUM_GROUP_ID: premiumGroupId,
                    FIRST_NAME: firstName,
                    LAST_NAME: lastName,
                    BENEFIT_PLAN: benefitPlan,
                    GROUP_INDEX: groupIndex,
                    PLAN_INDEX: planIndex,
                    DEPENDENT_INDEX: dependentIndex,
                    TYPE: 2
                };
                $scope.determineWhereToShowAlert();
                $scope.control.showTerminateMemberDialog();
            }

            $scope.determineWhereToShowAlert = function () {
                if ($scope.isEnrollmentSummary) {
                    //Only on enrollment summary page we need to determine where to show the alert
                    $scope.dialogData.IsAlertShownOnDependentLevel = $scope.isGrid;
                }
            }
        }]
    };
}]);

app.directive('wbxMemberGridModalDialogs', [function () {
    return {
        restrict: 'E',
        templateUrl: '/Templates/MemberGridModalDialogs',
        scope: {
            control: '=',
            data: '=',
            isSuccess: '=',
            message: '=',
            submit: '&'
        },
        controller: ['$scope', '$http', '$window', '$timeout', function ($scope, $http, $window, $timeout) {
            //Region Terminate policy and drop dependent
            $scope.$watch('data.TerminateMemberInfo.TYPE', function (n, o) {
                if (n != null && n != o) {
                    $scope.getTermReasonCodes($scope.data.TerminateMemberInfo.TYPE);
                }
            });

            $scope.initTerminateMember = function() {
                $timeout(function () {
                    $scope.ShowErrorBanner = false;
                    $scope.data.TerminateMemberInfo.TERM_REASON_CODE = null;
                    $scope.data.TerminateMemberInfo.TERM_REASON_EVENT_DATE = moment().startOf('day').format("MM/DD/YYYY");
                });
            }

            $scope.getTermReasonCodes = function (type) {
                $scope.LoadingTermCodesList = true;
                $http({
                    method: 'GET',
                    url: '/Enrollee/getTermReasonCodes',
                    params: {
                        type: type
                    }
                }).then(function successCallback(response) {
                    $scope.TermCodesList = response.data;
                    $scope.LoadingTermCodesList = false;
                }), function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error with populating Termination Reason codes.");
                    $scope.LoadingTermCodesList = false;
                }
            };

            $scope.submitTermination = function () {
                if ($scope.terminate_member_form.$invalid) {
                    return false;
                }
                $scope.ShowTerminationProcessingBanner = true;
                if ($scope.data.TerminateMemberInfo.TYPE == 1) {
                    $scope.submitTerminatePolicy();
                }
                else if ($scope.data.TerminateMemberInfo.TYPE == 2) {
                    $scope.submitDropDependent();
                }
            }

            $scope.submitTerminatePolicy = function () {
                $http({
                    method: 'POST',
                    url: '/Enrollee/TerminatePolicy',
                    data: {
                        enrolleeId: $scope.data.TerminateMemberInfo.ENROLLEE_ID,
                        groupId: $scope.data.TerminateMemberInfo.PREMIUM_GROUP_ID,
                        productId: $scope.data.TerminateMemberInfo.PRODUCT_ID,
                        termReasonCode: $scope.data.TerminateMemberInfo.TERM_REASON_CODE,
                        termReasonEventDate: $scope.data.TerminateMemberInfo.TERM_REASON_EVENT_DATE
                    }
                }).then(function successCallback(response) {
                    $scope.ShowTerminationProcessingBanner = false;
                    if (response.data.Status == false) {
                        $scope.ErrorBannerMessage = response.data.Message;
                        $scope.ShowErrorBanner = true;
                    }
                    else {
                        $scope.isSuccess = response.data.Status;
                        $scope.message = "The policy has been terminated successfully with a termination date of " + $scope.data.TerminateMemberInfo.TERM_REASON_EVENT_DATE + ".";
                        $scope.control.hideTerminateMemberDialog();
                        $scope.submit();
                    }

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error in terminating policy.");
                    $scope.ShowTerminationProcessingBanner = false;
                    $scope.control.hideTerminateMemberDialog();
                });
            };

            $scope.submitDropDependent = function () {
                $http({
                    method: 'POST',
                    url: '/Enrollee/DropDependent',
                    data: {
                        enrolleeId: $scope.data.TerminateMemberInfo.ENROLLEE_ID,
                        groupId: $scope.data.TerminateMemberInfo.PREMIUM_GROUP_ID,
                        productId: $scope.data.TerminateMemberInfo.PRODUCT_ID,
                        termReasonCode: $scope.data.TerminateMemberInfo.TERM_REASON_CODE,
                        termReasonEventDate: $scope.data.TerminateMemberInfo.TERM_REASON_EVENT_DATE
                    }
                }).then(function successCallback(response) {
                    $scope.ShowTerminationProcessingBanner = false;
                    if (response.data.Status == false) {
                        $scope.ErrorBannerMessage = response.data.Message;
                        $scope.ShowErrorBanner = true;
                    }
                    else {
                        $scope.isSuccess = response.data.Status;
                        $scope.message = "The dependent has been terminated successfully with a termination date of " + $scope.data.TerminateMemberInfo.TERM_REASON_EVENT_DATE + ".";
                        $scope.control.hideTerminateMemberDialog();
                        $scope.submit();
                    }

                }, function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error in Dropping Dependent.");
                    $scope.ShowTerminationProcessingBanner = false;
                    $scope.control.hideTerminateMemberDialog();
                });
            };

            //End Region Terminate policy and drop dependent

            //Region Request Id Card
            $scope.submitRequestIdCard = function () {
                $scope.ShowRequestIdProcessing = true;
                $http({
                        method: 'PUT',
                        url: '/Enrollee/RequestIDCard',
                        params: {
                            enrolleeId: $scope.data.RequestIdInfo.ENROLLEE_ID,
                            productId: $scope.data.RequestIdInfo.PRODUCT_ID
                        }
                }).then(function successCallback(response) {
                    $scope.ShowRequestIdProcessing = false;
                    $scope.isSuccess = response.data.Status;
                    $scope.message = response.data.Message;
                    $scope.control.hideRequestIdDialog();
                    $scope.submit();
                    
                },function errorCallback(response) {
                    console.error(response.data.Message);
                    console.error(response);
                    $scope.ExceptionDialogControl.showDialog("Error with requesting id card.");
                    $scope.control.hideRequestIdDialog();
                    $scope.submit();
                    $scope.ShowRequestIdProcessing = false;
                });
            }
            //End Region Request Id Card
        }],
        link: function (scope, element, attr) {
            scope.control = scope.control || {};
            scope.control.showRequestIdDialog = function () {
                $('#RequestIDCard').modal({
                    backdrop: 'static',
                    keyboard: false
                });

                $('#RequestIDCard').modal('show');
            };

            scope.control.hideRequestIdDialog = function () {
                $('#RequestIDCard').modal('hide');
            };

            scope.control.showTerminateMemberDialog = function () {
                scope.initTerminateMember();
                $('#TerminateMember').modal({
                    backdrop: 'static',
                    keyboard: false
                });

                $('#TerminateMember').modal('show');
            };

            scope.control.hideTerminateMemberDialog = function () {
                scope.terminate_member_form.$setPristine();
                $('#TerminateMember').modal('hide');
            };
        }
    };
}]);

app.directive('wbxAutoDismiss', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
        scope: {
            wbxAutoDismiss: '='
        },
        controller: ['$scope', '$timeout', function ($scope, $timeout) {
            $scope.$watch('wbxAutoDismiss', function (n, o) {
                if (n == true) {
                    $timeout(function () {
                        $scope.wbxAutoDismiss = false;
                    }, 5000);
                }
            });
        }]
    };
}]);
